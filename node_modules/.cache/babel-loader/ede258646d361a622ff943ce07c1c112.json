{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddUserOperation = void 0;\n\nconst crypto = require(\"crypto\");\n\nconst error_1 = require(\"../error\");\n\nconst utils_1 = require(\"../utils\");\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n/** @internal */\n\n\nclass AddUserOperation extends command_1.CommandOperation {\n  constructor(db, username, password, options) {\n    super(db, options);\n    this.db = db;\n    this.username = username;\n    this.password = password;\n    this.options = options !== null && options !== void 0 ? options : {};\n  }\n\n  execute(server, session, callback) {\n    const db = this.db;\n    const username = this.username;\n    const password = this.password;\n    const options = this.options; // Error out if digestPassword set\n\n    if (options.digestPassword != null) {\n      return callback(new error_1.MongoInvalidArgumentError('Option \"digestPassword\" not supported via addUser, use db.command(...) instead'));\n    }\n\n    let roles;\n\n    if (!options.roles || Array.isArray(options.roles) && options.roles.length === 0) {\n      (0, utils_1.emitWarningOnce)('Creating a user without roles is deprecated. Defaults to \"root\" if db is \"admin\" or \"dbOwner\" otherwise');\n\n      if (db.databaseName.toLowerCase() === 'admin') {\n        roles = ['root'];\n      } else {\n        roles = ['dbOwner'];\n      }\n    } else {\n      roles = Array.isArray(options.roles) ? options.roles : [options.roles];\n    }\n\n    let topology;\n\n    try {\n      topology = (0, utils_1.getTopology)(db);\n    } catch (error) {\n      return callback(error);\n    }\n\n    const digestPassword = topology.lastHello().maxWireVersion >= 7;\n    let userPassword = password;\n\n    if (!digestPassword) {\n      // Use node md5 generator\n      const md5 = crypto.createHash('md5'); // Generate keys used for authentication\n\n      md5.update(`${username}:mongo:${password}`);\n      userPassword = md5.digest('hex');\n    } // Build the command to execute\n\n\n    const command = {\n      createUser: username,\n      customData: options.customData || {},\n      roles: roles,\n      digestPassword\n    }; // No password\n\n    if (typeof password === 'string') {\n      command.pwd = userPassword;\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n\n}\n\nexports.AddUserOperation = AddUserOperation;\n(0, operation_1.defineAspects)(AddUserOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"sources":["../../src/operations/add_user.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddUserOperation = void 0;\nconst crypto = require(\"crypto\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass AddUserOperation extends command_1.CommandOperation {\n    constructor(db, username, password, options) {\n        super(db, options);\n        this.db = db;\n        this.username = username;\n        this.password = password;\n        this.options = options !== null && options !== void 0 ? options : {};\n    }\n    execute(server, session, callback) {\n        const db = this.db;\n        const username = this.username;\n        const password = this.password;\n        const options = this.options;\n        // Error out if digestPassword set\n        if (options.digestPassword != null) {\n            return callback(new error_1.MongoInvalidArgumentError('Option \"digestPassword\" not supported via addUser, use db.command(...) instead'));\n        }\n        let roles;\n        if (!options.roles || (Array.isArray(options.roles) && options.roles.length === 0)) {\n            (0, utils_1.emitWarningOnce)('Creating a user without roles is deprecated. Defaults to \"root\" if db is \"admin\" or \"dbOwner\" otherwise');\n            if (db.databaseName.toLowerCase() === 'admin') {\n                roles = ['root'];\n            }\n            else {\n                roles = ['dbOwner'];\n            }\n        }\n        else {\n            roles = Array.isArray(options.roles) ? options.roles : [options.roles];\n        }\n        let topology;\n        try {\n            topology = (0, utils_1.getTopology)(db);\n        }\n        catch (error) {\n            return callback(error);\n        }\n        const digestPassword = topology.lastHello().maxWireVersion >= 7;\n        let userPassword = password;\n        if (!digestPassword) {\n            // Use node md5 generator\n            const md5 = crypto.createHash('md5');\n            // Generate keys used for authentication\n            md5.update(`${username}:mongo:${password}`);\n            userPassword = md5.digest('hex');\n        }\n        // Build the command to execute\n        const command = {\n            createUser: username,\n            customData: options.customData || {},\n            roles: roles,\n            digestPassword\n        };\n        // No password\n        if (typeof password === 'string') {\n            command.pwd = userPassword;\n        }\n        super.executeCommand(server, session, command, callback);\n    }\n}\nexports.AddUserOperation = AddUserOperation;\n(0, operation_1.defineAspects)(AddUserOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=add_user.js.map"]},"metadata":{},"sourceType":"script"}