{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SrvPoller = exports.SrvPollingEvent = void 0;\n\nconst dns = require(\"dns\");\n\nconst timers_1 = require(\"timers\");\n\nconst error_1 = require(\"../error\");\n\nconst logger_1 = require(\"../logger\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst utils_1 = require(\"../utils\");\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\n\n\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n/**\n * @internal\n * @category Event\n */\n\n\nclass SrvPollingEvent {\n  constructor(srvRecords) {\n    this.srvRecords = srvRecords;\n  }\n\n  hostnames() {\n    return new Set(this.srvRecords.map(r => utils_1.HostAddress.fromSrvRecord(r).toString()));\n  }\n\n}\n\nexports.SrvPollingEvent = SrvPollingEvent;\n/** @internal */\n\nclass SrvPoller extends mongo_types_1.TypedEventEmitter {\n  constructor(options) {\n    var _a, _b, _c;\n\n    super();\n\n    if (!options || !options.srvHost) {\n      throw new error_1.MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n    }\n\n    this.srvHost = options.srvHost;\n    this.srvMaxHosts = (_a = options.srvMaxHosts) !== null && _a !== void 0 ? _a : 0;\n    this.srvServiceName = (_b = options.srvServiceName) !== null && _b !== void 0 ? _b : 'mongodb';\n    this.rescanSrvIntervalMS = 60000;\n    this.heartbeatFrequencyMS = (_c = options.heartbeatFrequencyMS) !== null && _c !== void 0 ? _c : 10000;\n    this.logger = new logger_1.Logger('srvPoller', options);\n    this.haMode = false;\n    this.generation = 0;\n    this._timeout = undefined;\n  }\n\n  get srvAddress() {\n    return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n  }\n\n  get intervalMS() {\n    return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n  }\n\n  start() {\n    if (!this._timeout) {\n      this.schedule();\n    }\n  }\n\n  stop() {\n    if (this._timeout) {\n      (0, timers_1.clearTimeout)(this._timeout);\n      this.generation += 1;\n      this._timeout = undefined;\n    }\n  }\n\n  schedule() {\n    if (this._timeout) {\n      (0, timers_1.clearTimeout)(this._timeout);\n    }\n\n    this._timeout = (0, timers_1.setTimeout)(() => this._poll(), this.intervalMS);\n  }\n\n  success(srvRecords) {\n    this.haMode = false;\n    this.schedule();\n    this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n  }\n\n  failure(message, obj) {\n    this.logger.warn(message, obj);\n    this.haMode = true;\n    this.schedule();\n  }\n\n  parentDomainMismatch(srvRecord) {\n    this.logger.warn(`parent domain mismatch on SRV record (${srvRecord.name}:${srvRecord.port})`, srvRecord);\n  }\n\n  _poll() {\n    const generation = this.generation;\n    dns.resolveSrv(this.srvAddress, (err, srvRecords) => {\n      if (generation !== this.generation) {\n        return;\n      }\n\n      if (err) {\n        this.failure('DNS error', err);\n        return;\n      }\n\n      const finalAddresses = [];\n\n      for (const record of srvRecords) {\n        if (matchesParentDomain(record.name, this.srvHost)) {\n          finalAddresses.push(record);\n        } else {\n          this.parentDomainMismatch(record);\n        }\n      }\n\n      if (!finalAddresses.length) {\n        this.failure('No valid addresses found at host');\n        return;\n      }\n\n      this.success(finalAddresses);\n    });\n  }\n\n}\n\nexports.SrvPoller = SrvPoller;\n/** @event */\n\nSrvPoller.SRV_RECORD_DISCOVERY = 'srvRecordDiscovery';","map":{"version":3,"sources":["../../src/sdam/srv_polling.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SrvPoller = exports.SrvPollingEvent = void 0;\nconst dns = require(\"dns\");\nconst timers_1 = require(\"timers\");\nconst error_1 = require(\"../error\");\nconst logger_1 = require(\"../logger\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst utils_1 = require(\"../utils\");\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n    const regex = /^.*?\\./;\n    const srv = `.${srvAddress.replace(regex, '')}`;\n    const parent = `.${parentDomain.replace(regex, '')}`;\n    return srv.endsWith(parent);\n}\n/**\n * @internal\n * @category Event\n */\nclass SrvPollingEvent {\n    constructor(srvRecords) {\n        this.srvRecords = srvRecords;\n    }\n    hostnames() {\n        return new Set(this.srvRecords.map(r => utils_1.HostAddress.fromSrvRecord(r).toString()));\n    }\n}\nexports.SrvPollingEvent = SrvPollingEvent;\n/** @internal */\nclass SrvPoller extends mongo_types_1.TypedEventEmitter {\n    constructor(options) {\n        var _a, _b, _c;\n        super();\n        if (!options || !options.srvHost) {\n            throw new error_1.MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n        }\n        this.srvHost = options.srvHost;\n        this.srvMaxHosts = (_a = options.srvMaxHosts) !== null && _a !== void 0 ? _a : 0;\n        this.srvServiceName = (_b = options.srvServiceName) !== null && _b !== void 0 ? _b : 'mongodb';\n        this.rescanSrvIntervalMS = 60000;\n        this.heartbeatFrequencyMS = (_c = options.heartbeatFrequencyMS) !== null && _c !== void 0 ? _c : 10000;\n        this.logger = new logger_1.Logger('srvPoller', options);\n        this.haMode = false;\n        this.generation = 0;\n        this._timeout = undefined;\n    }\n    get srvAddress() {\n        return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n    }\n    get intervalMS() {\n        return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n    }\n    start() {\n        if (!this._timeout) {\n            this.schedule();\n        }\n    }\n    stop() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n            this.generation += 1;\n            this._timeout = undefined;\n        }\n    }\n    schedule() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n        }\n        this._timeout = (0, timers_1.setTimeout)(() => this._poll(), this.intervalMS);\n    }\n    success(srvRecords) {\n        this.haMode = false;\n        this.schedule();\n        this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n    }\n    failure(message, obj) {\n        this.logger.warn(message, obj);\n        this.haMode = true;\n        this.schedule();\n    }\n    parentDomainMismatch(srvRecord) {\n        this.logger.warn(`parent domain mismatch on SRV record (${srvRecord.name}:${srvRecord.port})`, srvRecord);\n    }\n    _poll() {\n        const generation = this.generation;\n        dns.resolveSrv(this.srvAddress, (err, srvRecords) => {\n            if (generation !== this.generation) {\n                return;\n            }\n            if (err) {\n                this.failure('DNS error', err);\n                return;\n            }\n            const finalAddresses = [];\n            for (const record of srvRecords) {\n                if (matchesParentDomain(record.name, this.srvHost)) {\n                    finalAddresses.push(record);\n                }\n                else {\n                    this.parentDomainMismatch(record);\n                }\n            }\n            if (!finalAddresses.length) {\n                this.failure('No valid addresses found at host');\n                return;\n            }\n            this.success(finalAddresses);\n        });\n    }\n}\nexports.SrvPoller = SrvPoller;\n/** @event */\nSrvPoller.SRV_RECORD_DISCOVERY = 'srvRecordDiscovery';\n//# sourceMappingURL=srv_polling.js.map"]},"metadata":{},"sourceType":"script"}