{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._advanceClusterTime = exports.drainTimerQueue = exports.ServerType = exports.TopologyType = exports.STATE_CONNECTED = exports.STATE_CONNECTING = exports.STATE_CLOSED = exports.STATE_CLOSING = void 0;\n\nconst timers_1 = require(\"timers\"); // shared state names\n\n\nexports.STATE_CLOSING = 'closing';\nexports.STATE_CLOSED = 'closed';\nexports.STATE_CONNECTING = 'connecting';\nexports.STATE_CONNECTED = 'connected';\n/**\n * An enumeration of topology types we know about\n * @public\n */\n\nexports.TopologyType = Object.freeze({\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown',\n  LoadBalanced: 'LoadBalanced'\n});\n/**\n * An enumeration of server types we know about\n * @public\n */\n\nexports.ServerType = Object.freeze({\n  Standalone: 'Standalone',\n  Mongos: 'Mongos',\n  PossiblePrimary: 'PossiblePrimary',\n  RSPrimary: 'RSPrimary',\n  RSSecondary: 'RSSecondary',\n  RSArbiter: 'RSArbiter',\n  RSOther: 'RSOther',\n  RSGhost: 'RSGhost',\n  Unknown: 'Unknown',\n  LoadBalancer: 'LoadBalancer'\n});\n/** @internal */\n\nfunction drainTimerQueue(queue) {\n  queue.forEach(timers_1.clearTimeout);\n  queue.clear();\n}\n\nexports.drainTimerQueue = drainTimerQueue;\n/** Shared function to determine clusterTime for a given topology or session */\n\nfunction _advanceClusterTime(entity, $clusterTime) {\n  if (entity.clusterTime == null) {\n    entity.clusterTime = $clusterTime;\n  } else {\n    if ($clusterTime.clusterTime.greaterThan(entity.clusterTime.clusterTime)) {\n      entity.clusterTime = $clusterTime;\n    }\n  }\n}\n\nexports._advanceClusterTime = _advanceClusterTime;","map":{"version":3,"sources":["../../src/sdam/common.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA,C,CAMA;;;AACa,OAAA,CAAA,aAAA,GAAgB,SAAhB;AACA,OAAA,CAAA,YAAA,GAAe,QAAf;AACA,OAAA,CAAA,gBAAA,GAAmB,YAAnB;AACA,OAAA,CAAA,eAAA,GAAkB,WAAlB;AAEb;;;AAGG;;AACU,OAAA,CAAA,YAAA,GAAe,MAAM,CAAC,MAAP,CAAc;EACxC,MAAM,EAAE,QADgC;EAExC,mBAAmB,EAAE,qBAFmB;EAGxC,qBAAqB,EAAE,uBAHiB;EAIxC,OAAO,EAAE,SAJ+B;EAKxC,OAAO,EAAE,SAL+B;EAMxC,YAAY,EAAE;AAN0B,CAAd,CAAf;AAYb;;;AAGG;;AACU,OAAA,CAAA,UAAA,GAAa,MAAM,CAAC,MAAP,CAAc;EACtC,UAAU,EAAE,YAD0B;EAEtC,MAAM,EAAE,QAF8B;EAGtC,eAAe,EAAE,iBAHqB;EAItC,SAAS,EAAE,WAJ2B;EAKtC,WAAW,EAAE,aALyB;EAMtC,SAAS,EAAE,WAN2B;EAOtC,OAAO,EAAE,SAP6B;EAQtC,OAAO,EAAE,SAR6B;EAStC,OAAO,EAAE,SAT6B;EAUtC,YAAY,EAAE;AAVwB,CAAd,CAAb;AAmBb;;AACA,SAAgB,eAAhB,CAAgC,KAAhC,EAAiD;EAC/C,KAAK,CAAC,OAAN,CAAc,QAAA,CAAA,YAAd;EACA,KAAK,CAAC,KAAN;AACD;;AAHD,OAAA,CAAA,eAAA,GAAA,eAAA;AAcA;;AACA,SAAgB,mBAAhB,CACE,MADF,EAEE,YAFF,EAE2B;EAEzB,IAAI,MAAM,CAAC,WAAP,IAAsB,IAA1B,EAAgC;IAC9B,MAAM,CAAC,WAAP,GAAqB,YAArB;EACD,CAFD,MAEO;IACL,IAAI,YAAY,CAAC,WAAb,CAAyB,WAAzB,CAAqC,MAAM,CAAC,WAAP,CAAmB,WAAxD,CAAJ,EAA0E;MACxE,MAAM,CAAC,WAAP,GAAqB,YAArB;IACD;EACF;AACF;;AAXD,OAAA,CAAA,mBAAA,GAAA,mBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._advanceClusterTime = exports.drainTimerQueue = exports.ServerType = exports.TopologyType = exports.STATE_CONNECTED = exports.STATE_CONNECTING = exports.STATE_CLOSED = exports.STATE_CLOSING = void 0;\nconst timers_1 = require(\"timers\");\n// shared state names\nexports.STATE_CLOSING = 'closing';\nexports.STATE_CLOSED = 'closed';\nexports.STATE_CONNECTING = 'connecting';\nexports.STATE_CONNECTED = 'connected';\n/**\n * An enumeration of topology types we know about\n * @public\n */\nexports.TopologyType = Object.freeze({\n    Single: 'Single',\n    ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n    ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n    Sharded: 'Sharded',\n    Unknown: 'Unknown',\n    LoadBalanced: 'LoadBalanced'\n});\n/**\n * An enumeration of server types we know about\n * @public\n */\nexports.ServerType = Object.freeze({\n    Standalone: 'Standalone',\n    Mongos: 'Mongos',\n    PossiblePrimary: 'PossiblePrimary',\n    RSPrimary: 'RSPrimary',\n    RSSecondary: 'RSSecondary',\n    RSArbiter: 'RSArbiter',\n    RSOther: 'RSOther',\n    RSGhost: 'RSGhost',\n    Unknown: 'Unknown',\n    LoadBalancer: 'LoadBalancer'\n});\n/** @internal */\nfunction drainTimerQueue(queue) {\n    queue.forEach(timers_1.clearTimeout);\n    queue.clear();\n}\nexports.drainTimerQueue = drainTimerQueue;\n/** Shared function to determine clusterTime for a given topology or session */\nfunction _advanceClusterTime(entity, $clusterTime) {\n    if (entity.clusterTime == null) {\n        entity.clusterTime = $clusterTime;\n    }\n    else {\n        if ($clusterTime.clusterTime.greaterThan(entity.clusterTime.clusterTime)) {\n            entity.clusterTime = $clusterTime;\n        }\n    }\n}\nexports._advanceClusterTime = _advanceClusterTime;\n//# sourceMappingURL=common.js.map"]},"metadata":{},"sourceType":"script"}