{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionPool = exports.PoolState = void 0;\n\nconst Denque = require(\"denque\");\n\nconst timers_1 = require(\"timers\");\n\nconst constants_1 = require(\"../constants\");\n\nconst error_1 = require(\"../error\");\n\nconst logger_1 = require(\"../logger\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst utils_1 = require(\"../utils\");\n\nconst connect_1 = require(\"./connect\");\n\nconst connection_1 = require(\"./connection\");\n\nconst connection_pool_events_1 = require(\"./connection_pool_events\");\n\nconst errors_1 = require(\"./errors\");\n\nconst metrics_1 = require(\"./metrics\");\n/** @internal */\n\n\nconst kLogger = Symbol('logger');\n/** @internal */\n\nconst kConnections = Symbol('connections');\n/** @internal */\n\nconst kPending = Symbol('pending');\n/** @internal */\n\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\n\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\n\nconst kGeneration = Symbol('generation');\n/** @internal */\n\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\n\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\n\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\n\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\n\nconst kCancelled = Symbol('cancelled');\n/** @internal */\n\nconst kMetrics = Symbol('metrics');\n/** @internal */\n\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/** @internal */\n\nconst kPoolState = Symbol('poolState');\n/** @internal */\n\nexports.PoolState = Object.freeze({\n  paused: 'paused',\n  ready: 'ready',\n  closed: 'closed'\n});\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\n\nclass ConnectionPool extends mongo_types_1.TypedEventEmitter {\n  /** @internal */\n  constructor(options) {\n    var _a, _b, _c, _d, _e;\n\n    super();\n    this.options = Object.freeze({ ...options,\n      connectionType: connection_1.Connection,\n      maxPoolSize: (_a = options.maxPoolSize) !== null && _a !== void 0 ? _a : 100,\n      minPoolSize: (_b = options.minPoolSize) !== null && _b !== void 0 ? _b : 0,\n      maxConnecting: (_c = options.maxConnecting) !== null && _c !== void 0 ? _c : 2,\n      maxIdleTimeMS: (_d = options.maxIdleTimeMS) !== null && _d !== void 0 ? _d : 0,\n      waitQueueTimeoutMS: (_e = options.waitQueueTimeoutMS) !== null && _e !== void 0 ? _e : 0,\n      autoEncrypter: options.autoEncrypter,\n      metadata: options.metadata\n    });\n\n    if (this.options.minPoolSize > this.options.maxPoolSize) {\n      throw new error_1.MongoInvalidArgumentError('Connection pool minimum size must not be greater than maximum pool size');\n    }\n\n    this[kPoolState] = exports.PoolState.paused;\n    this[kLogger] = new logger_1.Logger('ConnectionPool');\n    this[kConnections] = new Denque();\n    this[kPending] = 0;\n    this[kCheckedOut] = 0;\n    this[kMinPoolSizeTimer] = undefined;\n    this[kGeneration] = 0;\n    this[kServiceGenerations] = new Map();\n    this[kConnectionCounter] = (0, utils_1.makeCounter)(1);\n    this[kCancellationToken] = new mongo_types_1.CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kWaitQueue] = new Denque();\n    this[kMetrics] = new metrics_1.ConnectionPoolMetrics();\n    this[kProcessingWaitQueue] = false;\n    process.nextTick(() => {\n      this.emit(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(this));\n      this.ensureMinPoolSize();\n    });\n  }\n  /** The address of the endpoint the pool is connected to */\n\n\n  get address() {\n    return this.options.hostAddress.toString();\n  }\n  /**\n   * Check if the pool has been closed\n   *\n   * TODO(NODE-3263): We can remove this property once shell no longer needs it\n   */\n\n\n  get closed() {\n    return this[kPoolState] === exports.PoolState.closed;\n  }\n  /** An integer representing the SDAM generation of the pool */\n\n\n  get generation() {\n    return this[kGeneration];\n  }\n  /** An integer expressing how many total connections (available + pending + in use) the pool currently has */\n\n\n  get totalConnectionCount() {\n    return this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount;\n  }\n  /** An integer expressing how many connections are currently available in the pool. */\n\n\n  get availableConnectionCount() {\n    return this[kConnections].length;\n  }\n\n  get pendingConnectionCount() {\n    return this[kPending];\n  }\n\n  get currentCheckedOutCount() {\n    return this[kCheckedOut];\n  }\n\n  get waitQueueSize() {\n    return this[kWaitQueue].length;\n  }\n\n  get loadBalanced() {\n    return this.options.loadBalanced;\n  }\n\n  get serviceGenerations() {\n    return this[kServiceGenerations];\n  }\n  /**\n   * Get the metrics information for the pool when a wait queue timeout occurs.\n   */\n\n\n  waitQueueErrorMetrics() {\n    return this[kMetrics].info(this.options.maxPoolSize);\n  }\n  /**\n   * Set the pool state to \"ready\"\n   */\n\n\n  ready() {\n    this[kPoolState] = exports.PoolState.ready;\n  }\n  /**\n   * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n   * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n   * explicitly destroyed by the new owner.\n   */\n\n\n  checkOut(callback) {\n    this.emit(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));\n\n    if (this.closed) {\n      this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'poolClosed'));\n      callback(new errors_1.PoolClosedError(this));\n      return;\n    }\n\n    const waitQueueMember = {\n      callback\n    };\n    const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n\n    if (waitQueueTimeoutMS) {\n      waitQueueMember.timer = (0, timers_1.setTimeout)(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'timeout'));\n        waitQueueMember.callback(new errors_1.WaitQueueTimeoutError(this.loadBalanced ? this.waitQueueErrorMetrics() : 'Timed out while checking out a connection from connection pool', this.address));\n      }, waitQueueTimeoutMS);\n    }\n\n    this[kWaitQueue].push(waitQueueMember);\n    process.nextTick(() => this.processWaitQueue());\n  }\n  /**\n   * Check a connection into the pool.\n   *\n   * @param connection - The connection to check in\n   */\n\n\n  checkIn(connection) {\n    const poolClosed = this.closed;\n    const stale = this.connectionIsStale(connection);\n    const willDestroy = !!(poolClosed || stale || connection.closed);\n\n    if (!willDestroy) {\n      connection.markAvailable();\n      this[kConnections].unshift(connection);\n    }\n\n    this[kCheckedOut]--;\n    this.emit(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));\n\n    if (willDestroy) {\n      const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n      this.destroyConnection(connection, reason);\n    }\n\n    process.nextTick(() => this.processWaitQueue());\n  }\n  /**\n   * Clear the pool\n   *\n   * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n   * previous generation will eventually be pruned during subsequent checkouts.\n   */\n\n\n  clear(serviceId) {\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid); // Only need to worry if the generation exists, since it should\n      // always be there but typescript needs the check.\n\n      if (generation == null) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError('Service generations are required in load balancer mode.');\n      } else {\n        // Increment the generation for the service id.\n        this.serviceGenerations.set(sid, generation + 1);\n      }\n    } else {\n      this[kGeneration] += 1;\n    }\n\n    this.emit(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, serviceId));\n  }\n\n  close(_options, _cb) {\n    let options = _options;\n    const callback = _cb !== null && _cb !== void 0 ? _cb : _options;\n\n    if (typeof options === 'function') {\n      options = {};\n    }\n\n    options = Object.assign({\n      force: false\n    }, options);\n\n    if (this.closed) {\n      return callback();\n    } // immediately cancel any in-flight connections\n\n\n    this[kCancellationToken].emit('cancel'); // drain the wait queue\n\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].pop();\n\n      if (waitQueueMember) {\n        if (waitQueueMember.timer) {\n          (0, timers_1.clearTimeout)(waitQueueMember.timer);\n        }\n\n        if (!waitQueueMember[kCancelled]) {\n          // TODO(NODE-3483): Replace with MongoConnectionPoolClosedError\n          waitQueueMember.callback(new error_1.MongoRuntimeError('Connection pool closed'));\n        }\n      }\n    } // clear the min pool size timer\n\n\n    const minPoolSizeTimer = this[kMinPoolSizeTimer];\n\n    if (minPoolSizeTimer) {\n      (0, timers_1.clearTimeout)(minPoolSizeTimer);\n    } // end the connection counter\n\n\n    if (typeof this[kConnectionCounter].return === 'function') {\n      this[kConnectionCounter].return(undefined);\n    } // mark the pool as closed immediately\n\n\n    this[kPoolState] = exports.PoolState.closed;\n    (0, utils_1.eachAsync)(this[kConnections].toArray(), (conn, cb) => {\n      this.emit(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, conn, 'poolClosed'));\n      conn.destroy(options, cb);\n    }, err => {\n      this[kConnections].clear();\n      this.emit(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(this));\n      callback(err);\n    });\n  }\n  /**\n   * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n   * has completed by calling back.\n   *\n   * NOTE: please note the required signature of `fn`\n   *\n   * @remarks When in load balancer mode, connections can be pinned to cursors or transactions.\n   *   In these cases we pass the connection in to this method to ensure it is used and a new\n   *   connection is not checked out.\n   *\n   * @param conn - A pinned connection for use in load balancing mode.\n   * @param fn - A function which operates on a managed connection\n   * @param callback - The original callback\n   */\n\n\n  withConnection(conn, fn, callback) {\n    if (conn) {\n      // use the provided connection, and do _not_ check it in after execution\n      fn(undefined, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n      });\n      return;\n    }\n\n    this.checkOut((err, conn) => {\n      // don't callback with `err` here, we might want to act upon it inside `fn`\n      fn(err, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n\n        if (conn) {\n          this.checkIn(conn);\n        }\n      });\n    });\n  }\n\n  destroyConnection(connection, reason) {\n    this.emit(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, connection, reason)); // destroy the connection\n\n    process.nextTick(() => connection.destroy());\n  }\n\n  connectionIsStale(connection) {\n    const serviceId = connection.serviceId;\n\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      return connection.generation !== generation;\n    }\n\n    return connection.generation !== this[kGeneration];\n  }\n\n  connectionIsIdle(connection) {\n    return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n  }\n\n  connectionIsPerished(connection) {\n    const isStale = this.connectionIsStale(connection);\n    const isIdle = this.connectionIsIdle(connection);\n\n    if (!isStale && !isIdle && !connection.closed) {\n      return false;\n    }\n\n    const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n    this.destroyConnection(connection, reason);\n    return true;\n  }\n\n  createConnection(callback) {\n    const connectOptions = { ...this.options,\n      id: this[kConnectionCounter].next().value,\n      generation: this[kGeneration],\n      cancellationToken: this[kCancellationToken]\n    };\n    this[kPending]++; // This is our version of a \"virtual\" no-I/O connection as the spec requires\n\n    this.emit(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(this, {\n      id: connectOptions.id\n    }));\n    (0, connect_1.connect)(connectOptions, (err, connection) => {\n      if (err || !connection) {\n        this[kLogger].debug(`connection attempt failed with error [${JSON.stringify(err)}]`);\n        callback(err);\n        return;\n      } // The pool might have closed since we started trying to create a connection\n\n\n      if (this.closed) {\n        this[kPending]--;\n        connection.destroy({\n          force: true\n        });\n        return;\n      } // forward all events from the connection to the pool\n\n\n      for (const event of [...constants_1.APM_EVENTS, connection_1.Connection.CLUSTER_TIME_RECEIVED]) {\n        connection.on(event, e => this.emit(event, e));\n      }\n\n      if (this.loadBalanced) {\n        connection.on(connection_1.Connection.PINNED, pinType => this[kMetrics].markPinned(pinType));\n        connection.on(connection_1.Connection.UNPINNED, pinType => this[kMetrics].markUnpinned(pinType));\n        const serviceId = connection.serviceId;\n\n        if (serviceId) {\n          let generation;\n          const sid = serviceId.toHexString();\n\n          if (generation = this.serviceGenerations.get(sid)) {\n            connection.generation = generation;\n          } else {\n            this.serviceGenerations.set(sid, 0);\n            connection.generation = 0;\n          }\n        }\n      }\n\n      connection.markAvailable();\n      this.emit(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(this, connection));\n      callback(undefined, connection);\n      return;\n    });\n  }\n\n  ensureMinPoolSize() {\n    const minPoolSize = this.options.minPoolSize;\n\n    if (this.closed || minPoolSize === 0) {\n      return;\n    }\n\n    if (this.totalConnectionCount < minPoolSize && this.pendingConnectionCount < this.options.maxConnecting) {\n      // NOTE: ensureMinPoolSize should not try to get all the pending\n      // connection permits because that potentially delays the availability of\n      // the connection to a checkout request\n      this.createConnection((err, connection) => {\n        this[kPending]--;\n\n        if (!err && connection) {\n          this[kConnections].push(connection);\n          process.nextTick(() => this.processWaitQueue());\n        }\n\n        this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), 10);\n      });\n    } else {\n      this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), 100);\n    }\n  }\n\n  processWaitQueue() {\n    if (this.closed || this[kProcessingWaitQueue]) {\n      return;\n    }\n\n    this[kProcessingWaitQueue] = true;\n\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].peekFront();\n\n      if (!waitQueueMember) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n\n      if (waitQueueMember[kCancelled]) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n\n      if (!this.availableConnectionCount) {\n        break;\n      }\n\n      const connection = this[kConnections].shift();\n\n      if (!connection) {\n        break;\n      }\n\n      if (!this.connectionIsPerished(connection)) {\n        this[kCheckedOut]++;\n        this.emit(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n\n        if (waitQueueMember.timer) {\n          (0, timers_1.clearTimeout)(waitQueueMember.timer);\n        }\n\n        this[kWaitQueue].shift();\n        waitQueueMember.callback(undefined, connection);\n      }\n    }\n\n    const {\n      maxPoolSize,\n      maxConnecting\n    } = this.options;\n\n    while (this.waitQueueSize > 0 && this.pendingConnectionCount < maxConnecting && (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)) {\n      const waitQueueMember = this[kWaitQueue].shift();\n\n      if (!waitQueueMember || waitQueueMember[kCancelled]) {\n        continue;\n      }\n\n      this.createConnection((err, connection) => {\n        this[kPending]--;\n\n        if (waitQueueMember[kCancelled]) {\n          if (!err && connection) {\n            this[kConnections].push(connection);\n          }\n        } else {\n          if (err) {\n            this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, err));\n          } else if (connection) {\n            this[kCheckedOut]++;\n            this.emit(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n          }\n\n          if (waitQueueMember.timer) {\n            (0, timers_1.clearTimeout)(waitQueueMember.timer);\n          }\n\n          waitQueueMember.callback(err, connection);\n        }\n\n        process.nextTick(() => this.processWaitQueue());\n      });\n    }\n\n    this[kProcessingWaitQueue] = false;\n  }\n\n}\n\nexports.ConnectionPool = ConnectionPool;\n/**\n * Emitted when the connection pool is created.\n * @event\n */\n\nConnectionPool.CONNECTION_POOL_CREATED = constants_1.CONNECTION_POOL_CREATED;\n/**\n * Emitted once when the connection pool is closed\n * @event\n */\n\nConnectionPool.CONNECTION_POOL_CLOSED = constants_1.CONNECTION_POOL_CLOSED;\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n * @event\n */\n\nConnectionPool.CONNECTION_POOL_CLEARED = constants_1.CONNECTION_POOL_CLEARED;\n/**\n * Emitted when a connection is created.\n * @event\n */\n\nConnectionPool.CONNECTION_CREATED = constants_1.CONNECTION_CREATED;\n/**\n * Emitted when a connection becomes established, and is ready to use\n * @event\n */\n\nConnectionPool.CONNECTION_READY = constants_1.CONNECTION_READY;\n/**\n * Emitted when a connection is closed\n * @event\n */\n\nConnectionPool.CONNECTION_CLOSED = constants_1.CONNECTION_CLOSED;\n/**\n * Emitted when an attempt to check out a connection begins\n * @event\n */\n\nConnectionPool.CONNECTION_CHECK_OUT_STARTED = constants_1.CONNECTION_CHECK_OUT_STARTED;\n/**\n * Emitted when an attempt to check out a connection fails\n * @event\n */\n\nConnectionPool.CONNECTION_CHECK_OUT_FAILED = constants_1.CONNECTION_CHECK_OUT_FAILED;\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n * @event\n */\n\nConnectionPool.CONNECTION_CHECKED_OUT = constants_1.CONNECTION_CHECKED_OUT;\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n * @event\n */\n\nConnectionPool.CONNECTION_CHECKED_IN = constants_1.CONNECTION_CHECKED_IN;","map":{"version":3,"sources":["../../src/cmap/connection_pool.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConnectionPool = exports.PoolState = void 0;\nconst Denque = require(\"denque\");\nconst timers_1 = require(\"timers\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst logger_1 = require(\"../logger\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst utils_1 = require(\"../utils\");\nconst connect_1 = require(\"./connect\");\nconst connection_1 = require(\"./connection\");\nconst connection_pool_events_1 = require(\"./connection_pool_events\");\nconst errors_1 = require(\"./errors\");\nconst metrics_1 = require(\"./metrics\");\n/** @internal */\nconst kLogger = Symbol('logger');\n/** @internal */\nconst kConnections = Symbol('connections');\n/** @internal */\nconst kPending = Symbol('pending');\n/** @internal */\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kMetrics = Symbol('metrics');\n/** @internal */\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/** @internal */\nconst kPoolState = Symbol('poolState');\n/** @internal */\nexports.PoolState = Object.freeze({\n    paused: 'paused',\n    ready: 'ready',\n    closed: 'closed'\n});\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\nclass ConnectionPool extends mongo_types_1.TypedEventEmitter {\n    /** @internal */\n    constructor(options) {\n        var _a, _b, _c, _d, _e;\n        super();\n        this.options = Object.freeze({\n            ...options,\n            connectionType: connection_1.Connection,\n            maxPoolSize: (_a = options.maxPoolSize) !== null && _a !== void 0 ? _a : 100,\n            minPoolSize: (_b = options.minPoolSize) !== null && _b !== void 0 ? _b : 0,\n            maxConnecting: (_c = options.maxConnecting) !== null && _c !== void 0 ? _c : 2,\n            maxIdleTimeMS: (_d = options.maxIdleTimeMS) !== null && _d !== void 0 ? _d : 0,\n            waitQueueTimeoutMS: (_e = options.waitQueueTimeoutMS) !== null && _e !== void 0 ? _e : 0,\n            autoEncrypter: options.autoEncrypter,\n            metadata: options.metadata\n        });\n        if (this.options.minPoolSize > this.options.maxPoolSize) {\n            throw new error_1.MongoInvalidArgumentError('Connection pool minimum size must not be greater than maximum pool size');\n        }\n        this[kPoolState] = exports.PoolState.paused;\n        this[kLogger] = new logger_1.Logger('ConnectionPool');\n        this[kConnections] = new Denque();\n        this[kPending] = 0;\n        this[kCheckedOut] = 0;\n        this[kMinPoolSizeTimer] = undefined;\n        this[kGeneration] = 0;\n        this[kServiceGenerations] = new Map();\n        this[kConnectionCounter] = (0, utils_1.makeCounter)(1);\n        this[kCancellationToken] = new mongo_types_1.CancellationToken();\n        this[kCancellationToken].setMaxListeners(Infinity);\n        this[kWaitQueue] = new Denque();\n        this[kMetrics] = new metrics_1.ConnectionPoolMetrics();\n        this[kProcessingWaitQueue] = false;\n        process.nextTick(() => {\n            this.emit(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(this));\n            this.ensureMinPoolSize();\n        });\n    }\n    /** The address of the endpoint the pool is connected to */\n    get address() {\n        return this.options.hostAddress.toString();\n    }\n    /**\n     * Check if the pool has been closed\n     *\n     * TODO(NODE-3263): We can remove this property once shell no longer needs it\n     */\n    get closed() {\n        return this[kPoolState] === exports.PoolState.closed;\n    }\n    /** An integer representing the SDAM generation of the pool */\n    get generation() {\n        return this[kGeneration];\n    }\n    /** An integer expressing how many total connections (available + pending + in use) the pool currently has */\n    get totalConnectionCount() {\n        return (this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount);\n    }\n    /** An integer expressing how many connections are currently available in the pool. */\n    get availableConnectionCount() {\n        return this[kConnections].length;\n    }\n    get pendingConnectionCount() {\n        return this[kPending];\n    }\n    get currentCheckedOutCount() {\n        return this[kCheckedOut];\n    }\n    get waitQueueSize() {\n        return this[kWaitQueue].length;\n    }\n    get loadBalanced() {\n        return this.options.loadBalanced;\n    }\n    get serviceGenerations() {\n        return this[kServiceGenerations];\n    }\n    /**\n     * Get the metrics information for the pool when a wait queue timeout occurs.\n     */\n    waitQueueErrorMetrics() {\n        return this[kMetrics].info(this.options.maxPoolSize);\n    }\n    /**\n     * Set the pool state to \"ready\"\n     */\n    ready() {\n        this[kPoolState] = exports.PoolState.ready;\n    }\n    /**\n     * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n     * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n     * explicitly destroyed by the new owner.\n     */\n    checkOut(callback) {\n        this.emit(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));\n        if (this.closed) {\n            this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'poolClosed'));\n            callback(new errors_1.PoolClosedError(this));\n            return;\n        }\n        const waitQueueMember = { callback };\n        const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n        if (waitQueueTimeoutMS) {\n            waitQueueMember.timer = (0, timers_1.setTimeout)(() => {\n                waitQueueMember[kCancelled] = true;\n                waitQueueMember.timer = undefined;\n                this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'timeout'));\n                waitQueueMember.callback(new errors_1.WaitQueueTimeoutError(this.loadBalanced\n                    ? this.waitQueueErrorMetrics()\n                    : 'Timed out while checking out a connection from connection pool', this.address));\n            }, waitQueueTimeoutMS);\n        }\n        this[kWaitQueue].push(waitQueueMember);\n        process.nextTick(() => this.processWaitQueue());\n    }\n    /**\n     * Check a connection into the pool.\n     *\n     * @param connection - The connection to check in\n     */\n    checkIn(connection) {\n        const poolClosed = this.closed;\n        const stale = this.connectionIsStale(connection);\n        const willDestroy = !!(poolClosed || stale || connection.closed);\n        if (!willDestroy) {\n            connection.markAvailable();\n            this[kConnections].unshift(connection);\n        }\n        this[kCheckedOut]--;\n        this.emit(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));\n        if (willDestroy) {\n            const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n            this.destroyConnection(connection, reason);\n        }\n        process.nextTick(() => this.processWaitQueue());\n    }\n    /**\n     * Clear the pool\n     *\n     * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n     * previous generation will eventually be pruned during subsequent checkouts.\n     */\n    clear(serviceId) {\n        if (this.loadBalanced && serviceId) {\n            const sid = serviceId.toHexString();\n            const generation = this.serviceGenerations.get(sid);\n            // Only need to worry if the generation exists, since it should\n            // always be there but typescript needs the check.\n            if (generation == null) {\n                // TODO(NODE-3483)\n                throw new error_1.MongoRuntimeError('Service generations are required in load balancer mode.');\n            }\n            else {\n                // Increment the generation for the service id.\n                this.serviceGenerations.set(sid, generation + 1);\n            }\n        }\n        else {\n            this[kGeneration] += 1;\n        }\n        this.emit(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, serviceId));\n    }\n    close(_options, _cb) {\n        let options = _options;\n        const callback = (_cb !== null && _cb !== void 0 ? _cb : _options);\n        if (typeof options === 'function') {\n            options = {};\n        }\n        options = Object.assign({ force: false }, options);\n        if (this.closed) {\n            return callback();\n        }\n        // immediately cancel any in-flight connections\n        this[kCancellationToken].emit('cancel');\n        // drain the wait queue\n        while (this.waitQueueSize) {\n            const waitQueueMember = this[kWaitQueue].pop();\n            if (waitQueueMember) {\n                if (waitQueueMember.timer) {\n                    (0, timers_1.clearTimeout)(waitQueueMember.timer);\n                }\n                if (!waitQueueMember[kCancelled]) {\n                    // TODO(NODE-3483): Replace with MongoConnectionPoolClosedError\n                    waitQueueMember.callback(new error_1.MongoRuntimeError('Connection pool closed'));\n                }\n            }\n        }\n        // clear the min pool size timer\n        const minPoolSizeTimer = this[kMinPoolSizeTimer];\n        if (minPoolSizeTimer) {\n            (0, timers_1.clearTimeout)(minPoolSizeTimer);\n        }\n        // end the connection counter\n        if (typeof this[kConnectionCounter].return === 'function') {\n            this[kConnectionCounter].return(undefined);\n        }\n        // mark the pool as closed immediately\n        this[kPoolState] = exports.PoolState.closed;\n        (0, utils_1.eachAsync)(this[kConnections].toArray(), (conn, cb) => {\n            this.emit(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, conn, 'poolClosed'));\n            conn.destroy(options, cb);\n        }, err => {\n            this[kConnections].clear();\n            this.emit(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(this));\n            callback(err);\n        });\n    }\n    /**\n     * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n     * has completed by calling back.\n     *\n     * NOTE: please note the required signature of `fn`\n     *\n     * @remarks When in load balancer mode, connections can be pinned to cursors or transactions.\n     *   In these cases we pass the connection in to this method to ensure it is used and a new\n     *   connection is not checked out.\n     *\n     * @param conn - A pinned connection for use in load balancing mode.\n     * @param fn - A function which operates on a managed connection\n     * @param callback - The original callback\n     */\n    withConnection(conn, fn, callback) {\n        if (conn) {\n            // use the provided connection, and do _not_ check it in after execution\n            fn(undefined, conn, (fnErr, result) => {\n                if (typeof callback === 'function') {\n                    if (fnErr) {\n                        callback(fnErr);\n                    }\n                    else {\n                        callback(undefined, result);\n                    }\n                }\n            });\n            return;\n        }\n        this.checkOut((err, conn) => {\n            // don't callback with `err` here, we might want to act upon it inside `fn`\n            fn(err, conn, (fnErr, result) => {\n                if (typeof callback === 'function') {\n                    if (fnErr) {\n                        callback(fnErr);\n                    }\n                    else {\n                        callback(undefined, result);\n                    }\n                }\n                if (conn) {\n                    this.checkIn(conn);\n                }\n            });\n        });\n    }\n    destroyConnection(connection, reason) {\n        this.emit(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, connection, reason));\n        // destroy the connection\n        process.nextTick(() => connection.destroy());\n    }\n    connectionIsStale(connection) {\n        const serviceId = connection.serviceId;\n        if (this.loadBalanced && serviceId) {\n            const sid = serviceId.toHexString();\n            const generation = this.serviceGenerations.get(sid);\n            return connection.generation !== generation;\n        }\n        return connection.generation !== this[kGeneration];\n    }\n    connectionIsIdle(connection) {\n        return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n    }\n    connectionIsPerished(connection) {\n        const isStale = this.connectionIsStale(connection);\n        const isIdle = this.connectionIsIdle(connection);\n        if (!isStale && !isIdle && !connection.closed) {\n            return false;\n        }\n        const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n        this.destroyConnection(connection, reason);\n        return true;\n    }\n    createConnection(callback) {\n        const connectOptions = {\n            ...this.options,\n            id: this[kConnectionCounter].next().value,\n            generation: this[kGeneration],\n            cancellationToken: this[kCancellationToken]\n        };\n        this[kPending]++;\n        // This is our version of a \"virtual\" no-I/O connection as the spec requires\n        this.emit(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(this, { id: connectOptions.id }));\n        (0, connect_1.connect)(connectOptions, (err, connection) => {\n            if (err || !connection) {\n                this[kLogger].debug(`connection attempt failed with error [${JSON.stringify(err)}]`);\n                callback(err);\n                return;\n            }\n            // The pool might have closed since we started trying to create a connection\n            if (this.closed) {\n                this[kPending]--;\n                connection.destroy({ force: true });\n                return;\n            }\n            // forward all events from the connection to the pool\n            for (const event of [...constants_1.APM_EVENTS, connection_1.Connection.CLUSTER_TIME_RECEIVED]) {\n                connection.on(event, (e) => this.emit(event, e));\n            }\n            if (this.loadBalanced) {\n                connection.on(connection_1.Connection.PINNED, pinType => this[kMetrics].markPinned(pinType));\n                connection.on(connection_1.Connection.UNPINNED, pinType => this[kMetrics].markUnpinned(pinType));\n                const serviceId = connection.serviceId;\n                if (serviceId) {\n                    let generation;\n                    const sid = serviceId.toHexString();\n                    if ((generation = this.serviceGenerations.get(sid))) {\n                        connection.generation = generation;\n                    }\n                    else {\n                        this.serviceGenerations.set(sid, 0);\n                        connection.generation = 0;\n                    }\n                }\n            }\n            connection.markAvailable();\n            this.emit(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(this, connection));\n            callback(undefined, connection);\n            return;\n        });\n    }\n    ensureMinPoolSize() {\n        const minPoolSize = this.options.minPoolSize;\n        if (this.closed || minPoolSize === 0) {\n            return;\n        }\n        if (this.totalConnectionCount < minPoolSize &&\n            this.pendingConnectionCount < this.options.maxConnecting) {\n            // NOTE: ensureMinPoolSize should not try to get all the pending\n            // connection permits because that potentially delays the availability of\n            // the connection to a checkout request\n            this.createConnection((err, connection) => {\n                this[kPending]--;\n                if (!err && connection) {\n                    this[kConnections].push(connection);\n                    process.nextTick(() => this.processWaitQueue());\n                }\n                this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), 10);\n            });\n        }\n        else {\n            this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), 100);\n        }\n    }\n    processWaitQueue() {\n        if (this.closed || this[kProcessingWaitQueue]) {\n            return;\n        }\n        this[kProcessingWaitQueue] = true;\n        while (this.waitQueueSize) {\n            const waitQueueMember = this[kWaitQueue].peekFront();\n            if (!waitQueueMember) {\n                this[kWaitQueue].shift();\n                continue;\n            }\n            if (waitQueueMember[kCancelled]) {\n                this[kWaitQueue].shift();\n                continue;\n            }\n            if (!this.availableConnectionCount) {\n                break;\n            }\n            const connection = this[kConnections].shift();\n            if (!connection) {\n                break;\n            }\n            if (!this.connectionIsPerished(connection)) {\n                this[kCheckedOut]++;\n                this.emit(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n                if (waitQueueMember.timer) {\n                    (0, timers_1.clearTimeout)(waitQueueMember.timer);\n                }\n                this[kWaitQueue].shift();\n                waitQueueMember.callback(undefined, connection);\n            }\n        }\n        const { maxPoolSize, maxConnecting } = this.options;\n        while (this.waitQueueSize > 0 &&\n            this.pendingConnectionCount < maxConnecting &&\n            (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)) {\n            const waitQueueMember = this[kWaitQueue].shift();\n            if (!waitQueueMember || waitQueueMember[kCancelled]) {\n                continue;\n            }\n            this.createConnection((err, connection) => {\n                this[kPending]--;\n                if (waitQueueMember[kCancelled]) {\n                    if (!err && connection) {\n                        this[kConnections].push(connection);\n                    }\n                }\n                else {\n                    if (err) {\n                        this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, err));\n                    }\n                    else if (connection) {\n                        this[kCheckedOut]++;\n                        this.emit(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n                    }\n                    if (waitQueueMember.timer) {\n                        (0, timers_1.clearTimeout)(waitQueueMember.timer);\n                    }\n                    waitQueueMember.callback(err, connection);\n                }\n                process.nextTick(() => this.processWaitQueue());\n            });\n        }\n        this[kProcessingWaitQueue] = false;\n    }\n}\nexports.ConnectionPool = ConnectionPool;\n/**\n * Emitted when the connection pool is created.\n * @event\n */\nConnectionPool.CONNECTION_POOL_CREATED = constants_1.CONNECTION_POOL_CREATED;\n/**\n * Emitted once when the connection pool is closed\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLOSED = constants_1.CONNECTION_POOL_CLOSED;\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLEARED = constants_1.CONNECTION_POOL_CLEARED;\n/**\n * Emitted when a connection is created.\n * @event\n */\nConnectionPool.CONNECTION_CREATED = constants_1.CONNECTION_CREATED;\n/**\n * Emitted when a connection becomes established, and is ready to use\n * @event\n */\nConnectionPool.CONNECTION_READY = constants_1.CONNECTION_READY;\n/**\n * Emitted when a connection is closed\n * @event\n */\nConnectionPool.CONNECTION_CLOSED = constants_1.CONNECTION_CLOSED;\n/**\n * Emitted when an attempt to check out a connection begins\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_STARTED = constants_1.CONNECTION_CHECK_OUT_STARTED;\n/**\n * Emitted when an attempt to check out a connection fails\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_FAILED = constants_1.CONNECTION_CHECK_OUT_FAILED;\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_OUT = constants_1.CONNECTION_CHECKED_OUT;\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_IN = constants_1.CONNECTION_CHECKED_IN;\n//# sourceMappingURL=connection_pool.js.map"]},"metadata":{},"sourceType":"script"}