{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerCapabilities = exports.Topology = void 0;\n\nconst Denque = require(\"denque\");\n\nconst timers_1 = require(\"timers\");\n\nconst util_1 = require(\"util\");\n\nconst bson_1 = require(\"../bson\");\n\nconst connection_string_1 = require(\"../connection_string\");\n\nconst constants_1 = require(\"../constants\");\n\nconst error_1 = require(\"../error\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst read_preference_1 = require(\"../read_preference\");\n\nconst utils_1 = require(\"../utils\");\n\nconst common_1 = require(\"./common\");\n\nconst events_1 = require(\"./events\");\n\nconst server_1 = require(\"./server\");\n\nconst server_description_1 = require(\"./server_description\");\n\nconst server_selection_1 = require(\"./server_selection\");\n\nconst srv_polling_1 = require(\"./srv_polling\");\n\nconst topology_description_1 = require(\"./topology_description\"); // Global state\n\n\nlet globalTopologyCounter = 0;\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\n\nconst kCancelled = Symbol('cancelled');\n/** @internal */\n\nconst kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\n\nclass Topology extends mongo_types_1.TypedEventEmitter {\n  /**\n   * @param seedlist - a list of HostAddress instances to connect to\n   */\n  constructor(seeds, options) {\n    var _a;\n\n    super(); // Legacy CSFLE support\n\n    this.bson = Object.create(null);\n    this.bson.serialize = bson_1.serialize;\n    this.bson.deserialize = bson_1.deserialize; // Options should only be undefined in tests, MongoClient will always have defined options\n\n    options = options !== null && options !== void 0 ? options : {\n      hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n      ...Object.fromEntries(connection_string_1.DEFAULT_OPTIONS.entries()),\n      ...Object.fromEntries(connection_string_1.FEATURE_FLAGS.entries())\n    };\n\n    if (typeof seeds === 'string') {\n      seeds = [utils_1.HostAddress.fromString(seeds)];\n    } else if (!Array.isArray(seeds)) {\n      seeds = [seeds];\n    }\n\n    const seedlist = [];\n\n    for (const seed of seeds) {\n      if (typeof seed === 'string') {\n        seedlist.push(utils_1.HostAddress.fromString(seed));\n      } else if (seed instanceof utils_1.HostAddress) {\n        seedlist.push(seed);\n      } else {\n        // FIXME(NODE-3483): May need to be a MongoParseError\n        throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n      }\n    }\n\n    const topologyType = topologyTypeFromOptions(options);\n    const topologyId = globalTopologyCounter++;\n    const selectedHosts = options.srvMaxHosts == null || options.srvMaxHosts === 0 || options.srvMaxHosts >= seedlist.length ? seedlist : (0, utils_1.shuffle)(seedlist, options.srvMaxHosts);\n    const serverDescriptions = new Map();\n\n    for (const hostAddress of selectedHosts) {\n      serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n    }\n\n    this[kWaitQueue] = new Denque();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist,\n      // initial state\n      state: common_1.STATE_CLOSED,\n      // the topology description\n      description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      credentials: options === null || options === void 0 ? void 0 : options.credentials,\n      clusterTime: undefined,\n      // timer management\n      connectionTimers: new Set(),\n      detectShardedTopology: ev => this.detectShardedTopology(ev),\n      detectSrvRecords: ev => this.detectSrvRecords(ev)\n    };\n\n    if (options.srvHost && !options.loadBalanced) {\n      this.s.srvPoller = (_a = options.srvPoller) !== null && _a !== void 0 ? _a : new srv_polling_1.SrvPoller({\n        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n        srvHost: options.srvHost,\n        srvMaxHosts: options.srvMaxHosts,\n        srvServiceName: options.srvServiceName\n      });\n      this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    }\n  }\n\n  detectShardedTopology(event) {\n    var _a, _b, _c;\n\n    const previousType = event.previousDescription.type;\n    const newType = event.newDescription.type;\n    const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n    const srvListeners = (_a = this.s.srvPoller) === null || _a === void 0 ? void 0 : _a.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n    const listeningToSrvPolling = !!(srvListeners === null || srvListeners === void 0 ? void 0 : srvListeners.includes(this.s.detectSrvRecords));\n\n    if (transitionToSharded && !listeningToSrvPolling) {\n      (_b = this.s.srvPoller) === null || _b === void 0 ? void 0 : _b.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      (_c = this.s.srvPoller) === null || _c === void 0 ? void 0 : _c.start();\n    }\n  }\n\n  detectSrvRecords(ev) {\n    const previousTopologyDescription = this.s.description;\n    this.s.description = this.s.description.updateFromSrvPollingEvent(ev, this.s.options.srvMaxHosts);\n\n    if (this.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(this);\n    this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n  }\n  /**\n   * @returns A `TopologyDescription` for this topology\n   */\n\n\n  get description() {\n    return this.s.description;\n  }\n\n  get loadBalanced() {\n    return this.s.options.loadBalanced;\n  }\n\n  get capabilities() {\n    return new ServerCapabilities(this.lastHello());\n  }\n  /** Initiate server connect */\n\n\n  connect(options, callback) {\n    var _a;\n\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n\n    if (this.s.state === common_1.STATE_CONNECTED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CONNECTING); // emit SDAM monitoring events\n\n    this.emit(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id)); // emit an event for the topology change\n\n    this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown), // initial is always Unknown\n    this.s.description)); // connect all known servers, then attempt server selection to connect\n\n    const serverDescriptions = Array.from(this.s.description.servers.values());\n    this.s.servers = new Map(serverDescriptions.map(serverDescription => [serverDescription.address, createAndConnectServer(this, serverDescription)])); // In load balancer mode we need to fake a server description getting\n    // emitted from the monitor, since the monitor doesn't exist.\n\n    if (this.s.options.loadBalanced) {\n      for (const description of serverDescriptions) {\n        const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n          loadBalanced: this.s.options.loadBalanced\n        });\n        this.serverUpdateHandler(newDescription);\n      }\n    }\n\n    const exitWithError = error => callback ? callback(error) : this.emit(Topology.ERROR, error);\n\n    const readPreference = (_a = options.readPreference) !== null && _a !== void 0 ? _a : read_preference_1.ReadPreference.primary;\n    this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), options, (err, server) => {\n      if (err) {\n        return this.close({\n          force: false\n        }, () => exitWithError(err));\n      } // TODO: NODE-2471\n\n\n      const skipPingOnConnect = this.s.options[Symbol.for('@@mdb.skipPingOnConnect')] === true;\n\n      if (!skipPingOnConnect && server && this.s.credentials) {\n        server.command((0, utils_1.ns)('admin.$cmd'), {\n          ping: 1\n        }, {}, err => {\n          if (err) {\n            return exitWithError(err);\n          }\n\n          stateTransition(this, common_1.STATE_CONNECTED);\n          this.emit(Topology.OPEN, this);\n          this.emit(Topology.CONNECT, this);\n          callback === null || callback === void 0 ? void 0 : callback(undefined, this);\n        });\n        return;\n      }\n\n      stateTransition(this, common_1.STATE_CONNECTED);\n      this.emit(Topology.OPEN, this);\n      this.emit(Topology.CONNECT, this);\n      callback === null || callback === void 0 ? void 0 : callback(undefined, this);\n    });\n  }\n  /** Close this topology */\n\n\n  close(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof options === 'boolean') {\n      options = {\n        force: options\n      };\n    }\n\n    options = options !== null && options !== void 0 ? options : {};\n\n    if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n      return callback === null || callback === void 0 ? void 0 : callback();\n    }\n\n    const destroyedServers = Array.from(this.s.servers.values(), server => {\n      return (0, util_1.promisify)(destroyServer)(server, this, options);\n    });\n    Promise.all(destroyedServers).then(() => {\n      this.s.servers.clear();\n      stateTransition(this, common_1.STATE_CLOSING);\n      drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n      (0, common_1.drainTimerQueue)(this.s.connectionTimers);\n\n      if (this.s.srvPoller) {\n        this.s.srvPoller.stop();\n        this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      }\n\n      this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n      stateTransition(this, common_1.STATE_CLOSED); // emit an event for close\n\n      this.emit(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n    }).finally(() => callback === null || callback === void 0 ? void 0 : callback());\n  }\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param options - Optional settings related to server selection\n   * @param callback - The callback used to indicate success or failure\n   * @returns An instance of a `Server` meeting the criteria of the predicate provided\n   */\n\n\n  selectServer(selector, options, callback) {\n    let serverSelector;\n\n    if (typeof selector !== 'function') {\n      if (typeof selector === 'string') {\n        serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));\n      } else {\n        let readPreference;\n\n        if (selector instanceof read_preference_1.ReadPreference) {\n          readPreference = selector;\n        } else {\n          read_preference_1.ReadPreference.translate(options);\n          readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n        }\n\n        serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);\n      }\n    } else {\n      serverSelector = selector;\n    }\n\n    options = Object.assign({}, {\n      serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS\n    }, options);\n    const isSharded = this.description.type === common_1.TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n\n    if (isSharded && transaction && transaction.server) {\n      callback(undefined, transaction.server);\n      return;\n    }\n\n    const waitQueueMember = {\n      serverSelector,\n      transaction,\n      callback\n    };\n    const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n\n    if (serverSelectionTimeoutMS) {\n      waitQueueMember.timer = (0, timers_1.setTimeout)(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${serverSelectionTimeoutMS} ms`, this.description);\n        waitQueueMember.callback(timeoutError);\n      }, serverSelectionTimeoutMS);\n    }\n\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n  } // Sessions related methods\n\n  /**\n   * @returns Whether the topology should initiate selection to determine session support\n   */\n\n\n  shouldCheckForSessionSupport() {\n    if (this.description.type === common_1.TopologyType.Single) {\n      return !this.description.hasKnownServers;\n    }\n\n    return !this.description.hasDataBearingServers;\n  }\n  /**\n   * @returns Whether sessions are supported on the current topology\n   */\n\n\n  hasSessionSupport() {\n    return this.loadBalanced || this.description.logicalSessionTimeoutMinutes != null;\n  }\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param serverDescription - The server to update in the internal list of server descriptions\n   */\n\n\n  serverUpdateHandler(serverDescription) {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    } // ignore this server update if its from an outdated topologyVersion\n\n\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    } // these will be used for monitoring events later\n\n\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n\n    if (!previousServerDescription) {\n      return;\n    } // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n\n\n    const clusterTime = serverDescription.$clusterTime;\n\n    if (clusterTime) {\n      (0, common_1._advanceClusterTime)(this, clusterTime);\n    } // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n\n\n    const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription); // first update the TopologyDescription\n\n    this.s.description = this.s.description.update(serverDescription);\n\n    if (this.s.description.compatibilityError) {\n      this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n      return;\n    } // emit monitoring events for this change\n\n\n    if (!equalDescriptions) {\n      const newDescription = this.s.description.servers.get(serverDescription.address);\n\n      if (newDescription) {\n        this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n      }\n    } // update server list from updated descriptions\n\n\n    updateServers(this, serverDescription); // attempt to resolve any outstanding server selection attempts\n\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n\n    if (!equalDescriptions) {\n      this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n  }\n\n  auth(credentials, callback) {\n    if (typeof credentials === 'function') callback = credentials, credentials = undefined;\n    if (typeof callback === 'function') callback(undefined, true);\n  }\n\n  get clientMetadata() {\n    return this.s.options.metadata;\n  }\n\n  isConnected() {\n    return this.s.state === common_1.STATE_CONNECTED;\n  }\n\n  isDestroyed() {\n    return this.s.state === common_1.STATE_CLOSED;\n  }\n  /**\n   * @deprecated This function is deprecated and will be removed in the next major version.\n   */\n\n\n  unref() {\n    (0, utils_1.emitWarning)('`unref` is a noop and will be removed in the next major version');\n  } // NOTE: There are many places in code where we explicitly check the last hello\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first hello seen, which should suffice.\n\n\n  lastHello() {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(sd => sd.type !== common_1.ServerType.Unknown)[0];\n    const result = sd || {\n      maxWireVersion: this.description.commonWireVersion\n    };\n    return result;\n  }\n\n  get commonWireVersion() {\n    return this.description.commonWireVersion;\n  }\n\n  get logicalSessionTimeoutMinutes() {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n\n  get clusterTime() {\n    return this.s.clusterTime;\n  }\n\n  set clusterTime(clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n\n}\n\nexports.Topology = Topology;\n/** @event */\n\nTopology.SERVER_OPENING = constants_1.SERVER_OPENING;\n/** @event */\n\nTopology.SERVER_CLOSED = constants_1.SERVER_CLOSED;\n/** @event */\n\nTopology.SERVER_DESCRIPTION_CHANGED = constants_1.SERVER_DESCRIPTION_CHANGED;\n/** @event */\n\nTopology.TOPOLOGY_OPENING = constants_1.TOPOLOGY_OPENING;\n/** @event */\n\nTopology.TOPOLOGY_CLOSED = constants_1.TOPOLOGY_CLOSED;\n/** @event */\n\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n/** @event */\n\nTopology.ERROR = constants_1.ERROR;\n/** @event */\n\nTopology.OPEN = constants_1.OPEN;\n/** @event */\n\nTopology.CONNECT = constants_1.CONNECT;\n/** @event */\n\nTopology.CLOSE = constants_1.CLOSE;\n/** @event */\n\nTopology.TIMEOUT = constants_1.TIMEOUT;\n/** Destroys a server, and removes all event listeners from the instance */\n\nfunction destroyServer(server, topology, options, callback) {\n  options = options !== null && options !== void 0 ? options : {};\n\n  for (const event of constants_1.LOCAL_SERVER_EVENTS) {\n    server.removeAllListeners(event);\n  }\n\n  server.destroy(options, () => {\n    topology.emit(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n\n    for (const event of constants_1.SERVER_RELAY_EVENTS) {\n      server.removeAllListeners(event);\n    }\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n/** Predicts the TopologyType from options */\n\n\nfunction topologyTypeFromOptions(options) {\n  if (options === null || options === void 0 ? void 0 : options.directConnection) {\n    return common_1.TopologyType.Single;\n  }\n\n  if (options === null || options === void 0 ? void 0 : options.replicaSet) {\n    return common_1.TopologyType.ReplicaSetNoPrimary;\n  }\n\n  if (options === null || options === void 0 ? void 0 : options.loadBalanced) {\n    return common_1.TopologyType.LoadBalanced;\n  }\n\n  return common_1.TopologyType.Unknown;\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\n\n\nfunction createAndConnectServer(topology, serverDescription) {\n  topology.emit(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n  const server = new server_1.Server(topology, serverDescription, topology.s.options);\n\n  for (const event of constants_1.SERVER_RELAY_EVENTS) {\n    server.on(event, e => topology.emit(event, e));\n  }\n\n  server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n  server.connect();\n  return server;\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\n\n\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n\n    if (server) {\n      server.s.description = incomingServerDescription;\n    }\n  } // add new servers for all descriptions we currently don't know about locally\n\n\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  } // for all servers no longer known, remove their descriptions and destroy their instances\n\n\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n\n    if (!topology.s.servers.has(serverAddress)) {\n      continue;\n    }\n\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress); // prepare server for garbage collection\n\n    if (server) {\n      destroyServer(server, topology);\n    }\n  }\n}\n\nfunction drainWaitQueue(queue, err) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember.timer) {\n      (0, timers_1.clearTimeout)(waitQueueMember.timer);\n    }\n\n    if (!waitQueueMember[kCancelled]) {\n      waitQueueMember.callback(err);\n    }\n  }\n}\n\nfunction processWaitQueue(topology) {\n  if (topology.s.state === common_1.STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n    return;\n  }\n\n  const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n\n  for (let i = 0; i < membersToProcess; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n\n    let selectedDescriptions;\n\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      selectedDescriptions = serverSelector ? serverSelector(topology.description, serverDescriptions) : serverDescriptions;\n    } catch (e) {\n      if (waitQueueMember.timer) {\n        (0, timers_1.clearTimeout)(waitQueueMember.timer);\n      }\n\n      waitQueueMember.callback(e);\n      continue;\n    }\n\n    let selectedServer;\n\n    if (selectedDescriptions.length === 0) {\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    } else if (selectedDescriptions.length === 1) {\n      selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n    } else {\n      // don't shuffle the array if there are only two elements\n      const descriptions = selectedDescriptions.length === 2 ? selectedDescriptions : (0, utils_1.shuffle)(selectedDescriptions, 2);\n      const server1 = topology.s.servers.get(descriptions[0].address);\n      const server2 = topology.s.servers.get(descriptions[1].address);\n      selectedServer = server1 && server2 && server1.s.operationCount < server2.s.operationCount ? server1 : server2;\n    }\n\n    if (!selectedServer) {\n      waitQueueMember.callback(new error_1.MongoServerSelectionError('server selection returned a server description but the server was not found in the topology', topology.description));\n      return;\n    }\n\n    const transaction = waitQueueMember.transaction;\n\n    if (isSharded && transaction && transaction.isActive && selectedServer) {\n      transaction.pinServer(selectedServer);\n    }\n\n    if (waitQueueMember.timer) {\n      (0, timers_1.clearTimeout)(waitQueueMember.timer);\n    }\n\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    for (const [, server] of topology.s.servers) {\n      process.nextTick(function scheduleServerCheck() {\n        return server.requestCheck();\n      });\n    }\n  }\n}\n\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n  const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n  const currentTopologyVersion = currentServerDescription === null || currentServerDescription === void 0 ? void 0 : currentServerDescription.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0;\n}\n/** @public */\n\n\nclass ServerCapabilities {\n  constructor(hello) {\n    this.minWireVersion = hello.minWireVersion || 0;\n    this.maxWireVersion = hello.maxWireVersion || 0;\n  }\n\n  get hasAggregationCursor() {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasWriteCommands() {\n    return this.maxWireVersion >= 2;\n  }\n\n  get hasTextSearch() {\n    return this.minWireVersion >= 0;\n  }\n\n  get hasAuthCommands() {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasListCollectionsCommand() {\n    return this.maxWireVersion >= 3;\n  }\n\n  get hasListIndexesCommand() {\n    return this.maxWireVersion >= 3;\n  }\n\n  get supportsSnapshotReads() {\n    return this.maxWireVersion >= 13;\n  }\n\n  get commandsTakeWriteConcern() {\n    return this.maxWireVersion >= 5;\n  }\n\n  get commandsTakeCollation() {\n    return this.maxWireVersion >= 5;\n  }\n\n}\n\nexports.ServerCapabilities = ServerCapabilities;","map":{"version":3,"sources":["../../src/sdam/topology.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServerCapabilities = exports.Topology = void 0;\nconst Denque = require(\"denque\");\nconst timers_1 = require(\"timers\");\nconst util_1 = require(\"util\");\nconst bson_1 = require(\"../bson\");\nconst connection_string_1 = require(\"../connection_string\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst read_preference_1 = require(\"../read_preference\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst events_1 = require(\"./events\");\nconst server_1 = require(\"./server\");\nconst server_description_1 = require(\"./server_description\");\nconst server_selection_1 = require(\"./server_selection\");\nconst srv_polling_1 = require(\"./srv_polling\");\nconst topology_description_1 = require(\"./topology_description\");\n// Global state\nlet globalTopologyCounter = 0;\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n    [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n    [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nclass Topology extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @param seedlist - a list of HostAddress instances to connect to\n     */\n    constructor(seeds, options) {\n        var _a;\n        super();\n        // Legacy CSFLE support\n        this.bson = Object.create(null);\n        this.bson.serialize = bson_1.serialize;\n        this.bson.deserialize = bson_1.deserialize;\n        // Options should only be undefined in tests, MongoClient will always have defined options\n        options = options !== null && options !== void 0 ? options : {\n            hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n            ...Object.fromEntries(connection_string_1.DEFAULT_OPTIONS.entries()),\n            ...Object.fromEntries(connection_string_1.FEATURE_FLAGS.entries())\n        };\n        if (typeof seeds === 'string') {\n            seeds = [utils_1.HostAddress.fromString(seeds)];\n        }\n        else if (!Array.isArray(seeds)) {\n            seeds = [seeds];\n        }\n        const seedlist = [];\n        for (const seed of seeds) {\n            if (typeof seed === 'string') {\n                seedlist.push(utils_1.HostAddress.fromString(seed));\n            }\n            else if (seed instanceof utils_1.HostAddress) {\n                seedlist.push(seed);\n            }\n            else {\n                // FIXME(NODE-3483): May need to be a MongoParseError\n                throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n            }\n        }\n        const topologyType = topologyTypeFromOptions(options);\n        const topologyId = globalTopologyCounter++;\n        const selectedHosts = options.srvMaxHosts == null ||\n            options.srvMaxHosts === 0 ||\n            options.srvMaxHosts >= seedlist.length\n            ? seedlist\n            : (0, utils_1.shuffle)(seedlist, options.srvMaxHosts);\n        const serverDescriptions = new Map();\n        for (const hostAddress of selectedHosts) {\n            serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n        }\n        this[kWaitQueue] = new Denque();\n        this.s = {\n            // the id of this topology\n            id: topologyId,\n            // passed in options\n            options,\n            // initial seedlist of servers to connect to\n            seedlist,\n            // initial state\n            state: common_1.STATE_CLOSED,\n            // the topology description\n            description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n            serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n            heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n            // a map of server instances to normalized addresses\n            servers: new Map(),\n            credentials: options === null || options === void 0 ? void 0 : options.credentials,\n            clusterTime: undefined,\n            // timer management\n            connectionTimers: new Set(),\n            detectShardedTopology: ev => this.detectShardedTopology(ev),\n            detectSrvRecords: ev => this.detectSrvRecords(ev)\n        };\n        if (options.srvHost && !options.loadBalanced) {\n            this.s.srvPoller =\n                (_a = options.srvPoller) !== null && _a !== void 0 ? _a : new srv_polling_1.SrvPoller({\n                    heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n                    srvHost: options.srvHost,\n                    srvMaxHosts: options.srvMaxHosts,\n                    srvServiceName: options.srvServiceName\n                });\n            this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n        }\n    }\n    detectShardedTopology(event) {\n        var _a, _b, _c;\n        const previousType = event.previousDescription.type;\n        const newType = event.newDescription.type;\n        const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n        const srvListeners = (_a = this.s.srvPoller) === null || _a === void 0 ? void 0 : _a.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n        const listeningToSrvPolling = !!(srvListeners === null || srvListeners === void 0 ? void 0 : srvListeners.includes(this.s.detectSrvRecords));\n        if (transitionToSharded && !listeningToSrvPolling) {\n            (_b = this.s.srvPoller) === null || _b === void 0 ? void 0 : _b.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n            (_c = this.s.srvPoller) === null || _c === void 0 ? void 0 : _c.start();\n        }\n    }\n    detectSrvRecords(ev) {\n        const previousTopologyDescription = this.s.description;\n        this.s.description = this.s.description.updateFromSrvPollingEvent(ev, this.s.options.srvMaxHosts);\n        if (this.s.description === previousTopologyDescription) {\n            // Nothing changed, so return\n            return;\n        }\n        updateServers(this);\n        this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n    /**\n     * @returns A `TopologyDescription` for this topology\n     */\n    get description() {\n        return this.s.description;\n    }\n    get loadBalanced() {\n        return this.s.options.loadBalanced;\n    }\n    get capabilities() {\n        return new ServerCapabilities(this.lastHello());\n    }\n    /** Initiate server connect */\n    connect(options, callback) {\n        var _a;\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options !== null && options !== void 0 ? options : {};\n        if (this.s.state === common_1.STATE_CONNECTED) {\n            if (typeof callback === 'function') {\n                callback();\n            }\n            return;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // emit SDAM monitoring events\n        this.emit(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id));\n        // emit an event for the topology change\n        this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown), // initial is always Unknown\n        this.s.description));\n        // connect all known servers, then attempt server selection to connect\n        const serverDescriptions = Array.from(this.s.description.servers.values());\n        this.s.servers = new Map(serverDescriptions.map(serverDescription => [\n            serverDescription.address,\n            createAndConnectServer(this, serverDescription)\n        ]));\n        // In load balancer mode we need to fake a server description getting\n        // emitted from the monitor, since the monitor doesn't exist.\n        if (this.s.options.loadBalanced) {\n            for (const description of serverDescriptions) {\n                const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n                    loadBalanced: this.s.options.loadBalanced\n                });\n                this.serverUpdateHandler(newDescription);\n            }\n        }\n        const exitWithError = (error) => callback ? callback(error) : this.emit(Topology.ERROR, error);\n        const readPreference = (_a = options.readPreference) !== null && _a !== void 0 ? _a : read_preference_1.ReadPreference.primary;\n        this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), options, (err, server) => {\n            if (err) {\n                return this.close({ force: false }, () => exitWithError(err));\n            }\n            // TODO: NODE-2471\n            const skipPingOnConnect = this.s.options[Symbol.for('@@mdb.skipPingOnConnect')] === true;\n            if (!skipPingOnConnect && server && this.s.credentials) {\n                server.command((0, utils_1.ns)('admin.$cmd'), { ping: 1 }, {}, err => {\n                    if (err) {\n                        return exitWithError(err);\n                    }\n                    stateTransition(this, common_1.STATE_CONNECTED);\n                    this.emit(Topology.OPEN, this);\n                    this.emit(Topology.CONNECT, this);\n                    callback === null || callback === void 0 ? void 0 : callback(undefined, this);\n                });\n                return;\n            }\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Topology.OPEN, this);\n            this.emit(Topology.CONNECT, this);\n            callback === null || callback === void 0 ? void 0 : callback(undefined, this);\n        });\n    }\n    /** Close this topology */\n    close(options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = {};\n        }\n        if (typeof options === 'boolean') {\n            options = { force: options };\n        }\n        options = options !== null && options !== void 0 ? options : {};\n        if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n            return callback === null || callback === void 0 ? void 0 : callback();\n        }\n        const destroyedServers = Array.from(this.s.servers.values(), server => {\n            return (0, util_1.promisify)(destroyServer)(server, this, options);\n        });\n        Promise.all(destroyedServers)\n            .then(() => {\n            this.s.servers.clear();\n            stateTransition(this, common_1.STATE_CLOSING);\n            drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n            (0, common_1.drainTimerQueue)(this.s.connectionTimers);\n            if (this.s.srvPoller) {\n                this.s.srvPoller.stop();\n                this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n            }\n            this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n            stateTransition(this, common_1.STATE_CLOSED);\n            // emit an event for close\n            this.emit(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n        })\n            .finally(() => callback === null || callback === void 0 ? void 0 : callback());\n    }\n    /**\n     * Selects a server according to the selection predicate provided\n     *\n     * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n     * @param options - Optional settings related to server selection\n     * @param callback - The callback used to indicate success or failure\n     * @returns An instance of a `Server` meeting the criteria of the predicate provided\n     */\n    selectServer(selector, options, callback) {\n        let serverSelector;\n        if (typeof selector !== 'function') {\n            if (typeof selector === 'string') {\n                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));\n            }\n            else {\n                let readPreference;\n                if (selector instanceof read_preference_1.ReadPreference) {\n                    readPreference = selector;\n                }\n                else {\n                    read_preference_1.ReadPreference.translate(options);\n                    readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n                }\n                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);\n            }\n        }\n        else {\n            serverSelector = selector;\n        }\n        options = Object.assign({}, { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS }, options);\n        const isSharded = this.description.type === common_1.TopologyType.Sharded;\n        const session = options.session;\n        const transaction = session && session.transaction;\n        if (isSharded && transaction && transaction.server) {\n            callback(undefined, transaction.server);\n            return;\n        }\n        const waitQueueMember = {\n            serverSelector,\n            transaction,\n            callback\n        };\n        const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n        if (serverSelectionTimeoutMS) {\n            waitQueueMember.timer = (0, timers_1.setTimeout)(() => {\n                waitQueueMember[kCancelled] = true;\n                waitQueueMember.timer = undefined;\n                const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${serverSelectionTimeoutMS} ms`, this.description);\n                waitQueueMember.callback(timeoutError);\n            }, serverSelectionTimeoutMS);\n        }\n        this[kWaitQueue].push(waitQueueMember);\n        processWaitQueue(this);\n    }\n    // Sessions related methods\n    /**\n     * @returns Whether the topology should initiate selection to determine session support\n     */\n    shouldCheckForSessionSupport() {\n        if (this.description.type === common_1.TopologyType.Single) {\n            return !this.description.hasKnownServers;\n        }\n        return !this.description.hasDataBearingServers;\n    }\n    /**\n     * @returns Whether sessions are supported on the current topology\n     */\n    hasSessionSupport() {\n        return this.loadBalanced || this.description.logicalSessionTimeoutMinutes != null;\n    }\n    /**\n     * Update the internal TopologyDescription with a ServerDescription\n     *\n     * @param serverDescription - The server to update in the internal list of server descriptions\n     */\n    serverUpdateHandler(serverDescription) {\n        if (!this.s.description.hasServer(serverDescription.address)) {\n            return;\n        }\n        // ignore this server update if its from an outdated topologyVersion\n        if (isStaleServerDescription(this.s.description, serverDescription)) {\n            return;\n        }\n        // these will be used for monitoring events later\n        const previousTopologyDescription = this.s.description;\n        const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n        if (!previousServerDescription) {\n            return;\n        }\n        // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n        // a server it MUST compare it to the current highest seen cluster time\n        // for the deployment. If the new cluster time is higher than the\n        // highest seen cluster time it MUST become the new highest seen cluster\n        // time. Two cluster times are compared using only the BsonTimestamp\n        // value of the clusterTime embedded field.\"\n        const clusterTime = serverDescription.$clusterTime;\n        if (clusterTime) {\n            (0, common_1._advanceClusterTime)(this, clusterTime);\n        }\n        // If we already know all the information contained in this updated description, then\n        // we don't need to emit SDAM events, but still need to update the description, in order\n        // to keep client-tracked attributes like last update time and round trip time up to date\n        const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription);\n        // first update the TopologyDescription\n        this.s.description = this.s.description.update(serverDescription);\n        if (this.s.description.compatibilityError) {\n            this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n            return;\n        }\n        // emit monitoring events for this change\n        if (!equalDescriptions) {\n            const newDescription = this.s.description.servers.get(serverDescription.address);\n            if (newDescription) {\n                this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n            }\n        }\n        // update server list from updated descriptions\n        updateServers(this, serverDescription);\n        // attempt to resolve any outstanding server selection attempts\n        if (this[kWaitQueue].length > 0) {\n            processWaitQueue(this);\n        }\n        if (!equalDescriptions) {\n            this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n        }\n    }\n    auth(credentials, callback) {\n        if (typeof credentials === 'function')\n            (callback = credentials), (credentials = undefined);\n        if (typeof callback === 'function')\n            callback(undefined, true);\n    }\n    get clientMetadata() {\n        return this.s.options.metadata;\n    }\n    isConnected() {\n        return this.s.state === common_1.STATE_CONNECTED;\n    }\n    isDestroyed() {\n        return this.s.state === common_1.STATE_CLOSED;\n    }\n    /**\n     * @deprecated This function is deprecated and will be removed in the next major version.\n     */\n    unref() {\n        (0, utils_1.emitWarning)('`unref` is a noop and will be removed in the next major version');\n    }\n    // NOTE: There are many places in code where we explicitly check the last hello\n    //       to do feature support detection. This should be done any other way, but for\n    //       now we will just return the first hello seen, which should suffice.\n    lastHello() {\n        const serverDescriptions = Array.from(this.description.servers.values());\n        if (serverDescriptions.length === 0)\n            return {};\n        const sd = serverDescriptions.filter((sd) => sd.type !== common_1.ServerType.Unknown)[0];\n        const result = sd || { maxWireVersion: this.description.commonWireVersion };\n        return result;\n    }\n    get commonWireVersion() {\n        return this.description.commonWireVersion;\n    }\n    get logicalSessionTimeoutMinutes() {\n        return this.description.logicalSessionTimeoutMinutes;\n    }\n    get clusterTime() {\n        return this.s.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.s.clusterTime = clusterTime;\n    }\n}\nexports.Topology = Topology;\n/** @event */\nTopology.SERVER_OPENING = constants_1.SERVER_OPENING;\n/** @event */\nTopology.SERVER_CLOSED = constants_1.SERVER_CLOSED;\n/** @event */\nTopology.SERVER_DESCRIPTION_CHANGED = constants_1.SERVER_DESCRIPTION_CHANGED;\n/** @event */\nTopology.TOPOLOGY_OPENING = constants_1.TOPOLOGY_OPENING;\n/** @event */\nTopology.TOPOLOGY_CLOSED = constants_1.TOPOLOGY_CLOSED;\n/** @event */\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n/** @event */\nTopology.ERROR = constants_1.ERROR;\n/** @event */\nTopology.OPEN = constants_1.OPEN;\n/** @event */\nTopology.CONNECT = constants_1.CONNECT;\n/** @event */\nTopology.CLOSE = constants_1.CLOSE;\n/** @event */\nTopology.TIMEOUT = constants_1.TIMEOUT;\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(server, topology, options, callback) {\n    options = options !== null && options !== void 0 ? options : {};\n    for (const event of constants_1.LOCAL_SERVER_EVENTS) {\n        server.removeAllListeners(event);\n    }\n    server.destroy(options, () => {\n        topology.emit(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n        for (const event of constants_1.SERVER_RELAY_EVENTS) {\n            server.removeAllListeners(event);\n        }\n        if (typeof callback === 'function') {\n            callback();\n        }\n    });\n}\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options) {\n    if (options === null || options === void 0 ? void 0 : options.directConnection) {\n        return common_1.TopologyType.Single;\n    }\n    if (options === null || options === void 0 ? void 0 : options.replicaSet) {\n        return common_1.TopologyType.ReplicaSetNoPrimary;\n    }\n    if (options === null || options === void 0 ? void 0 : options.loadBalanced) {\n        return common_1.TopologyType.LoadBalanced;\n    }\n    return common_1.TopologyType.Unknown;\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\nfunction createAndConnectServer(topology, serverDescription) {\n    topology.emit(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n    const server = new server_1.Server(topology, serverDescription, topology.s.options);\n    for (const event of constants_1.SERVER_RELAY_EVENTS) {\n        server.on(event, (e) => topology.emit(event, e));\n    }\n    server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n    server.connect();\n    return server;\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology, incomingServerDescription) {\n    // update the internal server's description\n    if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n        const server = topology.s.servers.get(incomingServerDescription.address);\n        if (server) {\n            server.s.description = incomingServerDescription;\n        }\n    }\n    // add new servers for all descriptions we currently don't know about locally\n    for (const serverDescription of topology.description.servers.values()) {\n        if (!topology.s.servers.has(serverDescription.address)) {\n            const server = createAndConnectServer(topology, serverDescription);\n            topology.s.servers.set(serverDescription.address, server);\n        }\n    }\n    // for all servers no longer known, remove their descriptions and destroy their instances\n    for (const entry of topology.s.servers) {\n        const serverAddress = entry[0];\n        if (topology.description.hasServer(serverAddress)) {\n            continue;\n        }\n        if (!topology.s.servers.has(serverAddress)) {\n            continue;\n        }\n        const server = topology.s.servers.get(serverAddress);\n        topology.s.servers.delete(serverAddress);\n        // prepare server for garbage collection\n        if (server) {\n            destroyServer(server, topology);\n        }\n    }\n}\nfunction drainWaitQueue(queue, err) {\n    while (queue.length) {\n        const waitQueueMember = queue.shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        if (waitQueueMember.timer) {\n            (0, timers_1.clearTimeout)(waitQueueMember.timer);\n        }\n        if (!waitQueueMember[kCancelled]) {\n            waitQueueMember.callback(err);\n        }\n    }\n}\nfunction processWaitQueue(topology) {\n    if (topology.s.state === common_1.STATE_CLOSED) {\n        drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n        return;\n    }\n    const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n    const serverDescriptions = Array.from(topology.description.servers.values());\n    const membersToProcess = topology[kWaitQueue].length;\n    for (let i = 0; i < membersToProcess; ++i) {\n        const waitQueueMember = topology[kWaitQueue].shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        if (waitQueueMember[kCancelled]) {\n            continue;\n        }\n        let selectedDescriptions;\n        try {\n            const serverSelector = waitQueueMember.serverSelector;\n            selectedDescriptions = serverSelector\n                ? serverSelector(topology.description, serverDescriptions)\n                : serverDescriptions;\n        }\n        catch (e) {\n            if (waitQueueMember.timer) {\n                (0, timers_1.clearTimeout)(waitQueueMember.timer);\n            }\n            waitQueueMember.callback(e);\n            continue;\n        }\n        let selectedServer;\n        if (selectedDescriptions.length === 0) {\n            topology[kWaitQueue].push(waitQueueMember);\n            continue;\n        }\n        else if (selectedDescriptions.length === 1) {\n            selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n        }\n        else {\n            // don't shuffle the array if there are only two elements\n            const descriptions = selectedDescriptions.length === 2 ? selectedDescriptions : (0, utils_1.shuffle)(selectedDescriptions, 2);\n            const server1 = topology.s.servers.get(descriptions[0].address);\n            const server2 = topology.s.servers.get(descriptions[1].address);\n            selectedServer =\n                server1 && server2 && server1.s.operationCount < server2.s.operationCount\n                    ? server1\n                    : server2;\n        }\n        if (!selectedServer) {\n            waitQueueMember.callback(new error_1.MongoServerSelectionError('server selection returned a server description but the server was not found in the topology', topology.description));\n            return;\n        }\n        const transaction = waitQueueMember.transaction;\n        if (isSharded && transaction && transaction.isActive && selectedServer) {\n            transaction.pinServer(selectedServer);\n        }\n        if (waitQueueMember.timer) {\n            (0, timers_1.clearTimeout)(waitQueueMember.timer);\n        }\n        waitQueueMember.callback(undefined, selectedServer);\n    }\n    if (topology[kWaitQueue].length > 0) {\n        // ensure all server monitors attempt monitoring soon\n        for (const [, server] of topology.s.servers) {\n            process.nextTick(function scheduleServerCheck() {\n                return server.requestCheck();\n            });\n        }\n    }\n}\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n    const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n    const currentTopologyVersion = currentServerDescription === null || currentServerDescription === void 0 ? void 0 : currentServerDescription.topologyVersion;\n    return ((0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0);\n}\n/** @public */\nclass ServerCapabilities {\n    constructor(hello) {\n        this.minWireVersion = hello.minWireVersion || 0;\n        this.maxWireVersion = hello.maxWireVersion || 0;\n    }\n    get hasAggregationCursor() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasWriteCommands() {\n        return this.maxWireVersion >= 2;\n    }\n    get hasTextSearch() {\n        return this.minWireVersion >= 0;\n    }\n    get hasAuthCommands() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasListCollectionsCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get hasListIndexesCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get supportsSnapshotReads() {\n        return this.maxWireVersion >= 13;\n    }\n    get commandsTakeWriteConcern() {\n        return this.maxWireVersion >= 5;\n    }\n    get commandsTakeCollation() {\n        return this.maxWireVersion >= 5;\n    }\n}\nexports.ServerCapabilities = ServerCapabilities;\n//# sourceMappingURL=topology.js.map"]},"metadata":{},"sourceType":"script"}