{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoDBAWS = void 0;\n\nconst crypto = require(\"crypto\");\n\nconst http = require(\"http\");\n\nconst url = require(\"url\");\n\nconst BSON = require(\"../../bson\");\n\nconst deps_1 = require(\"../../deps\");\n\nconst error_1 = require(\"../../error\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst auth_provider_1 = require(\"./auth_provider\");\n\nconst mongo_credentials_1 = require(\"./mongo_credentials\");\n\nconst providers_1 = require(\"./providers\");\n\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nconst bsonOptions = {\n  promoteLongs: true,\n  promoteValues: true,\n  promoteBuffers: false,\n  bsonRegExp: false\n};\n\nclass MongoDBAWS extends auth_provider_1.AuthProvider {\n  auth(authContext, callback) {\n    const {\n      connection,\n      credentials\n    } = authContext;\n\n    if (!credentials) {\n      return callback(new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.'));\n    }\n\n    if ('kModuleError' in deps_1.aws4) {\n      return callback(deps_1.aws4['kModuleError']);\n    }\n\n    const {\n      sign\n    } = deps_1.aws4;\n\n    if ((0, utils_1.maxWireVersion)(connection) < 9) {\n      callback(new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later'));\n      return;\n    }\n\n    if (!credentials.username) {\n      makeTempCredentials(credentials, (err, tempCredentials) => {\n        if (err || !tempCredentials) return callback(err);\n        authContext.credentials = tempCredentials;\n        this.auth(authContext, callback);\n      });\n      return;\n    }\n\n    const accessKeyId = credentials.username;\n    const secretAccessKey = credentials.password;\n    const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN; // If all three defined, include sessionToken, else include username and pass, else no credentials\n\n    const awsCredentials = accessKeyId && secretAccessKey && sessionToken ? {\n      accessKeyId,\n      secretAccessKey,\n      sessionToken\n    } : accessKeyId && secretAccessKey ? {\n      accessKeyId,\n      secretAccessKey\n    } : undefined;\n    const db = credentials.source;\n    crypto.randomBytes(32, (err, nonce) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      const saslStart = {\n        saslStart: 1,\n        mechanism: 'MONGODB-AWS',\n        payload: BSON.serialize({\n          r: nonce,\n          p: ASCII_N\n        }, bsonOptions)\n      };\n      connection.command((0, utils_1.ns)(`${db}.$cmd`), saslStart, undefined, (err, res) => {\n        if (err) return callback(err);\n        const serverResponse = BSON.deserialize(res.payload.buffer, bsonOptions);\n        const host = serverResponse.h;\n        const serverNonce = serverResponse.s.buffer;\n\n        if (serverNonce.length !== 64) {\n          callback( // TODO(NODE-3483)\n          new error_1.MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`));\n          return;\n        }\n\n        if (serverNonce.compare(nonce, 0, nonce.length, 0, nonce.length) !== 0) {\n          // TODO(NODE-3483)\n          callback(new error_1.MongoRuntimeError('Server nonce does not begin with client nonce'));\n          return;\n        }\n\n        if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n          // TODO(NODE-3483)\n          callback(new error_1.MongoRuntimeError(`Server returned an invalid host: \"${host}\"`));\n          return;\n        }\n\n        const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n        const options = sign({\n          method: 'POST',\n          host,\n          region: deriveRegion(serverResponse.h),\n          service: 'sts',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'Content-Length': body.length,\n            'X-MongoDB-Server-Nonce': serverNonce.toString('base64'),\n            'X-MongoDB-GS2-CB-Flag': 'n'\n          },\n          path: '/',\n          body\n        }, awsCredentials);\n        const payload = {\n          a: options.headers.Authorization,\n          d: options.headers['X-Amz-Date']\n        };\n\n        if (sessionToken) {\n          payload.t = sessionToken;\n        }\n\n        const saslContinue = {\n          saslContinue: 1,\n          conversationId: 1,\n          payload: BSON.serialize(payload, bsonOptions)\n        };\n        connection.command((0, utils_1.ns)(`${db}.$cmd`), saslContinue, undefined, callback);\n      });\n    });\n  }\n\n}\n\nexports.MongoDBAWS = MongoDBAWS;\n\nfunction makeTempCredentials(credentials, callback) {\n  function done(creds) {\n    if (!creds.AccessKeyId || !creds.SecretAccessKey || !creds.Token) {\n      callback(new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials'));\n      return;\n    }\n\n    callback(undefined, new mongo_credentials_1.MongoCredentials({\n      username: creds.AccessKeyId,\n      password: creds.SecretAccessKey,\n      source: credentials.source,\n      mechanism: providers_1.AuthMechanism.MONGODB_AWS,\n      mechanismProperties: {\n        AWS_SESSION_TOKEN: creds.Token\n      }\n    }));\n  } // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n  // is set then drivers MUST assume that it was set by an AWS ECS agent\n\n\n  if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n    request(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`, undefined, (err, res) => {\n      if (err) return callback(err);\n      done(res);\n    });\n    return;\n  } // Otherwise assume we are on an EC2 instance\n  // get a token\n\n\n  request(`${AWS_EC2_URI}/latest/api/token`, {\n    method: 'PUT',\n    json: false,\n    headers: {\n      'X-aws-ec2-metadata-token-ttl-seconds': 30\n    }\n  }, (err, token) => {\n    if (err) return callback(err); // get role name\n\n    request(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n      json: false,\n      headers: {\n        'X-aws-ec2-metadata-token': token\n      }\n    }, (err, roleName) => {\n      if (err) return callback(err); // get temp credentials\n\n      request(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n        headers: {\n          'X-aws-ec2-metadata-token': token\n        }\n      }, (err, creds) => {\n        if (err) return callback(err);\n        done(creds);\n      });\n    });\n  });\n}\n\nfunction deriveRegion(host) {\n  const parts = host.split('.');\n\n  if (parts.length === 1 || parts[1] === 'amazonaws') {\n    return 'us-east-1';\n  }\n\n  return parts[1];\n}\n\nfunction request(uri, _options, callback) {\n  const options = Object.assign({\n    method: 'GET',\n    timeout: 10000,\n    json: true\n  }, url.parse(uri), _options);\n  const req = http.request(options, res => {\n    res.setEncoding('utf8');\n    let data = '';\n    res.on('data', d => data += d);\n    res.on('end', () => {\n      if (options.json === false) {\n        callback(undefined, data);\n        return;\n      }\n\n      try {\n        const parsed = JSON.parse(data);\n        callback(undefined, parsed);\n      } catch (err) {\n        // TODO(NODE-3483)\n        callback(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n      }\n    });\n  });\n  req.on('timeout', () => {\n    req.destroy(new error_1.MongoAWSError(`AWS request to ${uri} timed out after ${options.timeout} ms`));\n  });\n  req.on('error', err => callback(err));\n  req.end();\n}","map":{"version":3,"sources":["../../../src/cmap/auth/mongodb_aws.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoDBAWS = void 0;\nconst crypto = require(\"crypto\");\nconst http = require(\"http\");\nconst url = require(\"url\");\nconst BSON = require(\"../../bson\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\nconst mongo_credentials_1 = require(\"./mongo_credentials\");\nconst providers_1 = require(\"./providers\");\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nconst bsonOptions = {\n    promoteLongs: true,\n    promoteValues: true,\n    promoteBuffers: false,\n    bsonRegExp: false\n};\nclass MongoDBAWS extends auth_provider_1.AuthProvider {\n    auth(authContext, callback) {\n        const { connection, credentials } = authContext;\n        if (!credentials) {\n            return callback(new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.'));\n        }\n        if ('kModuleError' in deps_1.aws4) {\n            return callback(deps_1.aws4['kModuleError']);\n        }\n        const { sign } = deps_1.aws4;\n        if ((0, utils_1.maxWireVersion)(connection) < 9) {\n            callback(new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later'));\n            return;\n        }\n        if (!credentials.username) {\n            makeTempCredentials(credentials, (err, tempCredentials) => {\n                if (err || !tempCredentials)\n                    return callback(err);\n                authContext.credentials = tempCredentials;\n                this.auth(authContext, callback);\n            });\n            return;\n        }\n        const accessKeyId = credentials.username;\n        const secretAccessKey = credentials.password;\n        const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n        // If all three defined, include sessionToken, else include username and pass, else no credentials\n        const awsCredentials = accessKeyId && secretAccessKey && sessionToken\n            ? { accessKeyId, secretAccessKey, sessionToken }\n            : accessKeyId && secretAccessKey\n                ? { accessKeyId, secretAccessKey }\n                : undefined;\n        const db = credentials.source;\n        crypto.randomBytes(32, (err, nonce) => {\n            if (err) {\n                callback(err);\n                return;\n            }\n            const saslStart = {\n                saslStart: 1,\n                mechanism: 'MONGODB-AWS',\n                payload: BSON.serialize({ r: nonce, p: ASCII_N }, bsonOptions)\n            };\n            connection.command((0, utils_1.ns)(`${db}.$cmd`), saslStart, undefined, (err, res) => {\n                if (err)\n                    return callback(err);\n                const serverResponse = BSON.deserialize(res.payload.buffer, bsonOptions);\n                const host = serverResponse.h;\n                const serverNonce = serverResponse.s.buffer;\n                if (serverNonce.length !== 64) {\n                    callback(\n                    // TODO(NODE-3483)\n                    new error_1.MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`));\n                    return;\n                }\n                if (serverNonce.compare(nonce, 0, nonce.length, 0, nonce.length) !== 0) {\n                    // TODO(NODE-3483)\n                    callback(new error_1.MongoRuntimeError('Server nonce does not begin with client nonce'));\n                    return;\n                }\n                if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n                    // TODO(NODE-3483)\n                    callback(new error_1.MongoRuntimeError(`Server returned an invalid host: \"${host}\"`));\n                    return;\n                }\n                const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n                const options = sign({\n                    method: 'POST',\n                    host,\n                    region: deriveRegion(serverResponse.h),\n                    service: 'sts',\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded',\n                        'Content-Length': body.length,\n                        'X-MongoDB-Server-Nonce': serverNonce.toString('base64'),\n                        'X-MongoDB-GS2-CB-Flag': 'n'\n                    },\n                    path: '/',\n                    body\n                }, awsCredentials);\n                const payload = {\n                    a: options.headers.Authorization,\n                    d: options.headers['X-Amz-Date']\n                };\n                if (sessionToken) {\n                    payload.t = sessionToken;\n                }\n                const saslContinue = {\n                    saslContinue: 1,\n                    conversationId: 1,\n                    payload: BSON.serialize(payload, bsonOptions)\n                };\n                connection.command((0, utils_1.ns)(`${db}.$cmd`), saslContinue, undefined, callback);\n            });\n        });\n    }\n}\nexports.MongoDBAWS = MongoDBAWS;\nfunction makeTempCredentials(credentials, callback) {\n    function done(creds) {\n        if (!creds.AccessKeyId || !creds.SecretAccessKey || !creds.Token) {\n            callback(new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials'));\n            return;\n        }\n        callback(undefined, new mongo_credentials_1.MongoCredentials({\n            username: creds.AccessKeyId,\n            password: creds.SecretAccessKey,\n            source: credentials.source,\n            mechanism: providers_1.AuthMechanism.MONGODB_AWS,\n            mechanismProperties: {\n                AWS_SESSION_TOKEN: creds.Token\n            }\n        }));\n    }\n    // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n    // is set then drivers MUST assume that it was set by an AWS ECS agent\n    if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n        request(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`, undefined, (err, res) => {\n            if (err)\n                return callback(err);\n            done(res);\n        });\n        return;\n    }\n    // Otherwise assume we are on an EC2 instance\n    // get a token\n    request(`${AWS_EC2_URI}/latest/api/token`, { method: 'PUT', json: false, headers: { 'X-aws-ec2-metadata-token-ttl-seconds': 30 } }, (err, token) => {\n        if (err)\n            return callback(err);\n        // get role name\n        request(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, { json: false, headers: { 'X-aws-ec2-metadata-token': token } }, (err, roleName) => {\n            if (err)\n                return callback(err);\n            // get temp credentials\n            request(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, { headers: { 'X-aws-ec2-metadata-token': token } }, (err, creds) => {\n                if (err)\n                    return callback(err);\n                done(creds);\n            });\n        });\n    });\n}\nfunction deriveRegion(host) {\n    const parts = host.split('.');\n    if (parts.length === 1 || parts[1] === 'amazonaws') {\n        return 'us-east-1';\n    }\n    return parts[1];\n}\nfunction request(uri, _options, callback) {\n    const options = Object.assign({\n        method: 'GET',\n        timeout: 10000,\n        json: true\n    }, url.parse(uri), _options);\n    const req = http.request(options, res => {\n        res.setEncoding('utf8');\n        let data = '';\n        res.on('data', d => (data += d));\n        res.on('end', () => {\n            if (options.json === false) {\n                callback(undefined, data);\n                return;\n            }\n            try {\n                const parsed = JSON.parse(data);\n                callback(undefined, parsed);\n            }\n            catch (err) {\n                // TODO(NODE-3483)\n                callback(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n            }\n        });\n    });\n    req.on('timeout', () => {\n        req.destroy(new error_1.MongoAWSError(`AWS request to ${uri} timed out after ${options.timeout} ms`));\n    });\n    req.on('error', err => callback(err));\n    req.end();\n}\n//# sourceMappingURL=mongodb_aws.js.map"]},"metadata":{},"sourceType":"script"}