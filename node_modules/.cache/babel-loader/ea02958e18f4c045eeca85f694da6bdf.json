{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateSocksClientChainOptions = exports.validateSocksClientOptions = void 0;\n\nconst util_1 = require(\"./util\");\n\nconst constants_1 = require(\"./constants\");\n\nconst stream = require(\"stream\");\n/**\n * Validates the provided SocksClientOptions\n * @param options { SocksClientOptions }\n * @param acceptedCommands { string[] } A list of accepted SocksProxy commands.\n */\n\n\nfunction validateSocksClientOptions(options) {\n  let acceptedCommands = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['connect', 'bind', 'associate'];\n\n  // Check SOCKs command option.\n  if (!constants_1.SocksCommand[options.command]) {\n    throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksCommand, options);\n  } // Check SocksCommand for acceptable command.\n\n\n  if (acceptedCommands.indexOf(options.command) === -1) {\n    throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksCommandForOperation, options);\n  } // Check destination\n\n\n  if (!isValidSocksRemoteHost(options.destination)) {\n    throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsDestination, options);\n  } // Check SOCKS proxy to use\n\n\n  if (!isValidSocksProxy(options.proxy)) {\n    throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsProxy, options);\n  } // Validate custom auth (if set)\n\n\n  validateCustomProxyAuth(options.proxy, options); // Check timeout\n\n  if (options.timeout && !isValidTimeoutValue(options.timeout)) {\n    throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsTimeout, options);\n  } // Check existing_socket (if provided)\n\n\n  if (options.existing_socket && !(options.existing_socket instanceof stream.Duplex)) {\n    throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsExistingSocket, options);\n  }\n}\n\nexports.validateSocksClientOptions = validateSocksClientOptions;\n/**\n * Validates the SocksClientChainOptions\n * @param options { SocksClientChainOptions }\n */\n\nfunction validateSocksClientChainOptions(options) {\n  // Only connect is supported when chaining.\n  if (options.command !== 'connect') {\n    throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksCommandChain, options);\n  } // Check destination\n\n\n  if (!isValidSocksRemoteHost(options.destination)) {\n    throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsDestination, options);\n  } // Validate proxies (length)\n\n\n  if (!(options.proxies && Array.isArray(options.proxies) && options.proxies.length >= 2)) {\n    throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsProxiesLength, options);\n  } // Validate proxies\n\n\n  options.proxies.forEach(proxy => {\n    if (!isValidSocksProxy(proxy)) {\n      throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsProxy, options);\n    } // Validate custom auth (if set)\n\n\n    validateCustomProxyAuth(proxy, options);\n  }); // Check timeout\n\n  if (options.timeout && !isValidTimeoutValue(options.timeout)) {\n    throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsTimeout, options);\n  }\n}\n\nexports.validateSocksClientChainOptions = validateSocksClientChainOptions;\n\nfunction validateCustomProxyAuth(proxy, options) {\n  if (proxy.custom_auth_method !== undefined) {\n    // Invalid auth method range\n    if (proxy.custom_auth_method < constants_1.SOCKS5_CUSTOM_AUTH_START || proxy.custom_auth_method > constants_1.SOCKS5_CUSTOM_AUTH_END) {\n      throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsCustomAuthRange, options);\n    } // Missing custom_auth_request_handler\n\n\n    if (proxy.custom_auth_request_handler === undefined || typeof proxy.custom_auth_request_handler !== 'function') {\n      throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, options);\n    } // Missing custom_auth_response_size\n\n\n    if (proxy.custom_auth_response_size === undefined) {\n      throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, options);\n    } // Missing/invalid custom_auth_response_handler\n\n\n    if (proxy.custom_auth_response_handler === undefined || typeof proxy.custom_auth_response_handler !== 'function') {\n      throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, options);\n    }\n  }\n}\n/**\n * Validates a SocksRemoteHost\n * @param remoteHost { SocksRemoteHost }\n */\n\n\nfunction isValidSocksRemoteHost(remoteHost) {\n  return remoteHost && typeof remoteHost.host === 'string' && typeof remoteHost.port === 'number' && remoteHost.port >= 0 && remoteHost.port <= 65535;\n}\n/**\n * Validates a SocksProxy\n * @param proxy { SocksProxy }\n */\n\n\nfunction isValidSocksProxy(proxy) {\n  return proxy && (typeof proxy.host === 'string' || typeof proxy.ipaddress === 'string') && typeof proxy.port === 'number' && proxy.port >= 0 && proxy.port <= 65535 && (proxy.type === 4 || proxy.type === 5);\n}\n/**\n * Validates a timeout value.\n * @param value { Number }\n */\n\n\nfunction isValidTimeoutValue(value) {\n  return typeof value === 'number' && value > 0;\n}","map":{"version":3,"sources":["../../src/common/helpers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateSocksClientChainOptions = exports.validateSocksClientOptions = void 0;\nconst util_1 = require(\"./util\");\nconst constants_1 = require(\"./constants\");\nconst stream = require(\"stream\");\n/**\n * Validates the provided SocksClientOptions\n * @param options { SocksClientOptions }\n * @param acceptedCommands { string[] } A list of accepted SocksProxy commands.\n */\nfunction validateSocksClientOptions(options, acceptedCommands = ['connect', 'bind', 'associate']) {\n    // Check SOCKs command option.\n    if (!constants_1.SocksCommand[options.command]) {\n        throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksCommand, options);\n    }\n    // Check SocksCommand for acceptable command.\n    if (acceptedCommands.indexOf(options.command) === -1) {\n        throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksCommandForOperation, options);\n    }\n    // Check destination\n    if (!isValidSocksRemoteHost(options.destination)) {\n        throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsDestination, options);\n    }\n    // Check SOCKS proxy to use\n    if (!isValidSocksProxy(options.proxy)) {\n        throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsProxy, options);\n    }\n    // Validate custom auth (if set)\n    validateCustomProxyAuth(options.proxy, options);\n    // Check timeout\n    if (options.timeout && !isValidTimeoutValue(options.timeout)) {\n        throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsTimeout, options);\n    }\n    // Check existing_socket (if provided)\n    if (options.existing_socket &&\n        !(options.existing_socket instanceof stream.Duplex)) {\n        throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsExistingSocket, options);\n    }\n}\nexports.validateSocksClientOptions = validateSocksClientOptions;\n/**\n * Validates the SocksClientChainOptions\n * @param options { SocksClientChainOptions }\n */\nfunction validateSocksClientChainOptions(options) {\n    // Only connect is supported when chaining.\n    if (options.command !== 'connect') {\n        throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksCommandChain, options);\n    }\n    // Check destination\n    if (!isValidSocksRemoteHost(options.destination)) {\n        throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsDestination, options);\n    }\n    // Validate proxies (length)\n    if (!(options.proxies &&\n        Array.isArray(options.proxies) &&\n        options.proxies.length >= 2)) {\n        throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsProxiesLength, options);\n    }\n    // Validate proxies\n    options.proxies.forEach((proxy) => {\n        if (!isValidSocksProxy(proxy)) {\n            throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsProxy, options);\n        }\n        // Validate custom auth (if set)\n        validateCustomProxyAuth(proxy, options);\n    });\n    // Check timeout\n    if (options.timeout && !isValidTimeoutValue(options.timeout)) {\n        throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsTimeout, options);\n    }\n}\nexports.validateSocksClientChainOptions = validateSocksClientChainOptions;\nfunction validateCustomProxyAuth(proxy, options) {\n    if (proxy.custom_auth_method !== undefined) {\n        // Invalid auth method range\n        if (proxy.custom_auth_method < constants_1.SOCKS5_CUSTOM_AUTH_START ||\n            proxy.custom_auth_method > constants_1.SOCKS5_CUSTOM_AUTH_END) {\n            throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsCustomAuthRange, options);\n        }\n        // Missing custom_auth_request_handler\n        if (proxy.custom_auth_request_handler === undefined ||\n            typeof proxy.custom_auth_request_handler !== 'function') {\n            throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, options);\n        }\n        // Missing custom_auth_response_size\n        if (proxy.custom_auth_response_size === undefined) {\n            throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, options);\n        }\n        // Missing/invalid custom_auth_response_handler\n        if (proxy.custom_auth_response_handler === undefined ||\n            typeof proxy.custom_auth_response_handler !== 'function') {\n            throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, options);\n        }\n    }\n}\n/**\n * Validates a SocksRemoteHost\n * @param remoteHost { SocksRemoteHost }\n */\nfunction isValidSocksRemoteHost(remoteHost) {\n    return (remoteHost &&\n        typeof remoteHost.host === 'string' &&\n        typeof remoteHost.port === 'number' &&\n        remoteHost.port >= 0 &&\n        remoteHost.port <= 65535);\n}\n/**\n * Validates a SocksProxy\n * @param proxy { SocksProxy }\n */\nfunction isValidSocksProxy(proxy) {\n    return (proxy &&\n        (typeof proxy.host === 'string' || typeof proxy.ipaddress === 'string') &&\n        typeof proxy.port === 'number' &&\n        proxy.port >= 0 &&\n        proxy.port <= 65535 &&\n        (proxy.type === 4 || proxy.type === 5));\n}\n/**\n * Validates a timeout value.\n * @param value { Number }\n */\nfunction isValidTimeoutValue(value) {\n    return typeof value === 'number' && value > 0;\n}\n//# sourceMappingURL=helpers.js.map"]},"metadata":{},"sourceType":"script"}