{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compareTopologyVersion = exports.parseServerType = exports.ServerDescription = void 0;\n\nconst bson_1 = require(\"../bson\");\n\nconst utils_1 = require(\"../utils\");\n\nconst common_1 = require(\"./common\");\n\nconst WRITABLE_SERVER_TYPES = new Set([common_1.ServerType.RSPrimary, common_1.ServerType.Standalone, common_1.ServerType.Mongos, common_1.ServerType.LoadBalancer]);\nconst DATA_BEARING_SERVER_TYPES = new Set([common_1.ServerType.RSPrimary, common_1.ServerType.RSSecondary, common_1.ServerType.Mongos, common_1.ServerType.Standalone, common_1.ServerType.LoadBalancer]);\n/**\n * The client's view of a single server, based on the most recent hello outcome.\n *\n * Internal type, not meant to be directly instantiated\n * @public\n */\n\nclass ServerDescription {\n  /**\n   * Create a ServerDescription\n   * @internal\n   *\n   * @param address - The address of the server\n   * @param hello - An optional hello response for this server\n   */\n  constructor(address, hello, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n\n    if (typeof address === 'string') {\n      this._hostAddress = new utils_1.HostAddress(address);\n      this.address = this._hostAddress.toString();\n    } else {\n      this._hostAddress = address;\n      this.address = this._hostAddress.toString();\n    }\n\n    this.type = parseServerType(hello, options);\n    this.hosts = (_b = (_a = hello === null || hello === void 0 ? void 0 : hello.hosts) === null || _a === void 0 ? void 0 : _a.map(host => host.toLowerCase())) !== null && _b !== void 0 ? _b : [];\n    this.passives = (_d = (_c = hello === null || hello === void 0 ? void 0 : hello.passives) === null || _c === void 0 ? void 0 : _c.map(host => host.toLowerCase())) !== null && _d !== void 0 ? _d : [];\n    this.arbiters = (_f = (_e = hello === null || hello === void 0 ? void 0 : hello.arbiters) === null || _e === void 0 ? void 0 : _e.map(host => host.toLowerCase())) !== null && _f !== void 0 ? _f : [];\n    this.tags = (_g = hello === null || hello === void 0 ? void 0 : hello.tags) !== null && _g !== void 0 ? _g : {};\n    this.minWireVersion = (_h = hello === null || hello === void 0 ? void 0 : hello.minWireVersion) !== null && _h !== void 0 ? _h : 0;\n    this.maxWireVersion = (_j = hello === null || hello === void 0 ? void 0 : hello.maxWireVersion) !== null && _j !== void 0 ? _j : 0;\n    this.roundTripTime = (_k = options === null || options === void 0 ? void 0 : options.roundTripTime) !== null && _k !== void 0 ? _k : -1;\n    this.lastUpdateTime = (0, utils_1.now)();\n    this.lastWriteDate = (_m = (_l = hello === null || hello === void 0 ? void 0 : hello.lastWrite) === null || _l === void 0 ? void 0 : _l.lastWriteDate) !== null && _m !== void 0 ? _m : 0;\n\n    if (options === null || options === void 0 ? void 0 : options.topologyVersion) {\n      this.topologyVersion = options.topologyVersion;\n    } else if (hello === null || hello === void 0 ? void 0 : hello.topologyVersion) {\n      this.topologyVersion = hello.topologyVersion;\n    }\n\n    if (options === null || options === void 0 ? void 0 : options.error) {\n      this.error = options.error;\n    }\n\n    if (hello === null || hello === void 0 ? void 0 : hello.primary) {\n      this.primary = hello.primary;\n    }\n\n    if (hello === null || hello === void 0 ? void 0 : hello.me) {\n      this.me = hello.me.toLowerCase();\n    }\n\n    if (hello === null || hello === void 0 ? void 0 : hello.setName) {\n      this.setName = hello.setName;\n    }\n\n    if (hello === null || hello === void 0 ? void 0 : hello.setVersion) {\n      this.setVersion = hello.setVersion;\n    }\n\n    if (hello === null || hello === void 0 ? void 0 : hello.electionId) {\n      this.electionId = hello.electionId;\n    }\n\n    if (hello === null || hello === void 0 ? void 0 : hello.logicalSessionTimeoutMinutes) {\n      this.logicalSessionTimeoutMinutes = hello.logicalSessionTimeoutMinutes;\n    }\n\n    if (hello === null || hello === void 0 ? void 0 : hello.$clusterTime) {\n      this.$clusterTime = hello.$clusterTime;\n    }\n  }\n\n  get hostAddress() {\n    if (this._hostAddress) return this._hostAddress;else return new utils_1.HostAddress(this.address);\n  }\n\n  get allHosts() {\n    return this.hosts.concat(this.arbiters).concat(this.passives);\n  }\n  /** Is this server available for reads*/\n\n\n  get isReadable() {\n    return this.type === common_1.ServerType.RSSecondary || this.isWritable;\n  }\n  /** Is this server data bearing */\n\n\n  get isDataBearing() {\n    return DATA_BEARING_SERVER_TYPES.has(this.type);\n  }\n  /** Is this server available for writes */\n\n\n  get isWritable() {\n    return WRITABLE_SERVER_TYPES.has(this.type);\n  }\n\n  get host() {\n    const chopLength = `:${this.port}`.length;\n    return this.address.slice(0, -chopLength);\n  }\n\n  get port() {\n    const port = this.address.split(':').pop();\n    return port ? Number.parseInt(port, 10) : 27017;\n  }\n  /**\n   * Determines if another `ServerDescription` is equal to this one per the rules defined\n   * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n   */\n\n\n  equals(other) {\n    const topologyVersionsEqual = this.topologyVersion === other.topologyVersion || compareTopologyVersion(this.topologyVersion, other.topologyVersion) === 0;\n    const electionIdsEqual = this.electionId && other.electionId ? other.electionId && this.electionId.equals(other.electionId) : this.electionId === other.electionId;\n    return other != null && (0, utils_1.errorStrictEqual)(this.error, other.error) && this.type === other.type && this.minWireVersion === other.minWireVersion && (0, utils_1.arrayStrictEqual)(this.hosts, other.hosts) && tagsStrictEqual(this.tags, other.tags) && this.setName === other.setName && this.setVersion === other.setVersion && electionIdsEqual && this.primary === other.primary && this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes && topologyVersionsEqual;\n  }\n\n}\n\nexports.ServerDescription = ServerDescription; // Parses a `hello` message and determines the server type\n\nfunction parseServerType(hello, options) {\n  if (options === null || options === void 0 ? void 0 : options.loadBalanced) {\n    return common_1.ServerType.LoadBalancer;\n  }\n\n  if (!hello || !hello.ok) {\n    return common_1.ServerType.Unknown;\n  }\n\n  if (hello.isreplicaset) {\n    return common_1.ServerType.RSGhost;\n  }\n\n  if (hello.msg && hello.msg === 'isdbgrid') {\n    return common_1.ServerType.Mongos;\n  }\n\n  if (hello.setName) {\n    if (hello.hidden) {\n      return common_1.ServerType.RSOther;\n    } else if (hello.isWritablePrimary) {\n      return common_1.ServerType.RSPrimary;\n    } else if (hello.secondary) {\n      return common_1.ServerType.RSSecondary;\n    } else if (hello.arbiterOnly) {\n      return common_1.ServerType.RSArbiter;\n    } else {\n      return common_1.ServerType.RSOther;\n    }\n  }\n\n  return common_1.ServerType.Standalone;\n}\n\nexports.parseServerType = parseServerType;\n\nfunction tagsStrictEqual(tags, tags2) {\n  const tagsKeys = Object.keys(tags);\n  const tags2Keys = Object.keys(tags2);\n  return tagsKeys.length === tags2Keys.length && tagsKeys.every(key => tags2[key] === tags[key]);\n}\n/**\n * Compares two topology versions.\n *\n * @returns A negative number if `lhs` is older than `rhs`; positive if `lhs` is newer than `rhs`; 0 if they are equivalent.\n */\n\n\nfunction compareTopologyVersion(lhs, rhs) {\n  if (lhs == null || rhs == null) {\n    return -1;\n  }\n\n  if (lhs.processId.equals(rhs.processId)) {\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    const lhsCounter = bson_1.Long.isLong(lhs.counter) ? lhs.counter : bson_1.Long.fromNumber(lhs.counter);\n    const rhsCounter = bson_1.Long.isLong(rhs.counter) ? lhs.counter : bson_1.Long.fromNumber(rhs.counter);\n    return lhsCounter.compare(rhsCounter);\n  }\n\n  return -1;\n}\n\nexports.compareTopologyVersion = compareTopologyVersion;","map":{"version":3,"sources":["../../src/sdam/server_description.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.compareTopologyVersion = exports.parseServerType = exports.ServerDescription = void 0;\nconst bson_1 = require(\"../bson\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst WRITABLE_SERVER_TYPES = new Set([\n    common_1.ServerType.RSPrimary,\n    common_1.ServerType.Standalone,\n    common_1.ServerType.Mongos,\n    common_1.ServerType.LoadBalancer\n]);\nconst DATA_BEARING_SERVER_TYPES = new Set([\n    common_1.ServerType.RSPrimary,\n    common_1.ServerType.RSSecondary,\n    common_1.ServerType.Mongos,\n    common_1.ServerType.Standalone,\n    common_1.ServerType.LoadBalancer\n]);\n/**\n * The client's view of a single server, based on the most recent hello outcome.\n *\n * Internal type, not meant to be directly instantiated\n * @public\n */\nclass ServerDescription {\n    /**\n     * Create a ServerDescription\n     * @internal\n     *\n     * @param address - The address of the server\n     * @param hello - An optional hello response for this server\n     */\n    constructor(address, hello, options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        if (typeof address === 'string') {\n            this._hostAddress = new utils_1.HostAddress(address);\n            this.address = this._hostAddress.toString();\n        }\n        else {\n            this._hostAddress = address;\n            this.address = this._hostAddress.toString();\n        }\n        this.type = parseServerType(hello, options);\n        this.hosts = (_b = (_a = hello === null || hello === void 0 ? void 0 : hello.hosts) === null || _a === void 0 ? void 0 : _a.map((host) => host.toLowerCase())) !== null && _b !== void 0 ? _b : [];\n        this.passives = (_d = (_c = hello === null || hello === void 0 ? void 0 : hello.passives) === null || _c === void 0 ? void 0 : _c.map((host) => host.toLowerCase())) !== null && _d !== void 0 ? _d : [];\n        this.arbiters = (_f = (_e = hello === null || hello === void 0 ? void 0 : hello.arbiters) === null || _e === void 0 ? void 0 : _e.map((host) => host.toLowerCase())) !== null && _f !== void 0 ? _f : [];\n        this.tags = (_g = hello === null || hello === void 0 ? void 0 : hello.tags) !== null && _g !== void 0 ? _g : {};\n        this.minWireVersion = (_h = hello === null || hello === void 0 ? void 0 : hello.minWireVersion) !== null && _h !== void 0 ? _h : 0;\n        this.maxWireVersion = (_j = hello === null || hello === void 0 ? void 0 : hello.maxWireVersion) !== null && _j !== void 0 ? _j : 0;\n        this.roundTripTime = (_k = options === null || options === void 0 ? void 0 : options.roundTripTime) !== null && _k !== void 0 ? _k : -1;\n        this.lastUpdateTime = (0, utils_1.now)();\n        this.lastWriteDate = (_m = (_l = hello === null || hello === void 0 ? void 0 : hello.lastWrite) === null || _l === void 0 ? void 0 : _l.lastWriteDate) !== null && _m !== void 0 ? _m : 0;\n        if (options === null || options === void 0 ? void 0 : options.topologyVersion) {\n            this.topologyVersion = options.topologyVersion;\n        }\n        else if (hello === null || hello === void 0 ? void 0 : hello.topologyVersion) {\n            this.topologyVersion = hello.topologyVersion;\n        }\n        if (options === null || options === void 0 ? void 0 : options.error) {\n            this.error = options.error;\n        }\n        if (hello === null || hello === void 0 ? void 0 : hello.primary) {\n            this.primary = hello.primary;\n        }\n        if (hello === null || hello === void 0 ? void 0 : hello.me) {\n            this.me = hello.me.toLowerCase();\n        }\n        if (hello === null || hello === void 0 ? void 0 : hello.setName) {\n            this.setName = hello.setName;\n        }\n        if (hello === null || hello === void 0 ? void 0 : hello.setVersion) {\n            this.setVersion = hello.setVersion;\n        }\n        if (hello === null || hello === void 0 ? void 0 : hello.electionId) {\n            this.electionId = hello.electionId;\n        }\n        if (hello === null || hello === void 0 ? void 0 : hello.logicalSessionTimeoutMinutes) {\n            this.logicalSessionTimeoutMinutes = hello.logicalSessionTimeoutMinutes;\n        }\n        if (hello === null || hello === void 0 ? void 0 : hello.$clusterTime) {\n            this.$clusterTime = hello.$clusterTime;\n        }\n    }\n    get hostAddress() {\n        if (this._hostAddress)\n            return this._hostAddress;\n        else\n            return new utils_1.HostAddress(this.address);\n    }\n    get allHosts() {\n        return this.hosts.concat(this.arbiters).concat(this.passives);\n    }\n    /** Is this server available for reads*/\n    get isReadable() {\n        return this.type === common_1.ServerType.RSSecondary || this.isWritable;\n    }\n    /** Is this server data bearing */\n    get isDataBearing() {\n        return DATA_BEARING_SERVER_TYPES.has(this.type);\n    }\n    /** Is this server available for writes */\n    get isWritable() {\n        return WRITABLE_SERVER_TYPES.has(this.type);\n    }\n    get host() {\n        const chopLength = `:${this.port}`.length;\n        return this.address.slice(0, -chopLength);\n    }\n    get port() {\n        const port = this.address.split(':').pop();\n        return port ? Number.parseInt(port, 10) : 27017;\n    }\n    /**\n     * Determines if another `ServerDescription` is equal to this one per the rules defined\n     * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n     */\n    equals(other) {\n        const topologyVersionsEqual = this.topologyVersion === other.topologyVersion ||\n            compareTopologyVersion(this.topologyVersion, other.topologyVersion) === 0;\n        const electionIdsEqual = this.electionId && other.electionId\n            ? other.electionId && this.electionId.equals(other.electionId)\n            : this.electionId === other.electionId;\n        return (other != null &&\n            (0, utils_1.errorStrictEqual)(this.error, other.error) &&\n            this.type === other.type &&\n            this.minWireVersion === other.minWireVersion &&\n            (0, utils_1.arrayStrictEqual)(this.hosts, other.hosts) &&\n            tagsStrictEqual(this.tags, other.tags) &&\n            this.setName === other.setName &&\n            this.setVersion === other.setVersion &&\n            electionIdsEqual &&\n            this.primary === other.primary &&\n            this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes &&\n            topologyVersionsEqual);\n    }\n}\nexports.ServerDescription = ServerDescription;\n// Parses a `hello` message and determines the server type\nfunction parseServerType(hello, options) {\n    if (options === null || options === void 0 ? void 0 : options.loadBalanced) {\n        return common_1.ServerType.LoadBalancer;\n    }\n    if (!hello || !hello.ok) {\n        return common_1.ServerType.Unknown;\n    }\n    if (hello.isreplicaset) {\n        return common_1.ServerType.RSGhost;\n    }\n    if (hello.msg && hello.msg === 'isdbgrid') {\n        return common_1.ServerType.Mongos;\n    }\n    if (hello.setName) {\n        if (hello.hidden) {\n            return common_1.ServerType.RSOther;\n        }\n        else if (hello.isWritablePrimary) {\n            return common_1.ServerType.RSPrimary;\n        }\n        else if (hello.secondary) {\n            return common_1.ServerType.RSSecondary;\n        }\n        else if (hello.arbiterOnly) {\n            return common_1.ServerType.RSArbiter;\n        }\n        else {\n            return common_1.ServerType.RSOther;\n        }\n    }\n    return common_1.ServerType.Standalone;\n}\nexports.parseServerType = parseServerType;\nfunction tagsStrictEqual(tags, tags2) {\n    const tagsKeys = Object.keys(tags);\n    const tags2Keys = Object.keys(tags2);\n    return (tagsKeys.length === tags2Keys.length &&\n        tagsKeys.every((key) => tags2[key] === tags[key]));\n}\n/**\n * Compares two topology versions.\n *\n * @returns A negative number if `lhs` is older than `rhs`; positive if `lhs` is newer than `rhs`; 0 if they are equivalent.\n */\nfunction compareTopologyVersion(lhs, rhs) {\n    if (lhs == null || rhs == null) {\n        return -1;\n    }\n    if (lhs.processId.equals(rhs.processId)) {\n        // tests mock counter as just number, but in a real situation counter should always be a Long\n        const lhsCounter = bson_1.Long.isLong(lhs.counter) ? lhs.counter : bson_1.Long.fromNumber(lhs.counter);\n        const rhsCounter = bson_1.Long.isLong(rhs.counter) ? lhs.counter : bson_1.Long.fromNumber(rhs.counter);\n        return lhsCounter.compare(rhsCounter);\n    }\n    return -1;\n}\nexports.compareTopologyVersion = compareTopologyVersion;\n//# sourceMappingURL=server_description.js.map"]},"metadata":{},"sourceType":"script"}