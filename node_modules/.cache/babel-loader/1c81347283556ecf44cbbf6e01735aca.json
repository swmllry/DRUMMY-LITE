{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindCursor = exports.FLAGS = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst count_1 = require(\"../operations/count\");\n\nconst execute_operation_1 = require(\"../operations/execute_operation\");\n\nconst find_1 = require(\"../operations/find\");\n\nconst sort_1 = require(\"../sort\");\n\nconst utils_1 = require(\"../utils\");\n\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\n\n\nconst kFilter = Symbol('filter');\n/** @internal */\n\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\n\nconst kBuiltOptions = Symbol('builtOptions');\n/** @public Flags allowed for cursor */\n\nexports.FLAGS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\n/** @public */\n\nclass FindCursor extends abstract_cursor_1.AbstractCursor {\n  /** @internal */\n  constructor(client, namespace, filter) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(client, namespace, options);\n    this[kFilter] = filter || {};\n    this[kBuiltOptions] = options;\n\n    if (options.sort != null) {\n      this[kBuiltOptions].sort = (0, sort_1.formatSort)(options.sort);\n    }\n  }\n\n  clone() {\n    const clonedOptions = (0, utils_1.mergeOptions)({}, this[kBuiltOptions]);\n    delete clonedOptions.session;\n    return new FindCursor(this.client, this.namespace, this[kFilter], { ...clonedOptions\n    });\n  }\n\n  map(transform) {\n    return super.map(transform);\n  }\n  /** @internal */\n\n\n  _initialize(session, callback) {\n    const findOperation = new find_1.FindOperation(undefined, this.namespace, this[kFilter], { ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      session\n    });\n    (0, execute_operation_1.executeOperation)(this.client, findOperation, (err, response) => {\n      if (err || response == null) return callback(err); // TODO: We only need this for legacy queries that do not support `limit`, maybe\n      //       the value should only be saved in those cases.\n\n      if (response.cursor) {\n        this[kNumReturned] = response.cursor.firstBatch.length;\n      } else {\n        this[kNumReturned] = response.documents ? response.documents.length : 0;\n      } // TODO: NODE-2882\n\n\n      callback(undefined, {\n        server: findOperation.server,\n        session,\n        response\n      });\n    });\n  }\n  /** @internal */\n\n\n  _getMore(batchSize, callback) {\n    // NOTE: this is to support client provided limits in pre-command servers\n    const numReturned = this[kNumReturned];\n\n    if (numReturned) {\n      const limit = this[kBuiltOptions].limit;\n      batchSize = limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n\n      if (batchSize <= 0) {\n        return this.close(callback);\n      }\n    }\n\n    super._getMore(batchSize, (err, response) => {\n      if (err) return callback(err); // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n\n      if (response) {\n        this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n      }\n\n      callback(undefined, response);\n    });\n  }\n\n  count(options, callback) {\n    (0, utils_1.emitWarningOnce)('cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead ');\n\n    if (typeof options === 'boolean') {\n      throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n    }\n\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.namespace, this[kFilter], { ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      ...options\n    }), callback);\n  }\n\n  explain(verbosity, callback) {\n    if (typeof verbosity === 'function') callback = verbosity, verbosity = true;\n    if (verbosity == null) verbosity = true;\n    return (0, execute_operation_1.executeOperation)(this.client, new find_1.FindOperation(undefined, this.namespace, this[kFilter], { ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      explain: verbosity\n    }), callback);\n  }\n  /** Set the cursor query */\n\n\n  filter(filter) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kFilter] = filter;\n    return this;\n  }\n  /**\n   * Set the cursor hint\n   *\n   * @param hint - If specified, then the query system will only consider plans using the hinted index.\n   */\n\n\n  hint(hint) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].hint = hint;\n    return this;\n  }\n  /**\n   * Set the cursor min\n   *\n   * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n   */\n\n\n  min(min) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].min = min;\n    return this;\n  }\n  /**\n   * Set the cursor max\n   *\n   * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n   */\n\n\n  max(max) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].max = max;\n    return this;\n  }\n  /**\n   * Set the cursor returnKey.\n   * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n   * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n   *\n   * @param value - the returnKey value.\n   */\n\n\n  returnKey(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].returnKey = value;\n    return this;\n  }\n  /**\n   * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n   *\n   * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n   */\n\n\n  showRecordId(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].showRecordId = value;\n    return this;\n  }\n  /**\n   * Add a query modifier to the cursor query\n   *\n   * @param name - The query modifier (must start with $, such as $orderby etc)\n   * @param value - The modifier value.\n   */\n\n\n  addQueryModifier(name, value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n\n    if (name[0] !== '$') {\n      throw new error_1.MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n    } // Strip of the $\n\n\n    const field = name.substr(1); // NOTE: consider some TS magic for this\n\n    switch (field) {\n      case 'comment':\n        this[kBuiltOptions].comment = value;\n        break;\n\n      case 'explain':\n        this[kBuiltOptions].explain = value;\n        break;\n\n      case 'hint':\n        this[kBuiltOptions].hint = value;\n        break;\n\n      case 'max':\n        this[kBuiltOptions].max = value;\n        break;\n\n      case 'maxTimeMS':\n        this[kBuiltOptions].maxTimeMS = value;\n        break;\n\n      case 'min':\n        this[kBuiltOptions].min = value;\n        break;\n\n      case 'orderby':\n        this[kBuiltOptions].sort = (0, sort_1.formatSort)(value);\n        break;\n\n      case 'query':\n        this[kFilter] = value;\n        break;\n\n      case 'returnKey':\n        this[kBuiltOptions].returnKey = value;\n        break;\n\n      case 'showDiskLoc':\n        this[kBuiltOptions].showRecordId = value;\n        break;\n\n      default:\n        throw new error_1.MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n    }\n\n    return this;\n  }\n  /**\n   * Add a comment to the cursor query allowing for tracking the comment in the log.\n   *\n   * @param value - The comment attached to this query.\n   */\n\n\n  comment(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].comment = value;\n    return this;\n  }\n  /**\n   * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n   *\n   * @param value - Number of milliseconds to wait before aborting the tailed query.\n   */\n\n\n  maxAwaitTimeMS(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxAwaitTimeMS = value;\n    return this;\n  }\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n\n\n  maxTimeMS(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxTimeMS = value;\n    return this;\n  }\n  /**\n   * Add a project stage to the aggregation pipeline\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * By default chaining a projection to your cursor changes the returned type to the generic\n   * {@link Document} type.\n   * You should specify a parameterized type to have assertions on your final results.\n   *\n   * @example\n   * ```typescript\n   * // Best way\n   * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * // Flexible way\n   * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n   * ```\n   *\n   * @remarks\n   *\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling project,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n   *\n   * // or always use chaining and save the final cursor\n   *\n   * const cursor = coll.find().project<{ a: string }>({\n   *   _id: 0,\n   *   a: { $convert: { input: '$a', to: 'string' }\n   * }});\n   * ```\n   */\n\n\n  project(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].projection = value;\n    return this;\n  }\n  /**\n   * Sets the sort order of the cursor query.\n   *\n   * @param sort - The key or keys set for the sort.\n   * @param direction - The direction of the sorting (1 or -1).\n   */\n\n\n  sort(sort, direction) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n    }\n\n    this[kBuiltOptions].sort = (0, sort_1.formatSort)(sort, direction);\n    return this;\n  }\n  /**\n   * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n   *\n   * @remarks\n   * {@link https://docs.mongodb.com/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n   */\n\n\n  allowDiskUse() {\n    let allow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    (0, abstract_cursor_1.assertUninitialized)(this);\n\n    if (!this[kBuiltOptions].sort) {\n      throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n    } // As of 6.0 the default is true. This allows users to get back to the old behaviour.\n\n\n    if (!allow) {\n      this[kBuiltOptions].allowDiskUse = false;\n      return this;\n    }\n\n    this[kBuiltOptions].allowDiskUse = true;\n    return this;\n  }\n  /**\n   * Set the collation options for the cursor.\n   *\n   * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n   */\n\n\n  collation(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].collation = value;\n    return this;\n  }\n  /**\n   * Set the limit for the cursor.\n   *\n   * @param value - The limit for the cursor query.\n   */\n\n\n  limit(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n    }\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n    }\n\n    this[kBuiltOptions].limit = value;\n    return this;\n  }\n  /**\n   * Set the skip for the cursor.\n   *\n   * @param value - The skip for the cursor query.\n   */\n\n\n  skip(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n    }\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n    }\n\n    this[kBuiltOptions].skip = value;\n    return this;\n  }\n\n}\n\nexports.FindCursor = FindCursor;","map":{"version":3,"sources":["../../src/cursor/find_cursor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FindCursor = exports.FLAGS = void 0;\nconst error_1 = require(\"../error\");\nconst count_1 = require(\"../operations/count\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst find_1 = require(\"../operations/find\");\nconst sort_1 = require(\"../sort\");\nconst utils_1 = require(\"../utils\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\nconst kFilter = Symbol('filter');\n/** @internal */\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\nconst kBuiltOptions = Symbol('builtOptions');\n/** @public Flags allowed for cursor */\nexports.FLAGS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'exhaust',\n    'partial'\n];\n/** @public */\nclass FindCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */\n    constructor(client, namespace, filter, options = {}) {\n        super(client, namespace, options);\n        this[kFilter] = filter || {};\n        this[kBuiltOptions] = options;\n        if (options.sort != null) {\n            this[kBuiltOptions].sort = (0, sort_1.formatSort)(options.sort);\n        }\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this[kBuiltOptions]);\n        delete clonedOptions.session;\n        return new FindCursor(this.client, this.namespace, this[kFilter], {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */\n    _initialize(session, callback) {\n        const findOperation = new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            session\n        });\n        (0, execute_operation_1.executeOperation)(this.client, findOperation, (err, response) => {\n            if (err || response == null)\n                return callback(err);\n            // TODO: We only need this for legacy queries that do not support `limit`, maybe\n            //       the value should only be saved in those cases.\n            if (response.cursor) {\n                this[kNumReturned] = response.cursor.firstBatch.length;\n            }\n            else {\n                this[kNumReturned] = response.documents ? response.documents.length : 0;\n            }\n            // TODO: NODE-2882\n            callback(undefined, { server: findOperation.server, session, response });\n        });\n    }\n    /** @internal */\n    _getMore(batchSize, callback) {\n        // NOTE: this is to support client provided limits in pre-command servers\n        const numReturned = this[kNumReturned];\n        if (numReturned) {\n            const limit = this[kBuiltOptions].limit;\n            batchSize =\n                limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n            if (batchSize <= 0) {\n                return this.close(callback);\n            }\n        }\n        super._getMore(batchSize, (err, response) => {\n            if (err)\n                return callback(err);\n            // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n            if (response) {\n                this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n            }\n            callback(undefined, response);\n        });\n    }\n    count(options, callback) {\n        (0, utils_1.emitWarningOnce)('cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead ');\n        if (typeof options === 'boolean') {\n            throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n        }\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options !== null && options !== void 0 ? options : {};\n        return (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            ...options\n        }), callback);\n    }\n    explain(verbosity, callback) {\n        if (typeof verbosity === 'function')\n            (callback = verbosity), (verbosity = true);\n        if (verbosity == null)\n            verbosity = true;\n        return (0, execute_operation_1.executeOperation)(this.client, new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            explain: verbosity\n        }), callback);\n    }\n    /** Set the cursor query */\n    filter(filter) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kFilter] = filter;\n        return this;\n    }\n    /**\n     * Set the cursor hint\n     *\n     * @param hint - If specified, then the query system will only consider plans using the hinted index.\n     */\n    hint(hint) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].hint = hint;\n        return this;\n    }\n    /**\n     * Set the cursor min\n     *\n     * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     */\n    min(min) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].min = min;\n        return this;\n    }\n    /**\n     * Set the cursor max\n     *\n     * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n     */\n    max(max) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].max = max;\n        return this;\n    }\n    /**\n     * Set the cursor returnKey.\n     * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n     * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n     *\n     * @param value - the returnKey value.\n     */\n    returnKey(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].returnKey = value;\n        return this;\n    }\n    /**\n     * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n     *\n     * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     */\n    showRecordId(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].showRecordId = value;\n        return this;\n    }\n    /**\n     * Add a query modifier to the cursor query\n     *\n     * @param name - The query modifier (must start with $, such as $orderby etc)\n     * @param value - The modifier value.\n     */\n    addQueryModifier(name, value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (name[0] !== '$') {\n            throw new error_1.MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n        }\n        // Strip of the $\n        const field = name.substr(1);\n        // NOTE: consider some TS magic for this\n        switch (field) {\n            case 'comment':\n                this[kBuiltOptions].comment = value;\n                break;\n            case 'explain':\n                this[kBuiltOptions].explain = value;\n                break;\n            case 'hint':\n                this[kBuiltOptions].hint = value;\n                break;\n            case 'max':\n                this[kBuiltOptions].max = value;\n                break;\n            case 'maxTimeMS':\n                this[kBuiltOptions].maxTimeMS = value;\n                break;\n            case 'min':\n                this[kBuiltOptions].min = value;\n                break;\n            case 'orderby':\n                this[kBuiltOptions].sort = (0, sort_1.formatSort)(value);\n                break;\n            case 'query':\n                this[kFilter] = value;\n                break;\n            case 'returnKey':\n                this[kBuiltOptions].returnKey = value;\n                break;\n            case 'showDiskLoc':\n                this[kBuiltOptions].showRecordId = value;\n                break;\n            default:\n                throw new error_1.MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n        }\n        return this;\n    }\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     *\n     * @param value - The comment attached to this query.\n     */\n    comment(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].comment = value;\n        return this;\n    }\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n     *\n     * @param value - Number of milliseconds to wait before aborting the tailed query.\n     */\n    maxAwaitTimeMS(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n        }\n        this[kBuiltOptions].maxAwaitTimeMS = value;\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n        }\n        this[kBuiltOptions].maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic\n     * {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.find().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].projection = value;\n        return this;\n    }\n    /**\n     * Sets the sort order of the cursor query.\n     *\n     * @param sort - The key or keys set for the sort.\n     * @param direction - The direction of the sorting (1 or -1).\n     */\n    sort(sort, direction) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n        }\n        this[kBuiltOptions].sort = (0, sort_1.formatSort)(sort, direction);\n        return this;\n    }\n    /**\n     * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n     *\n     * @remarks\n     * {@link https://docs.mongodb.com/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n     */\n    allowDiskUse(allow = true) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (!this[kBuiltOptions].sort) {\n            throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n        }\n        // As of 6.0 the default is true. This allows users to get back to the old behaviour.\n        if (!allow) {\n            this[kBuiltOptions].allowDiskUse = false;\n            return this;\n        }\n        this[kBuiltOptions].allowDiskUse = true;\n        return this;\n    }\n    /**\n     * Set the collation options for the cursor.\n     *\n     * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n     */\n    collation(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].collation = value;\n        return this;\n    }\n    /**\n     * Set the limit for the cursor.\n     *\n     * @param value - The limit for the cursor query.\n     */\n    limit(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n        }\n        this[kBuiltOptions].limit = value;\n        return this;\n    }\n    /**\n     * Set the skip for the cursor.\n     *\n     * @param value - The skip for the cursor query.\n     */\n    skip(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n        }\n        this[kBuiltOptions].skip = value;\n        return this;\n    }\n}\nexports.FindCursor = FindCursor;\n//# sourceMappingURL=find_cursor.js.map"]},"metadata":{},"sourceType":"script"}