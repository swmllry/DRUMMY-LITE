{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DistinctOperation = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst utils_1 = require(\"../utils\");\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n/**\n * Return a list of distinct values for the given key across a collection.\n * @internal\n */\n\n\nclass DistinctOperation extends command_1.CommandOperation {\n  /**\n   * Construct a Distinct operation.\n   *\n   * @param collection - Collection instance.\n   * @param key - Field of the document to find distinct values for.\n   * @param query - The query for filtering the set of documents to which we apply the distinct filter.\n   * @param options - Optional settings. See Collection.prototype.distinct for a list of options.\n   */\n  constructor(collection, key, query, options) {\n    super(collection, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.collection = collection;\n    this.key = key;\n    this.query = query;\n  }\n\n  execute(server, session, callback) {\n    const coll = this.collection;\n    const key = this.key;\n    const query = this.query;\n    const options = this.options; // Distinct command\n\n    const cmd = {\n      distinct: coll.collectionName,\n      key: key,\n      query: query\n    }; // Add maxTimeMS if defined\n\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    } // Do we have a readConcern specified\n\n\n    (0, utils_1.decorateWithReadConcern)(cmd, coll, options); // Have we specified collation\n\n    try {\n      (0, utils_1.decorateWithCollation)(cmd, coll, options);\n    } catch (err) {\n      return callback(err);\n    }\n\n    if (this.explain && (0, utils_1.maxWireVersion)(server) < 4) {\n      callback(new error_1.MongoCompatibilityError(`Server ${server.name} does not support explain on distinct`));\n      return;\n    }\n\n    super.executeCommand(server, session, cmd, (err, result) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(undefined, this.explain ? result : result.values);\n    });\n  }\n\n}\n\nexports.DistinctOperation = DistinctOperation;\n(0, operation_1.defineAspects)(DistinctOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);","map":{"version":3,"sources":["../../src/operations/distinct.ts"],"names":[],"mappings":";;;;;;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAGA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAKA;;;AAGG;;;AACH,MAAa,iBAAb,SAAuC,SAAA,CAAA,gBAAvC,CAA8D;EAQ5D;;;;;;;AAOG;EACH,WAAA,CAAY,UAAZ,EAAoC,GAApC,EAAiD,KAAjD,EAAkE,OAAlE,EAA2F;IACzF,MAAM,UAAN,EAAkB,OAAlB;IAEA,KAAK,OAAL,GAAe,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAA,OAAA,GAAW,EAA1B;IACA,KAAK,UAAL,GAAkB,UAAlB;IACA,KAAK,GAAL,GAAW,GAAX;IACA,KAAK,KAAL,GAAa,KAAb;EACD;;EAEQ,OAAO,CACd,MADc,EAEd,OAFc,EAGd,QAHc,EAGW;IAEzB,MAAM,IAAI,GAAG,KAAK,UAAlB;IACA,MAAM,GAAG,GAAG,KAAK,GAAjB;IACA,MAAM,KAAK,GAAG,KAAK,KAAnB;IACA,MAAM,OAAO,GAAG,KAAK,OAArB,CALyB,CAOzB;;IACA,MAAM,GAAG,GAAa;MACpB,QAAQ,EAAE,IAAI,CAAC,cADK;MAEpB,GAAG,EAAE,GAFe;MAGpB,KAAK,EAAE;IAHa,CAAtB,CARyB,CAczB;;IACA,IAAI,OAAO,OAAO,CAAC,SAAf,KAA6B,QAAjC,EAA2C;MACzC,GAAG,CAAC,SAAJ,GAAgB,OAAO,CAAC,SAAxB;IACD,CAjBwB,CAmBzB;;;IACA,CAAA,GAAA,OAAA,CAAA,uBAAA,EAAwB,GAAxB,EAA6B,IAA7B,EAAmC,OAAnC,EApByB,CAsBzB;;IACA,IAAI;MACF,CAAA,GAAA,OAAA,CAAA,qBAAA,EAAsB,GAAtB,EAA2B,IAA3B,EAAiC,OAAjC;IACD,CAFD,CAEE,OAAO,GAAP,EAAY;MACZ,OAAO,QAAQ,CAAC,GAAD,CAAf;IACD;;IAED,IAAI,KAAK,OAAL,IAAgB,CAAA,GAAA,OAAA,CAAA,cAAA,EAAe,MAAf,IAAyB,CAA7C,EAAgD;MAC9C,QAAQ,CACN,IAAI,OAAA,CAAA,uBAAJ,CAA4B,UAAU,MAAM,CAAC,IAAI,uCAAjD,CADM,CAAR;MAGA;IACD;;IAED,MAAM,cAAN,CAAqB,MAArB,EAA6B,OAA7B,EAAsC,GAAtC,EAA2C,CAAC,GAAD,EAAM,MAAN,KAAgB;MACzD,IAAI,GAAJ,EAAS;QACP,QAAQ,CAAC,GAAD,CAAR;QACA;MACD;;MAED,QAAQ,CAAC,SAAD,EAAY,KAAK,OAAL,GAAe,MAAf,GAAwB,MAAM,CAAC,MAA3C,CAAR;IACD,CAPD;EAQD;;AAxE2D;;AAA9D,OAAA,CAAA,iBAAA,GAAA,iBAAA;AA2EA,CAAA,GAAA,WAAA,CAAA,aAAA,EAAc,iBAAd,EAAiC,CAAC,WAAA,CAAA,MAAA,CAAO,cAAR,EAAwB,WAAA,CAAA,MAAA,CAAO,SAA/B,EAA0C,WAAA,CAAA,MAAA,CAAO,WAAjD,CAAjC","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DistinctOperation = void 0;\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/**\n * Return a list of distinct values for the given key across a collection.\n * @internal\n */\nclass DistinctOperation extends command_1.CommandOperation {\n    /**\n     * Construct a Distinct operation.\n     *\n     * @param collection - Collection instance.\n     * @param key - Field of the document to find distinct values for.\n     * @param query - The query for filtering the set of documents to which we apply the distinct filter.\n     * @param options - Optional settings. See Collection.prototype.distinct for a list of options.\n     */\n    constructor(collection, key, query, options) {\n        super(collection, options);\n        this.options = options !== null && options !== void 0 ? options : {};\n        this.collection = collection;\n        this.key = key;\n        this.query = query;\n    }\n    execute(server, session, callback) {\n        const coll = this.collection;\n        const key = this.key;\n        const query = this.query;\n        const options = this.options;\n        // Distinct command\n        const cmd = {\n            distinct: coll.collectionName,\n            key: key,\n            query: query\n        };\n        // Add maxTimeMS if defined\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        // Do we have a readConcern specified\n        (0, utils_1.decorateWithReadConcern)(cmd, coll, options);\n        // Have we specified collation\n        try {\n            (0, utils_1.decorateWithCollation)(cmd, coll, options);\n        }\n        catch (err) {\n            return callback(err);\n        }\n        if (this.explain && (0, utils_1.maxWireVersion)(server) < 4) {\n            callback(new error_1.MongoCompatibilityError(`Server ${server.name} does not support explain on distinct`));\n            return;\n        }\n        super.executeCommand(server, session, cmd, (err, result) => {\n            if (err) {\n                callback(err);\n                return;\n            }\n            callback(undefined, this.explain ? result : result.values);\n        });\n    }\n}\nexports.DistinctOperation = DistinctOperation;\n(0, operation_1.defineAspects)(DistinctOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);\n//# sourceMappingURL=distinct.js.map"]},"metadata":{},"sourceType":"script"}