{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prepareDocs = exports.indexInformation = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst utils_1 = require(\"../utils\");\n\nfunction indexInformation(db, name, _optionsOrCallback, _callback) {\n  let options = _optionsOrCallback;\n  let callback = _callback;\n\n  if ('function' === typeof _optionsOrCallback) {\n    callback = _optionsOrCallback;\n    options = {};\n  } // If we specified full information\n\n\n  const full = options.full == null ? false : options.full;\n  let topology;\n\n  try {\n    topology = (0, utils_1.getTopology)(db);\n  } catch (error) {\n    return callback(error);\n  } // Did the user destroy the topology\n\n\n  if (topology.isDestroyed()) return callback(new error_1.MongoTopologyClosedError()); // Process all the results from the index command and collection\n\n  function processResults(indexes) {\n    // Contains all the information\n    const info = {}; // Process all the indexes\n\n    for (let i = 0; i < indexes.length; i++) {\n      const index = indexes[i]; // Let's unpack the object\n\n      info[index.name] = [];\n\n      for (const name in index.key) {\n        info[index.name].push([name, index.key[name]]);\n      }\n    }\n\n    return info;\n  } // Get the list of indexes of the specified collection\n\n\n  db.collection(name).listIndexes(options).toArray((err, indexes) => {\n    if (err) return callback(err);\n    if (!Array.isArray(indexes)) return callback(undefined, []);\n    if (full) return callback(undefined, indexes);\n    callback(undefined, processResults(indexes));\n  });\n}\n\nexports.indexInformation = indexInformation;\n\nfunction prepareDocs(coll, docs, options) {\n  var _a;\n\n  const forceServerObjectId = typeof options.forceServerObjectId === 'boolean' ? options.forceServerObjectId : (_a = coll.s.db.options) === null || _a === void 0 ? void 0 : _a.forceServerObjectId; // no need to modify the docs if server sets the ObjectId\n\n  if (forceServerObjectId === true) {\n    return docs;\n  }\n\n  return docs.map(doc => {\n    if (doc._id == null) {\n      doc._id = coll.s.pkFactory.createPk();\n    }\n\n    return doc;\n  });\n}\n\nexports.prepareDocs = prepareDocs;","map":{"version":3,"sources":["../../src/operations/common_functions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.prepareDocs = exports.indexInformation = void 0;\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nfunction indexInformation(db, name, _optionsOrCallback, _callback) {\n    let options = _optionsOrCallback;\n    let callback = _callback;\n    if ('function' === typeof _optionsOrCallback) {\n        callback = _optionsOrCallback;\n        options = {};\n    }\n    // If we specified full information\n    const full = options.full == null ? false : options.full;\n    let topology;\n    try {\n        topology = (0, utils_1.getTopology)(db);\n    }\n    catch (error) {\n        return callback(error);\n    }\n    // Did the user destroy the topology\n    if (topology.isDestroyed())\n        return callback(new error_1.MongoTopologyClosedError());\n    // Process all the results from the index command and collection\n    function processResults(indexes) {\n        // Contains all the information\n        const info = {};\n        // Process all the indexes\n        for (let i = 0; i < indexes.length; i++) {\n            const index = indexes[i];\n            // Let's unpack the object\n            info[index.name] = [];\n            for (const name in index.key) {\n                info[index.name].push([name, index.key[name]]);\n            }\n        }\n        return info;\n    }\n    // Get the list of indexes of the specified collection\n    db.collection(name)\n        .listIndexes(options)\n        .toArray((err, indexes) => {\n        if (err)\n            return callback(err);\n        if (!Array.isArray(indexes))\n            return callback(undefined, []);\n        if (full)\n            return callback(undefined, indexes);\n        callback(undefined, processResults(indexes));\n    });\n}\nexports.indexInformation = indexInformation;\nfunction prepareDocs(coll, docs, options) {\n    var _a;\n    const forceServerObjectId = typeof options.forceServerObjectId === 'boolean'\n        ? options.forceServerObjectId\n        : (_a = coll.s.db.options) === null || _a === void 0 ? void 0 : _a.forceServerObjectId;\n    // no need to modify the docs if server sets the ObjectId\n    if (forceServerObjectId === true) {\n        return docs;\n    }\n    return docs.map(doc => {\n        if (doc._id == null) {\n            doc._id = coll.s.pkFactory.createPk();\n        }\n        return doc;\n    });\n}\nexports.prepareDocs = prepareDocs;\n//# sourceMappingURL=common_functions.js.map"]},"metadata":{},"sourceType":"script"}