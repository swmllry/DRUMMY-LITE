{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Server = void 0;\n\nconst connection_1 = require(\"../cmap/connection\");\n\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\n\nconst constants_1 = require(\"../constants\");\n\nconst error_1 = require(\"../error\");\n\nconst logger_1 = require(\"../logger\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst transactions_1 = require(\"../transactions\");\n\nconst utils_1 = require(\"../utils\");\n\nconst common_1 = require(\"./common\");\n\nconst monitor_1 = require(\"./monitor\");\n\nconst server_description_1 = require(\"./server_description\");\n\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\n\nconst kMonitor = Symbol('monitor');\n/** @internal */\n\nclass Server extends mongo_types_1.TypedEventEmitter {\n  /**\n   * Create a server\n   */\n  constructor(topology, description, options) {\n    super();\n    this.serverApi = options.serverApi;\n    const poolOptions = {\n      hostAddress: description.hostAddress,\n      ...options\n    };\n    this.s = {\n      description,\n      options,\n      logger: new logger_1.Logger('Server'),\n      state: common_1.STATE_CLOSED,\n      topology,\n      pool: new connection_pool_1.ConnectionPool(poolOptions),\n      operationCount: 0\n    };\n\n    for (const event of [...constants_1.CMAP_EVENTS, ...constants_1.APM_EVENTS]) {\n      this.s.pool.on(event, e => this.emit(event, e));\n    }\n\n    this.s.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, clusterTime => {\n      this.clusterTime = clusterTime;\n    });\n\n    if (this.loadBalanced) {\n      this[kMonitor] = null; // monitoring is disabled in load balancing mode\n\n      return;\n    } // create the monitor\n    // TODO(NODE-4144): Remove new variable for type narrowing\n\n\n    const monitor = new monitor_1.Monitor(this, this.s.options);\n    this[kMonitor] = monitor;\n\n    for (const event of constants_1.HEARTBEAT_EVENTS) {\n      monitor.on(event, e => this.emit(event, e));\n    }\n\n    monitor.on('resetConnectionPool', () => {\n      this.s.pool.clear();\n    });\n    monitor.on('resetServer', error => markServerUnknown(this, error));\n    monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, event => {\n      this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n        roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n      }));\n\n      if (this.s.state === common_1.STATE_CONNECTING) {\n        stateTransition(this, common_1.STATE_CONNECTED);\n        this.emit(Server.CONNECT, this);\n      }\n    });\n  }\n\n  get clusterTime() {\n    return this.s.topology.clusterTime;\n  }\n\n  set clusterTime(clusterTime) {\n    this.s.topology.clusterTime = clusterTime;\n  }\n\n  get description() {\n    return this.s.description;\n  }\n\n  get name() {\n    return this.s.description.address;\n  }\n\n  get autoEncrypter() {\n    if (this.s.options && this.s.options.autoEncrypter) {\n      return this.s.options.autoEncrypter;\n    }\n\n    return;\n  }\n\n  get loadBalanced() {\n    return this.s.topology.description.type === common_1.TopologyType.LoadBalanced;\n  }\n  /**\n   * Initiate server connect\n   */\n\n\n  connect() {\n    var _a;\n\n    if (this.s.state !== common_1.STATE_CLOSED) {\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CONNECTING); // If in load balancer mode we automatically set the server to\n    // a load balancer. It never transitions out of this state and\n    // has no monitor.\n\n    if (!this.loadBalanced) {\n      (_a = this[kMonitor]) === null || _a === void 0 ? void 0 : _a.connect();\n    } else {\n      stateTransition(this, common_1.STATE_CONNECTED);\n      this.emit(Server.CONNECT, this);\n    }\n  }\n  /** Destroy the server connection */\n\n\n  destroy(options, callback) {\n    var _a;\n\n    if (typeof options === 'function') callback = options, options = {};\n    options = Object.assign({}, {\n      force: false\n    }, options);\n\n    if (this.s.state === common_1.STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CLOSING);\n\n    if (!this.loadBalanced) {\n      (_a = this[kMonitor]) === null || _a === void 0 ? void 0 : _a.close();\n    }\n\n    this.s.pool.close(options, err => {\n      stateTransition(this, common_1.STATE_CLOSED);\n      this.emit('closed');\n\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n    });\n  }\n  /**\n   * Immediately schedule monitoring of this server. If there already an attempt being made\n   * this will be a no-op.\n   */\n\n\n  requestCheck() {\n    var _a;\n\n    if (!this.loadBalanced) {\n      (_a = this[kMonitor]) === null || _a === void 0 ? void 0 : _a.requestCheck();\n    }\n  }\n  /**\n   * Execute a command\n   * @internal\n   */\n\n\n  command(ns, cmd, options, callback) {\n    if (callback == null) {\n      throw new error_1.MongoInvalidArgumentError('Callback must be provided');\n    }\n\n    if (ns.db == null || typeof ns === 'string') {\n      throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n    }\n\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      callback(new error_1.MongoServerClosedError());\n      return;\n    } // Clone the options\n\n\n    const finalOptions = Object.assign({}, options, {\n      wireProtocolCommand: false\n    }); // There are cases where we need to flag the read preference not to get sent in\n    // the command, such as pre-5.0 servers attempting to perform an aggregate write\n    // with a non-primary read preference. In this case the effective read preference\n    // (primary) is not the same as the provided and must be removed completely.\n\n    if (finalOptions.omitReadPreference) {\n      delete finalOptions.readPreference;\n    } // error if collation not supported\n\n\n    if ((0, utils_1.collationNotSupported)(this, cmd)) {\n      callback(new error_1.MongoCompatibilityError(`Server ${this.name} does not support collation`));\n      return;\n    }\n\n    const session = finalOptions.session;\n    const conn = session === null || session === void 0 ? void 0 : session.pinnedConnection; // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n    //       (and prevent them from being checked back in) at the point of operation execution.\n    //       This should be considered as part of the work for NODE-2882\n    // NOTE:\n    //       When incrementing operation count, it's important that we increment it before we\n    //       attempt to check out a connection from the pool.  This ensures that operations that\n    //       are waiting for a connection are included in the operation count.  Load balanced\n    //       mode will only ever have a single server, so the operation count doesn't matter.\n    //       Incrementing the operation count above the logic to handle load balanced mode would\n    //       require special logic to decrement it again, or would double increment (the load\n    //       balanced code makes a recursive call).  Instead, we increment the count after this\n    //       check.\n\n    if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n      this.s.pool.checkOut((err, checkedOut) => {\n        if (err || checkedOut == null) {\n          if (callback) return callback(err);\n          return;\n        }\n\n        session.pin(checkedOut);\n        this.command(ns, cmd, finalOptions, callback);\n      });\n      return;\n    }\n\n    this.s.operationCount += 1;\n    this.s.pool.withConnection(conn, (err, conn, cb) => {\n      if (err || !conn) {\n        this.s.operationCount -= 1;\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.command(ns, cmd, finalOptions, makeOperationHandler(this, conn, cmd, finalOptions, (error, response) => {\n        this.s.operationCount -= 1;\n        cb(error, response);\n      }));\n    }, callback);\n  }\n\n}\n\nexports.Server = Server;\n/** @event */\n\nServer.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;\n/** @event */\n\nServer.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n/** @event */\n\nServer.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;\n/** @event */\n\nServer.CONNECT = constants_1.CONNECT;\n/** @event */\n\nServer.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;\n/** @event */\n\nServer.CLOSED = constants_1.CLOSED;\n/** @event */\n\nServer.ENDED = constants_1.ENDED;\n\nfunction calculateRoundTripTime(oldRtt, duration) {\n  if (oldRtt === -1) {\n    return duration;\n  }\n\n  const alpha = 0.2;\n  return alpha * duration + (1 - alpha) * oldRtt;\n}\n\nfunction markServerUnknown(server, error) {\n  var _a; // Load balancer servers can never be marked unknown.\n\n\n  if (server.loadBalanced) {\n    return;\n  }\n\n  if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n    (_a = server[kMonitor]) === null || _a === void 0 ? void 0 : _a.reset();\n  }\n\n  server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, {\n    error,\n    topologyVersion: error && error.topologyVersion ? error.topologyVersion : server.description.topologyVersion\n  }));\n}\n\nfunction isPinnableCommand(cmd, session) {\n  if (session) {\n    return session.inTransaction() || 'aggregate' in cmd || 'find' in cmd || 'getMore' in cmd || 'listCollections' in cmd || 'listIndexes' in cmd;\n  }\n\n  return false;\n}\n\nfunction connectionIsStale(pool, connection) {\n  if (connection.serviceId) {\n    return connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString());\n  }\n\n  return connection.generation !== pool.generation;\n}\n\nfunction shouldHandleStateChangeError(server, err) {\n  const etv = err.topologyVersion;\n  const stv = server.description.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;\n}\n\nfunction inActiveTransaction(session, cmd) {\n  return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\n\n\nfunction isRetryableWritesEnabled(topology) {\n  return topology.s.options.retryWrites !== false;\n}\n\nfunction makeOperationHandler(server, connection, cmd, options, callback) {\n  const session = options === null || options === void 0 ? void 0 : options.session;\n  return function handleOperationResult(error, result) {\n    if (result != null) {\n      return callback(undefined, result);\n    }\n\n    if (!error) {\n      return callback(new error_1.MongoUnexpectedServerResponseError('Empty response with no error'));\n    }\n\n    if (!(error instanceof error_1.MongoError)) {\n      // Node.js or some other error we have not special handling for\n      return callback(error);\n    }\n\n    if (connectionIsStale(server.s.pool, connection)) {\n      return callback(error);\n    }\n\n    if (error instanceof error_1.MongoNetworkError) {\n      if (session && !session.hasEnded && session.serverSession) {\n        session.serverSession.isDirty = true;\n      } // inActiveTransaction check handles commit and abort.\n\n\n      if (inActiveTransaction(session, cmd) && !error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.TransientTransactionError);\n      }\n\n      if ((isRetryableWritesEnabled(server.s.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, utils_1.supportsRetryableWrites)(server) && !inActiveTransaction(session, cmd)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n      }\n\n      if (!(error instanceof error_1.MongoNetworkTimeoutError) || (0, error_1.isNetworkErrorBeforeHandshake)(error)) {\n        // In load balanced mode we never mark the server as unknown and always\n        // clear for the specific service id.\n        server.s.pool.clear(connection.serviceId);\n\n        if (!server.loadBalanced) {\n          markServerUnknown(server, error);\n        }\n      }\n    } else {\n      if ((isRetryableWritesEnabled(server.s.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, error_1.needsRetryableWriteLabel)(error, (0, utils_1.maxWireVersion)(server)) && !inActiveTransaction(session, cmd)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n      }\n\n      if ((0, error_1.isSDAMUnrecoverableError)(error)) {\n        if (shouldHandleStateChangeError(server, error)) {\n          if ((0, utils_1.maxWireVersion)(server) <= 7 || (0, error_1.isNodeShuttingDownError)(error)) {\n            server.s.pool.clear(connection.serviceId);\n          }\n\n          if (!server.loadBalanced) {\n            markServerUnknown(server, error);\n            process.nextTick(() => server.requestCheck());\n          }\n        }\n      }\n    }\n\n    if (session && session.isPinned && error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n      session.unpin({\n        force: true\n      });\n    }\n\n    return callback(error);\n  };\n}","map":{"version":3,"sources":["../../src/sdam/server.ts"],"names":[],"mappings":";;;;;;;AACA,MAAA,YAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,MAAA,iBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAKA,MAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAaA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAcA,MAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,MAAA,aAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAEA,MAAA,cAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AASA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAaA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,MAAA,oBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AAGA,MAAM,eAAe,GAAG,CAAA,GAAA,OAAA,CAAA,gBAAA,EAAiB;EACvC,CAAC,QAAA,CAAA,YAAD,GAAgB,CAAC,QAAA,CAAA,YAAD,EAAe,QAAA,CAAA,gBAAf,CADuB;EAEvC,CAAC,QAAA,CAAA,gBAAD,GAAoB,CAAC,QAAA,CAAA,gBAAD,EAAmB,QAAA,CAAA,aAAnB,EAAkC,QAAA,CAAA,eAAlC,EAAmD,QAAA,CAAA,YAAnD,CAFmB;EAGvC,CAAC,QAAA,CAAA,eAAD,GAAmB,CAAC,QAAA,CAAA,eAAD,EAAkB,QAAA,CAAA,aAAlB,EAAiC,QAAA,CAAA,YAAjC,CAHoB;EAIvC,CAAC,QAAA,CAAA,aAAD,GAAiB,CAAC,QAAA,CAAA,aAAD,EAAgB,QAAA,CAAA,YAAhB;AAJsB,CAAjB,CAAxB;AAOA;;AACA,MAAM,QAAQ,GAAG,MAAM,CAAC,SAAD,CAAvB;AAuCA;;AACA,MAAa,MAAb,SAA4B,aAAA,CAAA,iBAA5B,CAA2D;EAsBzD;;AAEG;EACH,WAAA,CAAY,QAAZ,EAAgC,WAAhC,EAAgE,OAAhE,EAAsF;IACpF;IAEA,KAAK,SAAL,GAAiB,OAAO,CAAC,SAAzB;IAEA,MAAM,WAAW,GAAG;MAAE,WAAW,EAAE,WAAW,CAAC,WAA3B;MAAwC,GAAG;IAA3C,CAApB;IAEA,KAAK,CAAL,GAAS;MACP,WADO;MAEP,OAFO;MAGP,MAAM,EAAE,IAAI,QAAA,CAAA,MAAJ,CAAW,QAAX,CAHD;MAIP,KAAK,EAAE,QAAA,CAAA,YAJA;MAKP,QALO;MAMP,IAAI,EAAE,IAAI,iBAAA,CAAA,cAAJ,CAAmB,WAAnB,CANC;MAOP,cAAc,EAAE;IAPT,CAAT;;IAUA,KAAK,MAAM,KAAX,IAAoB,CAAC,GAAG,WAAA,CAAA,WAAJ,EAAiB,GAAG,WAAA,CAAA,UAApB,CAApB,EAAqD;MACnD,KAAK,CAAL,CAAO,IAAP,CAAY,EAAZ,CAAe,KAAf,EAAuB,CAAD,IAAY,KAAK,IAAL,CAAU,KAAV,EAAiB,CAAjB,CAAlC;IACD;;IAED,KAAK,CAAL,CAAO,IAAP,CAAY,EAAZ,CAAe,YAAA,CAAA,UAAA,CAAW,qBAA1B,EAAkD,WAAD,IAA6B;MAC5E,KAAK,WAAL,GAAmB,WAAnB;IACD,CAFD;;IAIA,IAAI,KAAK,YAAT,EAAuB;MACrB,KAAK,QAAL,IAAiB,IAAjB,CADqB,CAErB;;MACA;IACD,CA7BmF,CA+BpF;IACA;;;IACA,MAAM,OAAO,GAAG,IAAI,SAAA,CAAA,OAAJ,CAAY,IAAZ,EAAkB,KAAK,CAAL,CAAO,OAAzB,CAAhB;IACA,KAAK,QAAL,IAAiB,OAAjB;;IAEA,KAAK,MAAM,KAAX,IAAoB,WAAA,CAAA,gBAApB,EAAsC;MACpC,OAAO,CAAC,EAAR,CAAW,KAAX,EAAmB,CAAD,IAAY,KAAK,IAAL,CAAU,KAAV,EAAiB,CAAjB,CAA9B;IACD;;IAED,OAAO,CAAC,EAAR,CAAW,qBAAX,EAAkC,MAAK;MACrC,KAAK,CAAL,CAAO,IAAP,CAAY,KAAZ;IACD,CAFD;IAIA,OAAO,CAAC,EAAR,CAAW,aAAX,EAA2B,KAAD,IAAuB,iBAAiB,CAAC,IAAD,EAAO,KAAP,CAAlE;IACA,OAAO,CAAC,EAAR,CAAW,MAAM,CAAC,0BAAlB,EAA+C,KAAD,IAAyC;MACrF,KAAK,IAAL,CACE,MAAM,CAAC,oBADT,EAEE,IAAI,oBAAA,CAAA,iBAAJ,CAAsB,KAAK,WAAL,CAAiB,WAAvC,EAAoD,KAAK,CAAC,KAA1D,EAAiE;QAC/D,aAAa,EAAE,sBAAsB,CAAC,KAAK,WAAL,CAAiB,aAAlB,EAAiC,KAAK,CAAC,QAAvC;MAD0B,CAAjE,CAFF;;MAOA,IAAI,KAAK,CAAL,CAAO,KAAP,KAAiB,QAAA,CAAA,gBAArB,EAAuC;QACrC,eAAe,CAAC,IAAD,EAAO,QAAA,CAAA,eAAP,CAAf;QACA,KAAK,IAAL,CAAU,MAAM,CAAC,OAAjB,EAA0B,IAA1B;MACD;IACF,CAZD;EAaD;;EAEc,IAAX,WAAW,GAAA;IACb,OAAO,KAAK,CAAL,CAAO,QAAP,CAAgB,WAAvB;EACD;;EAEc,IAAX,WAAW,CAAC,WAAD,EAAqC;IAClD,KAAK,CAAL,CAAO,QAAP,CAAgB,WAAhB,GAA8B,WAA9B;EACD;;EAEc,IAAX,WAAW,GAAA;IACb,OAAO,KAAK,CAAL,CAAO,WAAd;EACD;;EAEO,IAAJ,IAAI,GAAA;IACN,OAAO,KAAK,CAAL,CAAO,WAAP,CAAmB,OAA1B;EACD;;EAEgB,IAAb,aAAa,GAAA;IACf,IAAI,KAAK,CAAL,CAAO,OAAP,IAAkB,KAAK,CAAL,CAAO,OAAP,CAAe,aAArC,EAAoD;MAClD,OAAO,KAAK,CAAL,CAAO,OAAP,CAAe,aAAtB;IACD;;IACD;EACD;;EAEe,IAAZ,YAAY,GAAA;IACd,OAAO,KAAK,CAAL,CAAO,QAAP,CAAgB,WAAhB,CAA4B,IAA5B,KAAqC,QAAA,CAAA,YAAA,CAAa,YAAzD;EACD;EAED;;AAEG;;;EACH,OAAO,GAAA;;;IACL,IAAI,KAAK,CAAL,CAAO,KAAP,KAAiB,QAAA,CAAA,YAArB,EAAmC;MACjC;IACD;;IAED,eAAe,CAAC,IAAD,EAAO,QAAA,CAAA,gBAAP,CAAf,CALK,CAOL;IACA;IACA;;IACA,IAAI,CAAC,KAAK,YAAV,EAAwB;MACtB,CAAA,EAAA,GAAA,KAAK,QAAL,CAAA,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAc,EAAA,CAAE,OAAF,EAAd;IACD,CAFD,MAEO;MACL,eAAe,CAAC,IAAD,EAAO,QAAA,CAAA,eAAP,CAAf;MACA,KAAK,IAAL,CAAU,MAAM,CAAC,OAAjB,EAA0B,IAA1B;IACD;EACF;EAED;;;EACA,OAAO,CAAC,OAAD,EAA2B,QAA3B,EAA8C;;;IACnD,IAAI,OAAO,OAAP,KAAmB,UAAvB,EAAoC,QAAQ,GAAG,OAAZ,EAAuB,OAAO,GAAG,EAAjC;IACnC,OAAO,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB;MAAE,KAAK,EAAE;IAAT,CAAlB,EAAoC,OAApC,CAAV;;IAEA,IAAI,KAAK,CAAL,CAAO,KAAP,KAAiB,QAAA,CAAA,YAArB,EAAmC;MACjC,IAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;QAClC,QAAQ;MACT;;MAED;IACD;;IAED,eAAe,CAAC,IAAD,EAAO,QAAA,CAAA,aAAP,CAAf;;IAEA,IAAI,CAAC,KAAK,YAAV,EAAwB;MACtB,CAAA,EAAA,GAAA,KAAK,QAAL,CAAA,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAc,EAAA,CAAE,KAAF,EAAd;IACD;;IAED,KAAK,CAAL,CAAO,IAAP,CAAY,KAAZ,CAAkB,OAAlB,EAA2B,GAAG,IAAG;MAC/B,eAAe,CAAC,IAAD,EAAO,QAAA,CAAA,YAAP,CAAf;MACA,KAAK,IAAL,CAAU,QAAV;;MACA,IAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;QAClC,QAAQ,CAAC,GAAD,CAAR;MACD;IACF,CAND;EAOD;EAED;;;AAGG;;;EACH,YAAY,GAAA;;;IACV,IAAI,CAAC,KAAK,YAAV,EAAwB;MACtB,CAAA,EAAA,GAAA,KAAK,QAAL,CAAA,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAc,EAAA,CAAE,YAAF,EAAd;IACD;EACF;EAED;;;AAGG;;;EACH,OAAO,CACL,EADK,EAEL,GAFK,EAGL,OAHK,EAIL,QAJK,EAIuB;IAE5B,IAAI,QAAQ,IAAI,IAAhB,EAAsB;MACpB,MAAM,IAAI,OAAA,CAAA,yBAAJ,CAA8B,2BAA9B,CAAN;IACD;;IAED,IAAI,EAAE,CAAC,EAAH,IAAS,IAAT,IAAiB,OAAO,EAAP,KAAc,QAAnC,EAA6C;MAC3C,MAAM,IAAI,OAAA,CAAA,yBAAJ,CAA8B,gCAA9B,CAAN;IACD;;IAED,IAAI,KAAK,CAAL,CAAO,KAAP,KAAiB,QAAA,CAAA,aAAjB,IAAkC,KAAK,CAAL,CAAO,KAAP,KAAiB,QAAA,CAAA,YAAvD,EAAqE;MACnE,QAAQ,CAAC,IAAI,OAAA,CAAA,sBAAJ,EAAD,CAAR;MACA;IACD,CAb2B,CAe5B;;;IACA,MAAM,YAAY,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,OAAlB,EAA2B;MAAE,mBAAmB,EAAE;IAAvB,CAA3B,CAArB,CAhB4B,CAkB5B;IACA;IACA;IACA;;IACA,IAAI,YAAY,CAAC,kBAAjB,EAAqC;MACnC,OAAO,YAAY,CAAC,cAApB;IACD,CAxB2B,CA0B5B;;;IACA,IAAI,CAAA,GAAA,OAAA,CAAA,qBAAA,EAAsB,IAAtB,EAA4B,GAA5B,CAAJ,EAAsC;MACpC,QAAQ,CAAC,IAAI,OAAA,CAAA,uBAAJ,CAA4B,UAAU,KAAK,IAAI,6BAA/C,CAAD,CAAR;MACA;IACD;;IAED,MAAM,OAAO,GAAG,YAAY,CAAC,OAA7B;IACA,MAAM,IAAI,GAAG,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,gBAAtB,CAjC4B,CAmC5B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IACA,IAAI,KAAK,YAAL,IAAqB,OAArB,IAAgC,IAAI,IAAI,IAAxC,IAAgD,iBAAiB,CAAC,GAAD,EAAM,OAAN,CAArE,EAAqF;MACnF,KAAK,CAAL,CAAO,IAAP,CAAY,QAAZ,CAAqB,CAAC,GAAD,EAAM,UAAN,KAAoB;QACvC,IAAI,GAAG,IAAI,UAAU,IAAI,IAAzB,EAA+B;UAC7B,IAAI,QAAJ,EAAc,OAAO,QAAQ,CAAC,GAAD,CAAf;UACd;QACD;;QAED,OAAO,CAAC,GAAR,CAAY,UAAZ;QACA,KAAK,OAAL,CAAa,EAAb,EAAiB,GAAjB,EAAsB,YAAtB,EAAoC,QAApC;MACD,CARD;MASA;IACD;;IAED,KAAK,CAAL,CAAO,cAAP,IAAyB,CAAzB;IAEA,KAAK,CAAL,CAAO,IAAP,CAAY,cAAZ,CACE,IADF,EAEE,CAAC,GAAD,EAAM,IAAN,EAAY,EAAZ,KAAkB;MAChB,IAAI,GAAG,IAAI,CAAC,IAAZ,EAAkB;QAChB,KAAK,CAAL,CAAO,cAAP,IAAyB,CAAzB;QACA,iBAAiB,CAAC,IAAD,EAAO,GAAP,CAAjB;QACA,OAAO,EAAE,CAAC,GAAD,CAAT;MACD;;MAED,IAAI,CAAC,OAAL,CACE,EADF,EAEE,GAFF,EAGE,YAHF,EAIE,oBAAoB,CAAC,IAAD,EAAO,IAAP,EAAa,GAAb,EAAkB,YAAlB,EAAgC,CAAC,KAAD,EAAQ,QAAR,KAAoB;QACtE,KAAK,CAAL,CAAO,cAAP,IAAyB,CAAzB;QACA,EAAE,CAAC,KAAD,EAAQ,QAAR,CAAF;MACD,CAHmB,CAJtB;IASD,CAlBH,EAmBE,QAnBF;EAqBD;;AAtQwD;;AAA3D,OAAA,CAAA,MAAA,GAAA,MAAA;AAOE;;AACgB,MAAA,CAAA,wBAAA,GAA2B,WAAA,CAAA,wBAA3B;AAChB;;AACgB,MAAA,CAAA,0BAAA,GAA6B,WAAA,CAAA,0BAA7B;AAChB;;AACgB,MAAA,CAAA,uBAAA,GAA0B,WAAA,CAAA,uBAA1B;AAChB;;AACgB,MAAA,CAAA,OAAA,GAAU,WAAA,CAAA,OAAV;AAChB;;AACgB,MAAA,CAAA,oBAAA,GAAuB,WAAA,CAAA,oBAAvB;AAChB;;AACgB,MAAA,CAAA,MAAA,GAAS,WAAA,CAAA,MAAT;AAChB;;AACgB,MAAA,CAAA,KAAA,GAAQ,WAAA,CAAA,KAAR;;AAqPlB,SAAS,sBAAT,CAAgC,MAAhC,EAAgD,QAAhD,EAAgE;EAC9D,IAAI,MAAM,KAAK,CAAC,CAAhB,EAAmB;IACjB,OAAO,QAAP;EACD;;EAED,MAAM,KAAK,GAAG,GAAd;EACA,OAAO,KAAK,GAAG,QAAR,GAAmB,CAAC,IAAI,KAAL,IAAc,MAAxC;AACD;;AAED,SAAS,iBAAT,CAA2B,MAA3B,EAA2C,KAA3C,EAA6D;SAAA,CAC3D;;;EACA,IAAI,MAAM,CAAC,YAAX,EAAyB;IACvB;EACD;;EAED,IAAI,KAAK,YAAY,OAAA,CAAA,iBAAjB,IAAsC,EAAE,KAAK,YAAY,OAAA,CAAA,wBAAnB,CAA1C,EAAwF;IACtF,CAAA,EAAA,GAAA,MAAM,CAAC,QAAD,CAAN,MAAgB,IAAhB,IAAgB,EAAA,KAAA,KAAA,CAAhB,GAAgB,KAAA,CAAhB,GAAgB,EAAA,CAAE,KAAF,EAAhB;EACD;;EAED,MAAM,CAAC,IAAP,CACE,MAAM,CAAC,oBADT,EAEE,IAAI,oBAAA,CAAA,iBAAJ,CAAsB,MAAM,CAAC,WAAP,CAAmB,WAAzC,EAAsD,SAAtD,EAAiE;IAC/D,KAD+D;IAE/D,eAAe,EACb,KAAK,IAAI,KAAK,CAAC,eAAf,GAAiC,KAAK,CAAC,eAAvC,GAAyD,MAAM,CAAC,WAAP,CAAmB;EAHf,CAAjE,CAFF;AAQD;;AAED,SAAS,iBAAT,CAA2B,GAA3B,EAA0C,OAA1C,EAAiE;EAC/D,IAAI,OAAJ,EAAa;IACX,OACE,OAAO,CAAC,aAAR,MACA,eAAe,GADf,IAEA,UAAU,GAFV,IAGA,aAAa,GAHb,IAIA,qBAAqB,GAJrB,IAKA,iBAAiB,GANnB;EAQD;;EAED,OAAO,KAAP;AACD;;AAED,SAAS,iBAAT,CAA2B,IAA3B,EAAiD,UAAjD,EAAuE;EACrE,IAAI,UAAU,CAAC,SAAf,EAA0B;IACxB,OACE,UAAU,CAAC,UAAX,KAA0B,IAAI,CAAC,kBAAL,CAAwB,GAAxB,CAA4B,UAAU,CAAC,SAAX,CAAqB,WAArB,EAA5B,CAD5B;EAGD;;EAED,OAAO,UAAU,CAAC,UAAX,KAA0B,IAAI,CAAC,UAAtC;AACD;;AAED,SAAS,4BAAT,CAAsC,MAAtC,EAAsD,GAAtD,EAAqE;EACnE,MAAM,GAAG,GAAG,GAAG,CAAC,eAAhB;EACA,MAAM,GAAG,GAAG,MAAM,CAAC,WAAP,CAAmB,eAA/B;EACA,OAAO,CAAA,GAAA,oBAAA,CAAA,sBAAA,EAAuB,GAAvB,EAA4B,GAA5B,IAAmC,CAA1C;AACD;;AAED,SAAS,mBAAT,CAA6B,OAA7B,EAAiE,GAAjE,EAA8E;EAC5E,OAAO,OAAO,IAAI,OAAO,CAAC,aAAR,EAAX,IAAsC,CAAC,CAAA,GAAA,cAAA,CAAA,oBAAA,EAAqB,GAArB,CAA9C;AACD;AAED;AAC4D;;;AAC5D,SAAS,wBAAT,CAAkC,QAAlC,EAAoD;EAClD,OAAO,QAAQ,CAAC,CAAT,CAAW,OAAX,CAAmB,WAAnB,KAAmC,KAA1C;AACD;;AAED,SAAS,oBAAT,CACE,MADF,EAEE,UAFF,EAGE,GAHF,EAIE,OAJF,EAKE,QALF,EAKoB;EAElB,MAAM,OAAO,GAAG,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,OAAzB;EACA,OAAO,SAAS,qBAAT,CAA+B,KAA/B,EAAsC,MAAtC,EAA4C;IACjD,IAAI,MAAM,IAAI,IAAd,EAAoB;MAClB,OAAO,QAAQ,CAAC,SAAD,EAAY,MAAZ,CAAf;IACD;;IAED,IAAI,CAAC,KAAL,EAAY;MACV,OAAO,QAAQ,CAAC,IAAI,OAAA,CAAA,kCAAJ,CAAuC,8BAAvC,CAAD,CAAf;IACD;;IAED,IAAI,EAAE,KAAK,YAAY,OAAA,CAAA,UAAnB,CAAJ,EAAoC;MAClC;MACA,OAAO,QAAQ,CAAC,KAAD,CAAf;IACD;;IAED,IAAI,iBAAiB,CAAC,MAAM,CAAC,CAAP,CAAS,IAAV,EAAgB,UAAhB,CAArB,EAAkD;MAChD,OAAO,QAAQ,CAAC,KAAD,CAAf;IACD;;IAED,IAAI,KAAK,YAAY,OAAA,CAAA,iBAArB,EAAwC;MACtC,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,QAApB,IAAgC,OAAO,CAAC,aAA5C,EAA2D;QACzD,OAAO,CAAC,aAAR,CAAsB,OAAtB,GAAgC,IAAhC;MACD,CAHqC,CAKtC;;;MACA,IACE,mBAAmB,CAAC,OAAD,EAAU,GAAV,CAAnB,IACA,CAAC,KAAK,CAAC,aAAN,CAAoB,OAAA,CAAA,eAAA,CAAgB,yBAApC,CAFH,EAGE;QACA,KAAK,CAAC,aAAN,CAAoB,OAAA,CAAA,eAAA,CAAgB,yBAApC;MACD;;MAED,IACE,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAP,CAAS,QAAV,CAAxB,IAA+C,CAAA,GAAA,cAAA,CAAA,oBAAA,EAAqB,GAArB,CAAhD,KACA,CAAA,GAAA,OAAA,CAAA,uBAAA,EAAwB,MAAxB,CADA,IAEA,CAAC,mBAAmB,CAAC,OAAD,EAAU,GAAV,CAHtB,EAIE;QACA,KAAK,CAAC,aAAN,CAAoB,OAAA,CAAA,eAAA,CAAgB,mBAApC;MACD;;MAED,IAAI,EAAE,KAAK,YAAY,OAAA,CAAA,wBAAnB,KAAgD,CAAA,GAAA,OAAA,CAAA,6BAAA,EAA8B,KAA9B,CAApD,EAA0F;QACxF;QACA;QAEA,MAAM,CAAC,CAAP,CAAS,IAAT,CAAc,KAAd,CAAoB,UAAU,CAAC,SAA/B;;QACA,IAAI,CAAC,MAAM,CAAC,YAAZ,EAA0B;UACxB,iBAAiB,CAAC,MAAD,EAAS,KAAT,CAAjB;QACD;MACF;IACF,CA9BD,MA8BO;MACL,IACE,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAP,CAAS,QAAV,CAAxB,IAA+C,CAAA,GAAA,cAAA,CAAA,oBAAA,EAAqB,GAArB,CAAhD,KACA,CAAA,GAAA,OAAA,CAAA,wBAAA,EAAyB,KAAzB,EAAgC,CAAA,GAAA,OAAA,CAAA,cAAA,EAAe,MAAf,CAAhC,CADA,IAEA,CAAC,mBAAmB,CAAC,OAAD,EAAU,GAAV,CAHtB,EAIE;QACA,KAAK,CAAC,aAAN,CAAoB,OAAA,CAAA,eAAA,CAAgB,mBAApC;MACD;;MAED,IAAI,CAAA,GAAA,OAAA,CAAA,wBAAA,EAAyB,KAAzB,CAAJ,EAAqC;QACnC,IAAI,4BAA4B,CAAC,MAAD,EAAS,KAAT,CAAhC,EAAiD;UAC/C,IAAI,CAAA,GAAA,OAAA,CAAA,cAAA,EAAe,MAAf,KAA0B,CAA1B,IAA+B,CAAA,GAAA,OAAA,CAAA,uBAAA,EAAwB,KAAxB,CAAnC,EAAmE;YACjE,MAAM,CAAC,CAAP,CAAS,IAAT,CAAc,KAAd,CAAoB,UAAU,CAAC,SAA/B;UACD;;UAED,IAAI,CAAC,MAAM,CAAC,YAAZ,EAA0B;YACxB,iBAAiB,CAAC,MAAD,EAAS,KAAT,CAAjB;YACA,OAAO,CAAC,QAAR,CAAiB,MAAM,MAAM,CAAC,YAAP,EAAvB;UACD;QACF;MACF;IACF;;IAED,IACE,OAAO,IACP,OAAO,CAAC,QADR,IAEA,KAAK,CAAC,aAAN,CAAoB,OAAA,CAAA,eAAA,CAAgB,yBAApC,CAHF,EAIE;MACA,OAAO,CAAC,KAAR,CAAc;QAAE,KAAK,EAAE;MAAT,CAAd;IACD;;IAED,OAAO,QAAQ,CAAC,KAAD,CAAf;EACD,CAhFD;AAiFD","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Server = void 0;\nconst connection_1 = require(\"../cmap/connection\");\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst logger_1 = require(\"../logger\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst transactions_1 = require(\"../transactions\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst monitor_1 = require(\"./monitor\");\nconst server_description_1 = require(\"./server_description\");\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n    [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n    [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kMonitor = Symbol('monitor');\n/** @internal */\nclass Server extends mongo_types_1.TypedEventEmitter {\n    /**\n     * Create a server\n     */\n    constructor(topology, description, options) {\n        super();\n        this.serverApi = options.serverApi;\n        const poolOptions = { hostAddress: description.hostAddress, ...options };\n        this.s = {\n            description,\n            options,\n            logger: new logger_1.Logger('Server'),\n            state: common_1.STATE_CLOSED,\n            topology,\n            pool: new connection_pool_1.ConnectionPool(poolOptions),\n            operationCount: 0\n        };\n        for (const event of [...constants_1.CMAP_EVENTS, ...constants_1.APM_EVENTS]) {\n            this.s.pool.on(event, (e) => this.emit(event, e));\n        }\n        this.s.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, (clusterTime) => {\n            this.clusterTime = clusterTime;\n        });\n        if (this.loadBalanced) {\n            this[kMonitor] = null;\n            // monitoring is disabled in load balancing mode\n            return;\n        }\n        // create the monitor\n        // TODO(NODE-4144): Remove new variable for type narrowing\n        const monitor = new monitor_1.Monitor(this, this.s.options);\n        this[kMonitor] = monitor;\n        for (const event of constants_1.HEARTBEAT_EVENTS) {\n            monitor.on(event, (e) => this.emit(event, e));\n        }\n        monitor.on('resetConnectionPool', () => {\n            this.s.pool.clear();\n        });\n        monitor.on('resetServer', (error) => markServerUnknown(this, error));\n        monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, (event) => {\n            this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n                roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n            }));\n            if (this.s.state === common_1.STATE_CONNECTING) {\n                stateTransition(this, common_1.STATE_CONNECTED);\n                this.emit(Server.CONNECT, this);\n            }\n        });\n    }\n    get clusterTime() {\n        return this.s.topology.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.s.topology.clusterTime = clusterTime;\n    }\n    get description() {\n        return this.s.description;\n    }\n    get name() {\n        return this.s.description.address;\n    }\n    get autoEncrypter() {\n        if (this.s.options && this.s.options.autoEncrypter) {\n            return this.s.options.autoEncrypter;\n        }\n        return;\n    }\n    get loadBalanced() {\n        return this.s.topology.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /**\n     * Initiate server connect\n     */\n    connect() {\n        var _a;\n        if (this.s.state !== common_1.STATE_CLOSED) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // If in load balancer mode we automatically set the server to\n        // a load balancer. It never transitions out of this state and\n        // has no monitor.\n        if (!this.loadBalanced) {\n            (_a = this[kMonitor]) === null || _a === void 0 ? void 0 : _a.connect();\n        }\n        else {\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Server.CONNECT, this);\n        }\n    }\n    /** Destroy the server connection */\n    destroy(options, callback) {\n        var _a;\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = Object.assign({}, { force: false }, options);\n        if (this.s.state === common_1.STATE_CLOSED) {\n            if (typeof callback === 'function') {\n                callback();\n            }\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        if (!this.loadBalanced) {\n            (_a = this[kMonitor]) === null || _a === void 0 ? void 0 : _a.close();\n        }\n        this.s.pool.close(options, err => {\n            stateTransition(this, common_1.STATE_CLOSED);\n            this.emit('closed');\n            if (typeof callback === 'function') {\n                callback(err);\n            }\n        });\n    }\n    /**\n     * Immediately schedule monitoring of this server. If there already an attempt being made\n     * this will be a no-op.\n     */\n    requestCheck() {\n        var _a;\n        if (!this.loadBalanced) {\n            (_a = this[kMonitor]) === null || _a === void 0 ? void 0 : _a.requestCheck();\n        }\n    }\n    /**\n     * Execute a command\n     * @internal\n     */\n    command(ns, cmd, options, callback) {\n        if (callback == null) {\n            throw new error_1.MongoInvalidArgumentError('Callback must be provided');\n        }\n        if (ns.db == null || typeof ns === 'string') {\n            throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n        }\n        if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n            callback(new error_1.MongoServerClosedError());\n            return;\n        }\n        // Clone the options\n        const finalOptions = Object.assign({}, options, { wireProtocolCommand: false });\n        // There are cases where we need to flag the read preference not to get sent in\n        // the command, such as pre-5.0 servers attempting to perform an aggregate write\n        // with a non-primary read preference. In this case the effective read preference\n        // (primary) is not the same as the provided and must be removed completely.\n        if (finalOptions.omitReadPreference) {\n            delete finalOptions.readPreference;\n        }\n        // error if collation not supported\n        if ((0, utils_1.collationNotSupported)(this, cmd)) {\n            callback(new error_1.MongoCompatibilityError(`Server ${this.name} does not support collation`));\n            return;\n        }\n        const session = finalOptions.session;\n        const conn = session === null || session === void 0 ? void 0 : session.pinnedConnection;\n        // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n        //       (and prevent them from being checked back in) at the point of operation execution.\n        //       This should be considered as part of the work for NODE-2882\n        // NOTE:\n        //       When incrementing operation count, it's important that we increment it before we\n        //       attempt to check out a connection from the pool.  This ensures that operations that\n        //       are waiting for a connection are included in the operation count.  Load balanced\n        //       mode will only ever have a single server, so the operation count doesn't matter.\n        //       Incrementing the operation count above the logic to handle load balanced mode would\n        //       require special logic to decrement it again, or would double increment (the load\n        //       balanced code makes a recursive call).  Instead, we increment the count after this\n        //       check.\n        if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n            this.s.pool.checkOut((err, checkedOut) => {\n                if (err || checkedOut == null) {\n                    if (callback)\n                        return callback(err);\n                    return;\n                }\n                session.pin(checkedOut);\n                this.command(ns, cmd, finalOptions, callback);\n            });\n            return;\n        }\n        this.s.operationCount += 1;\n        this.s.pool.withConnection(conn, (err, conn, cb) => {\n            if (err || !conn) {\n                this.s.operationCount -= 1;\n                markServerUnknown(this, err);\n                return cb(err);\n            }\n            conn.command(ns, cmd, finalOptions, makeOperationHandler(this, conn, cmd, finalOptions, (error, response) => {\n                this.s.operationCount -= 1;\n                cb(error, response);\n            }));\n        }, callback);\n    }\n}\nexports.Server = Server;\n/** @event */\nServer.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;\n/** @event */\nServer.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n/** @event */\nServer.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;\n/** @event */\nServer.CONNECT = constants_1.CONNECT;\n/** @event */\nServer.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;\n/** @event */\nServer.CLOSED = constants_1.CLOSED;\n/** @event */\nServer.ENDED = constants_1.ENDED;\nfunction calculateRoundTripTime(oldRtt, duration) {\n    if (oldRtt === -1) {\n        return duration;\n    }\n    const alpha = 0.2;\n    return alpha * duration + (1 - alpha) * oldRtt;\n}\nfunction markServerUnknown(server, error) {\n    var _a;\n    // Load balancer servers can never be marked unknown.\n    if (server.loadBalanced) {\n        return;\n    }\n    if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n        (_a = server[kMonitor]) === null || _a === void 0 ? void 0 : _a.reset();\n    }\n    server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, {\n        error,\n        topologyVersion: error && error.topologyVersion ? error.topologyVersion : server.description.topologyVersion\n    }));\n}\nfunction isPinnableCommand(cmd, session) {\n    if (session) {\n        return (session.inTransaction() ||\n            'aggregate' in cmd ||\n            'find' in cmd ||\n            'getMore' in cmd ||\n            'listCollections' in cmd ||\n            'listIndexes' in cmd);\n    }\n    return false;\n}\nfunction connectionIsStale(pool, connection) {\n    if (connection.serviceId) {\n        return (connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString()));\n    }\n    return connection.generation !== pool.generation;\n}\nfunction shouldHandleStateChangeError(server, err) {\n    const etv = err.topologyVersion;\n    const stv = server.description.topologyVersion;\n    return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;\n}\nfunction inActiveTransaction(session, cmd) {\n    return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology) {\n    return topology.s.options.retryWrites !== false;\n}\nfunction makeOperationHandler(server, connection, cmd, options, callback) {\n    const session = options === null || options === void 0 ? void 0 : options.session;\n    return function handleOperationResult(error, result) {\n        if (result != null) {\n            return callback(undefined, result);\n        }\n        if (!error) {\n            return callback(new error_1.MongoUnexpectedServerResponseError('Empty response with no error'));\n        }\n        if (!(error instanceof error_1.MongoError)) {\n            // Node.js or some other error we have not special handling for\n            return callback(error);\n        }\n        if (connectionIsStale(server.s.pool, connection)) {\n            return callback(error);\n        }\n        if (error instanceof error_1.MongoNetworkError) {\n            if (session && !session.hasEnded && session.serverSession) {\n                session.serverSession.isDirty = true;\n            }\n            // inActiveTransaction check handles commit and abort.\n            if (inActiveTransaction(session, cmd) &&\n                !error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.TransientTransactionError);\n            }\n            if ((isRetryableWritesEnabled(server.s.topology) || (0, transactions_1.isTransactionCommand)(cmd)) &&\n                (0, utils_1.supportsRetryableWrites)(server) &&\n                !inActiveTransaction(session, cmd)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n            }\n            if (!(error instanceof error_1.MongoNetworkTimeoutError) || (0, error_1.isNetworkErrorBeforeHandshake)(error)) {\n                // In load balanced mode we never mark the server as unknown and always\n                // clear for the specific service id.\n                server.s.pool.clear(connection.serviceId);\n                if (!server.loadBalanced) {\n                    markServerUnknown(server, error);\n                }\n            }\n        }\n        else {\n            if ((isRetryableWritesEnabled(server.s.topology) || (0, transactions_1.isTransactionCommand)(cmd)) &&\n                (0, error_1.needsRetryableWriteLabel)(error, (0, utils_1.maxWireVersion)(server)) &&\n                !inActiveTransaction(session, cmd)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n            }\n            if ((0, error_1.isSDAMUnrecoverableError)(error)) {\n                if (shouldHandleStateChangeError(server, error)) {\n                    if ((0, utils_1.maxWireVersion)(server) <= 7 || (0, error_1.isNodeShuttingDownError)(error)) {\n                        server.s.pool.clear(connection.serviceId);\n                    }\n                    if (!server.loadBalanced) {\n                        markServerUnknown(server, error);\n                        process.nextTick(() => server.requestCheck());\n                    }\n                }\n            }\n        }\n        if (session &&\n            session.isPinned &&\n            error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n            session.unpin({ force: true });\n        }\n        return callback(error);\n    };\n}\n//# sourceMappingURL=server.js.map"]},"metadata":{},"sourceType":"script"}