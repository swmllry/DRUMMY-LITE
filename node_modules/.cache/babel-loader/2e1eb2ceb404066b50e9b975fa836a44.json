{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoCredentials = void 0;\n\nconst error_1 = require(\"../../error\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst gssapi_1 = require(\"./gssapi\");\n\nconst providers_1 = require(\"./providers\"); // https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\n\n\nfunction getDefaultAuthMechanism(hello) {\n  if (hello) {\n    // If hello contains saslSupportedMechs, use scram-sha-256\n    // if it is available, else scram-sha-1\n    if (Array.isArray(hello.saslSupportedMechs)) {\n      return hello.saslSupportedMechs.includes(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA256 : providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n    } // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n\n\n    if (hello.maxWireVersion >= 3) {\n      return providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n  } // Default for wireprotocol < 3\n\n\n  return providers_1.AuthMechanism.MONGODB_CR;\n}\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\n\n\nclass MongoCredentials {\n  constructor(options) {\n    this.username = options.username;\n    this.password = options.password;\n    this.source = options.source;\n\n    if (!this.source && options.db) {\n      this.source = options.db;\n    }\n\n    this.mechanism = options.mechanism || providers_1.AuthMechanism.MONGODB_DEFAULT;\n    this.mechanismProperties = options.mechanismProperties || {};\n\n    if (this.mechanism.match(/MONGODB-AWS/i)) {\n      if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n        this.username = process.env.AWS_ACCESS_KEY_ID;\n      }\n\n      if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n        this.password = process.env.AWS_SECRET_ACCESS_KEY;\n      }\n\n      if (this.mechanismProperties.AWS_SESSION_TOKEN == null && process.env.AWS_SESSION_TOKEN != null) {\n        this.mechanismProperties = { ...this.mechanismProperties,\n          AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n        };\n      }\n    }\n\n    if ('gssapiCanonicalizeHostName' in this.mechanismProperties) {\n      (0, utils_1.emitWarningOnce)('gssapiCanonicalizeHostName is deprecated. Please use CANONICALIZE_HOST_NAME instead.');\n      this.mechanismProperties.CANONICALIZE_HOST_NAME = this.mechanismProperties.gssapiCanonicalizeHostName;\n    }\n\n    Object.freeze(this.mechanismProperties);\n    Object.freeze(this);\n  }\n  /** Determines if two MongoCredentials objects are equivalent */\n\n\n  equals(other) {\n    return this.mechanism === other.mechanism && this.username === other.username && this.password === other.password && this.source === other.source;\n  }\n  /**\n   * If the authentication mechanism is set to \"default\", resolves the authMechanism\n   * based on the server version and server supported sasl mechanisms.\n   *\n   * @param hello - A hello response from the server\n   */\n\n\n  resolveAuthMechanism(hello) {\n    // If the mechanism is not \"default\", then it does not need to be resolved\n    if (this.mechanism.match(/DEFAULT/i)) {\n      return new MongoCredentials({\n        username: this.username,\n        password: this.password,\n        source: this.source,\n        mechanism: getDefaultAuthMechanism(hello),\n        mechanismProperties: this.mechanismProperties\n      });\n    }\n\n    return this;\n  }\n\n  validate() {\n    var _a;\n\n    if ((this.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI || this.mechanism === providers_1.AuthMechanism.MONGODB_CR || this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 || this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) && !this.username) {\n      throw new error_1.MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n    }\n\n    if (providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\n      if (this.source != null && this.source !== '$external') {\n        // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n        throw new error_1.MongoAPIError(`Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`);\n      }\n    }\n\n    if (this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN && this.source == null) {\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n      throw new error_1.MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n    }\n\n    if (this.mechanism === providers_1.AuthMechanism.MONGODB_X509 && this.password != null) {\n      if (this.password === '') {\n        Reflect.set(this, 'password', undefined);\n        return;\n      } // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n\n\n      throw new error_1.MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n    }\n\n    const canonicalization = (_a = this.mechanismProperties.CANONICALIZE_HOST_NAME) !== null && _a !== void 0 ? _a : false;\n\n    if (!Object.values(gssapi_1.GSSAPICanonicalizationValue).includes(canonicalization)) {\n      throw new error_1.MongoAPIError(`Invalid CANONICALIZE_HOST_NAME value: ${canonicalization}`);\n    }\n  }\n\n  static merge(creds, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n\n    return new MongoCredentials({\n      username: (_b = (_a = options.username) !== null && _a !== void 0 ? _a : creds === null || creds === void 0 ? void 0 : creds.username) !== null && _b !== void 0 ? _b : '',\n      password: (_d = (_c = options.password) !== null && _c !== void 0 ? _c : creds === null || creds === void 0 ? void 0 : creds.password) !== null && _d !== void 0 ? _d : '',\n      mechanism: (_f = (_e = options.mechanism) !== null && _e !== void 0 ? _e : creds === null || creds === void 0 ? void 0 : creds.mechanism) !== null && _f !== void 0 ? _f : providers_1.AuthMechanism.MONGODB_DEFAULT,\n      mechanismProperties: (_h = (_g = options.mechanismProperties) !== null && _g !== void 0 ? _g : creds === null || creds === void 0 ? void 0 : creds.mechanismProperties) !== null && _h !== void 0 ? _h : {},\n      source: (_l = (_k = (_j = options.source) !== null && _j !== void 0 ? _j : options.db) !== null && _k !== void 0 ? _k : creds === null || creds === void 0 ? void 0 : creds.source) !== null && _l !== void 0 ? _l : 'admin'\n    });\n  }\n\n}\n\nexports.MongoCredentials = MongoCredentials;","map":{"version":3,"sources":["../../../src/cmap/auth/mongo_credentials.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoCredentials = void 0;\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst gssapi_1 = require(\"./gssapi\");\nconst providers_1 = require(\"./providers\");\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(hello) {\n    if (hello) {\n        // If hello contains saslSupportedMechs, use scram-sha-256\n        // if it is available, else scram-sha-1\n        if (Array.isArray(hello.saslSupportedMechs)) {\n            return hello.saslSupportedMechs.includes(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256)\n                ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA256\n                : providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n        }\n        // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n        if (hello.maxWireVersion >= 3) {\n            return providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n        }\n    }\n    // Default for wireprotocol < 3\n    return providers_1.AuthMechanism.MONGODB_CR;\n}\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\nclass MongoCredentials {\n    constructor(options) {\n        this.username = options.username;\n        this.password = options.password;\n        this.source = options.source;\n        if (!this.source && options.db) {\n            this.source = options.db;\n        }\n        this.mechanism = options.mechanism || providers_1.AuthMechanism.MONGODB_DEFAULT;\n        this.mechanismProperties = options.mechanismProperties || {};\n        if (this.mechanism.match(/MONGODB-AWS/i)) {\n            if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n                this.username = process.env.AWS_ACCESS_KEY_ID;\n            }\n            if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n                this.password = process.env.AWS_SECRET_ACCESS_KEY;\n            }\n            if (this.mechanismProperties.AWS_SESSION_TOKEN == null &&\n                process.env.AWS_SESSION_TOKEN != null) {\n                this.mechanismProperties = {\n                    ...this.mechanismProperties,\n                    AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n                };\n            }\n        }\n        if ('gssapiCanonicalizeHostName' in this.mechanismProperties) {\n            (0, utils_1.emitWarningOnce)('gssapiCanonicalizeHostName is deprecated. Please use CANONICALIZE_HOST_NAME instead.');\n            this.mechanismProperties.CANONICALIZE_HOST_NAME =\n                this.mechanismProperties.gssapiCanonicalizeHostName;\n        }\n        Object.freeze(this.mechanismProperties);\n        Object.freeze(this);\n    }\n    /** Determines if two MongoCredentials objects are equivalent */\n    equals(other) {\n        return (this.mechanism === other.mechanism &&\n            this.username === other.username &&\n            this.password === other.password &&\n            this.source === other.source);\n    }\n    /**\n     * If the authentication mechanism is set to \"default\", resolves the authMechanism\n     * based on the server version and server supported sasl mechanisms.\n     *\n     * @param hello - A hello response from the server\n     */\n    resolveAuthMechanism(hello) {\n        // If the mechanism is not \"default\", then it does not need to be resolved\n        if (this.mechanism.match(/DEFAULT/i)) {\n            return new MongoCredentials({\n                username: this.username,\n                password: this.password,\n                source: this.source,\n                mechanism: getDefaultAuthMechanism(hello),\n                mechanismProperties: this.mechanismProperties\n            });\n        }\n        return this;\n    }\n    validate() {\n        var _a;\n        if ((this.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_CR ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) &&\n            !this.username) {\n            throw new error_1.MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n        }\n        if (providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\n            if (this.source != null && this.source !== '$external') {\n                // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n                throw new error_1.MongoAPIError(`Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`);\n            }\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN && this.source == null) {\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_X509 && this.password != null) {\n            if (this.password === '') {\n                Reflect.set(this, 'password', undefined);\n                return;\n            }\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n        }\n        const canonicalization = (_a = this.mechanismProperties.CANONICALIZE_HOST_NAME) !== null && _a !== void 0 ? _a : false;\n        if (!Object.values(gssapi_1.GSSAPICanonicalizationValue).includes(canonicalization)) {\n            throw new error_1.MongoAPIError(`Invalid CANONICALIZE_HOST_NAME value: ${canonicalization}`);\n        }\n    }\n    static merge(creds, options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n        return new MongoCredentials({\n            username: (_b = (_a = options.username) !== null && _a !== void 0 ? _a : creds === null || creds === void 0 ? void 0 : creds.username) !== null && _b !== void 0 ? _b : '',\n            password: (_d = (_c = options.password) !== null && _c !== void 0 ? _c : creds === null || creds === void 0 ? void 0 : creds.password) !== null && _d !== void 0 ? _d : '',\n            mechanism: (_f = (_e = options.mechanism) !== null && _e !== void 0 ? _e : creds === null || creds === void 0 ? void 0 : creds.mechanism) !== null && _f !== void 0 ? _f : providers_1.AuthMechanism.MONGODB_DEFAULT,\n            mechanismProperties: (_h = (_g = options.mechanismProperties) !== null && _g !== void 0 ? _g : creds === null || creds === void 0 ? void 0 : creds.mechanismProperties) !== null && _h !== void 0 ? _h : {},\n            source: (_l = (_k = (_j = options.source) !== null && _j !== void 0 ? _j : options.db) !== null && _k !== void 0 ? _k : creds === null || creds === void 0 ? void 0 : creds.source) !== null && _l !== void 0 ? _l : 'admin'\n        });\n    }\n}\nexports.MongoCredentials = MongoCredentials;\n//# sourceMappingURL=mongo_credentials.js.map"]},"metadata":{},"sourceType":"script"}