{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChangeStream = void 0;\n\nconst util_1 = require(\"util\");\n\nconst collection_1 = require(\"./collection\");\n\nconst constants_1 = require(\"./constants\");\n\nconst change_stream_cursor_1 = require(\"./cursor/change_stream_cursor\");\n\nconst db_1 = require(\"./db\");\n\nconst error_1 = require(\"./error\");\n\nconst mongo_client_1 = require(\"./mongo_client\");\n\nconst mongo_types_1 = require(\"./mongo_types\");\n\nconst utils_1 = require(\"./utils\");\n/** @internal */\n\n\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\n\nconst kClosed = Symbol('closed');\n/** @internal */\n\nconst kMode = Symbol('mode');\nconst CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument', 'fullDocumentBeforeChange', 'showExpandedEvents'];\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\nconst CHANGE_STREAM_EVENTS = [constants_1.RESUME_TOKEN_CHANGED, constants_1.END, constants_1.CLOSE];\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\n\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  constructor(parent) {\n    let pipeline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super();\n    /**\n     * @internal\n     *\n     * TODO(NODE-4320): promisify selectServer and refactor this code to be async\n     *\n     * we promisify _processErrorIteratorModeCallback until we have a promisifed version of selectServer.\n     */\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n\n    this._processErrorIteratorMode = (0, util_1.promisify)(this._processErrorIteratorModeCallback);\n    this.pipeline = pipeline;\n    this.options = options;\n\n    if (parent instanceof collection_1.Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof db_1.Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof mongo_client_1.MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n    }\n\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n\n    if (!this.options.readPreference && parent.readPreference) {\n      this.options.readPreference = parent.readPreference;\n    } // Create contained Change Stream cursor\n\n\n    this.cursor = this._createChangeStreamCursor(options);\n    this[kClosed] = false;\n    this[kMode] = false; // Listen for any `change` listeners being added to ChangeStream\n\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        this._streamEvents(this.cursor);\n      }\n    });\n    this.on('removeListener', eventName => {\n      var _a;\n\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        (_a = this[kCursorStream]) === null || _a === void 0 ? void 0 : _a.removeAllListeners('data');\n      }\n    });\n  }\n  /** @internal */\n\n\n  get cursorStream() {\n    return this[kCursorStream];\n  }\n  /** The cached resume token that is used to resume after the most recently returned change. */\n\n\n  get resumeToken() {\n    var _a;\n\n    return (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.resumeToken;\n  }\n\n  hasNext(callback) {\n    this._setIsIterator(); // TOOD(NODE-4319): Add eslint rule preventing accidental variable shadowing\n    // Shadowing is intentional here.  We want to override the `callback` variable\n    // from the outer scope so that the inner scope doesn't accidentally call the wrong callback.\n\n\n    return (0, utils_1.maybePromise)(callback, callback => {\n      (async () => {\n        try {\n          const hasNext = await this.cursor.hasNext();\n          return hasNext;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error);\n            const hasNext = await this.cursor.hasNext();\n            return hasNext;\n          } catch (error) {\n            await this.close().catch(err => err);\n            throw error;\n          }\n        }\n      })().then(hasNext => callback(undefined, hasNext), error => callback(error));\n    });\n  }\n\n  next(callback) {\n    this._setIsIterator(); // TOOD(NODE-4319): Add eslint rule preventing accidental variable shadowing\n    // Shadowing is intentional here.  We want to override the `callback` variable\n    // from the outer scope so that the inner scope doesn't accidentally call the wrong callback.\n\n\n    return (0, utils_1.maybePromise)(callback, callback => {\n      (async () => {\n        try {\n          const change = await this.cursor.next();\n\n          const processedChange = this._processChange(change !== null && change !== void 0 ? change : null);\n\n          return processedChange;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error);\n            const change = await this.cursor.next();\n\n            const processedChange = this._processChange(change !== null && change !== void 0 ? change : null);\n\n            return processedChange;\n          } catch (error) {\n            await this.close().catch(err => err);\n            throw error;\n          }\n        }\n      })().then(change => callback(undefined, change), error => callback(error));\n    });\n  }\n\n  tryNext(callback) {\n    this._setIsIterator(); // TOOD(NODE-4319): Add eslint rule preventing accidental variable shadowing\n    // Shadowing is intentional here.  We want to override the `callback` variable\n    // from the outer scope so that the inner scope doesn't accidentally call the wrong callback.\n\n\n    return (0, utils_1.maybePromise)(callback, callback => {\n      (async () => {\n        try {\n          const change = await this.cursor.tryNext();\n          return change !== null && change !== void 0 ? change : null;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error);\n            const change = await this.cursor.tryNext();\n            return change !== null && change !== void 0 ? change : null;\n          } catch (error) {\n            await this.close().catch(err => err);\n            throw error;\n          }\n        }\n      })().then(change => callback(undefined, change), error => callback(error));\n    });\n  }\n  /** Is the cursor closed */\n\n\n  get closed() {\n    return this[kClosed] || this.cursor.closed;\n  }\n\n  close(callback) {\n    this[kClosed] = true;\n    return (0, utils_1.maybePromise)(callback, cb => {\n      const cursor = this.cursor;\n      return cursor.close(err => {\n        this._endStream();\n\n        return cb(err);\n      });\n    });\n  }\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   *\n   * NOTE: When using a Stream to process change stream events, the stream will\n   * NOT automatically resume in the case a resumable error is encountered.\n   *\n   * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n   */\n\n\n  stream(options) {\n    if (this.closed) {\n      throw new error_1.MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n    }\n\n    this.streamOptions = options;\n    return this.cursor.stream(options);\n  }\n  /** @internal */\n\n\n  _setIsEmitter() {\n    if (this[kMode] === 'iterator') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n    }\n\n    this[kMode] = 'emitter';\n  }\n  /** @internal */\n\n\n  _setIsIterator() {\n    if (this[kMode] === 'emitter') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n    }\n\n    this[kMode] = 'iterator';\n  }\n  /**\n   * Create a new change stream cursor based on self's configuration\n   * @internal\n   */\n\n\n  _createChangeStreamCursor(options) {\n    const changeStreamStageOptions = (0, utils_1.filterOptions)(options, CHANGE_STREAM_OPTIONS);\n\n    if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n      changeStreamStageOptions.allChangesForCluster = true;\n    }\n\n    const pipeline = [{\n      $changeStream: changeStreamStageOptions\n    }, ...this.pipeline];\n    const client = this.type === CHANGE_DOMAIN_TYPES.CLUSTER ? this.parent : this.type === CHANGE_DOMAIN_TYPES.DATABASE ? this.parent.s.client : this.type === CHANGE_DOMAIN_TYPES.COLLECTION ? this.parent.s.db.s.client : null;\n\n    if (client == null) {\n      // This should never happen because of the assertion in the constructor\n      throw new error_1.MongoRuntimeError(`Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`);\n    }\n\n    const changeStreamCursor = new change_stream_cursor_1.ChangeStreamCursor(client, this.namespace, pipeline, options);\n\n    for (const event of CHANGE_STREAM_EVENTS) {\n      changeStreamCursor.on(event, e => this.emit(event, e));\n    }\n\n    if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n      this._streamEvents(changeStreamCursor);\n    }\n\n    return changeStreamCursor;\n  }\n  /** @internal */\n\n\n  _closeEmitterModeWithError(error) {\n    this.emit(ChangeStream.ERROR, error);\n    this.close(() => {// nothing to do\n    });\n  }\n  /** @internal */\n\n\n  _streamEvents(cursor) {\n    var _a;\n\n    this._setIsEmitter();\n\n    const stream = (_a = this[kCursorStream]) !== null && _a !== void 0 ? _a : cursor.stream();\n    this[kCursorStream] = stream;\n    stream.on('data', change => {\n      try {\n        const processedChange = this._processChange(change);\n\n        this.emit(ChangeStream.CHANGE, processedChange);\n      } catch (error) {\n        this.emit(ChangeStream.ERROR, error);\n      }\n    });\n    stream.on('error', error => this._processErrorStreamMode(error));\n  }\n  /** @internal */\n\n\n  _endStream() {\n    const cursorStream = this[kCursorStream];\n\n    if (cursorStream) {\n      ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n      cursorStream.destroy();\n    }\n\n    this[kCursorStream] = undefined;\n  }\n  /** @internal */\n\n\n  _processChange(change) {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n    } // a null change means the cursor has been notified, implicitly closing the change stream\n\n\n    if (change == null) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n    }\n\n    if (change && !change._id) {\n      throw new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n    } // cache the resume token\n\n\n    this.cursor.cacheResumeToken(change._id); // wipe the startAtOperationTime if there was one so that there won't be a conflict\n    // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n\n    this.options.startAtOperationTime = undefined;\n    return change;\n  }\n  /** @internal */\n\n\n  _processErrorStreamMode(changeStreamError) {\n    // If the change stream has been closed explicitly, do not process error.\n    if (this[kClosed]) return;\n\n    if ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n      this._endStream();\n\n      this.cursor.close().catch(() => null);\n      const topology = (0, utils_1.getTopology)(this.parent);\n      topology.selectServer(this.cursor.readPreference, {}, serverSelectionError => {\n        if (serverSelectionError) return this._closeEmitterModeWithError(changeStreamError);\n        this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n      });\n    } else {\n      this._closeEmitterModeWithError(changeStreamError);\n    }\n  }\n  /** @internal */\n\n\n  _processErrorIteratorModeCallback(changeStreamError, callback) {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      return callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    }\n\n    if ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n      this.cursor.close().catch(() => null);\n      const topology = (0, utils_1.getTopology)(this.parent);\n      topology.selectServer(this.cursor.readPreference, {}, serverSelectionError => {\n        // if the topology can't reconnect, close the stream\n        if (serverSelectionError) return this.close(() => callback(changeStreamError));\n        this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n        callback();\n      });\n    } else {\n      this.close(() => callback(changeStreamError));\n    }\n  }\n\n}\n\nexports.ChangeStream = ChangeStream;\n/** @event */\n\nChangeStream.RESPONSE = constants_1.RESPONSE;\n/** @event */\n\nChangeStream.MORE = constants_1.MORE;\n/** @event */\n\nChangeStream.INIT = constants_1.INIT;\n/** @event */\n\nChangeStream.CLOSE = constants_1.CLOSE;\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\n\nChangeStream.CHANGE = constants_1.CHANGE;\n/** @event */\n\nChangeStream.END = constants_1.END;\n/** @event */\n\nChangeStream.ERROR = constants_1.ERROR;\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\n\nChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;","map":{"version":3,"sources":["../src/change_stream.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChangeStream = void 0;\nconst util_1 = require(\"util\");\nconst collection_1 = require(\"./collection\");\nconst constants_1 = require(\"./constants\");\nconst change_stream_cursor_1 = require(\"./cursor/change_stream_cursor\");\nconst db_1 = require(\"./db\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst mongo_types_1 = require(\"./mongo_types\");\nconst utils_1 = require(\"./utils\");\n/** @internal */\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kMode = Symbol('mode');\nconst CHANGE_STREAM_OPTIONS = [\n    'resumeAfter',\n    'startAfter',\n    'startAtOperationTime',\n    'fullDocument',\n    'fullDocumentBeforeChange',\n    'showExpandedEvents'\n];\nconst CHANGE_DOMAIN_TYPES = {\n    COLLECTION: Symbol('Collection'),\n    DATABASE: Symbol('Database'),\n    CLUSTER: Symbol('Cluster')\n};\nconst CHANGE_STREAM_EVENTS = [constants_1.RESUME_TOKEN_CHANGED, constants_1.END, constants_1.CLOSE];\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @internal\n     *\n     * @param parent - The parent object that created this change stream\n     * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n     */\n    constructor(parent, pipeline = [], options = {}) {\n        super();\n        /**\n         * @internal\n         *\n         * TODO(NODE-4320): promisify selectServer and refactor this code to be async\n         *\n         * we promisify _processErrorIteratorModeCallback until we have a promisifed version of selectServer.\n         */\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this._processErrorIteratorMode = (0, util_1.promisify)(this._processErrorIteratorModeCallback);\n        this.pipeline = pipeline;\n        this.options = options;\n        if (parent instanceof collection_1.Collection) {\n            this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n        }\n        else if (parent instanceof db_1.Db) {\n            this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n        }\n        else if (parent instanceof mongo_client_1.MongoClient) {\n            this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n        }\n        else {\n            throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n        }\n        this.parent = parent;\n        this.namespace = parent.s.namespace;\n        if (!this.options.readPreference && parent.readPreference) {\n            this.options.readPreference = parent.readPreference;\n        }\n        // Create contained Change Stream cursor\n        this.cursor = this._createChangeStreamCursor(options);\n        this[kClosed] = false;\n        this[kMode] = false;\n        // Listen for any `change` listeners being added to ChangeStream\n        this.on('newListener', eventName => {\n            if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n                this._streamEvents(this.cursor);\n            }\n        });\n        this.on('removeListener', eventName => {\n            var _a;\n            if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n                (_a = this[kCursorStream]) === null || _a === void 0 ? void 0 : _a.removeAllListeners('data');\n            }\n        });\n    }\n    /** @internal */\n    get cursorStream() {\n        return this[kCursorStream];\n    }\n    /** The cached resume token that is used to resume after the most recently returned change. */\n    get resumeToken() {\n        var _a;\n        return (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.resumeToken;\n    }\n    hasNext(callback) {\n        this._setIsIterator();\n        // TOOD(NODE-4319): Add eslint rule preventing accidental variable shadowing\n        // Shadowing is intentional here.  We want to override the `callback` variable\n        // from the outer scope so that the inner scope doesn't accidentally call the wrong callback.\n        return (0, utils_1.maybePromise)(callback, callback => {\n            (async () => {\n                try {\n                    const hasNext = await this.cursor.hasNext();\n                    return hasNext;\n                }\n                catch (error) {\n                    try {\n                        await this._processErrorIteratorMode(error);\n                        const hasNext = await this.cursor.hasNext();\n                        return hasNext;\n                    }\n                    catch (error) {\n                        await this.close().catch(err => err);\n                        throw error;\n                    }\n                }\n            })().then(hasNext => callback(undefined, hasNext), error => callback(error));\n        });\n    }\n    next(callback) {\n        this._setIsIterator();\n        // TOOD(NODE-4319): Add eslint rule preventing accidental variable shadowing\n        // Shadowing is intentional here.  We want to override the `callback` variable\n        // from the outer scope so that the inner scope doesn't accidentally call the wrong callback.\n        return (0, utils_1.maybePromise)(callback, callback => {\n            (async () => {\n                try {\n                    const change = await this.cursor.next();\n                    const processedChange = this._processChange(change !== null && change !== void 0 ? change : null);\n                    return processedChange;\n                }\n                catch (error) {\n                    try {\n                        await this._processErrorIteratorMode(error);\n                        const change = await this.cursor.next();\n                        const processedChange = this._processChange(change !== null && change !== void 0 ? change : null);\n                        return processedChange;\n                    }\n                    catch (error) {\n                        await this.close().catch(err => err);\n                        throw error;\n                    }\n                }\n            })().then(change => callback(undefined, change), error => callback(error));\n        });\n    }\n    tryNext(callback) {\n        this._setIsIterator();\n        // TOOD(NODE-4319): Add eslint rule preventing accidental variable shadowing\n        // Shadowing is intentional here.  We want to override the `callback` variable\n        // from the outer scope so that the inner scope doesn't accidentally call the wrong callback.\n        return (0, utils_1.maybePromise)(callback, callback => {\n            (async () => {\n                try {\n                    const change = await this.cursor.tryNext();\n                    return change !== null && change !== void 0 ? change : null;\n                }\n                catch (error) {\n                    try {\n                        await this._processErrorIteratorMode(error);\n                        const change = await this.cursor.tryNext();\n                        return change !== null && change !== void 0 ? change : null;\n                    }\n                    catch (error) {\n                        await this.close().catch(err => err);\n                        throw error;\n                    }\n                }\n            })().then(change => callback(undefined, change), error => callback(error));\n        });\n    }\n    /** Is the cursor closed */\n    get closed() {\n        return this[kClosed] || this.cursor.closed;\n    }\n    close(callback) {\n        this[kClosed] = true;\n        return (0, utils_1.maybePromise)(callback, cb => {\n            const cursor = this.cursor;\n            return cursor.close(err => {\n                this._endStream();\n                return cb(err);\n            });\n        });\n    }\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     *\n     * NOTE: When using a Stream to process change stream events, the stream will\n     * NOT automatically resume in the case a resumable error is encountered.\n     *\n     * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n     */\n    stream(options) {\n        if (this.closed) {\n            throw new error_1.MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        this.streamOptions = options;\n        return this.cursor.stream(options);\n    }\n    /** @internal */\n    _setIsEmitter() {\n        if (this[kMode] === 'iterator') {\n            // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n            throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n        }\n        this[kMode] = 'emitter';\n    }\n    /** @internal */\n    _setIsIterator() {\n        if (this[kMode] === 'emitter') {\n            // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n            throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n        }\n        this[kMode] = 'iterator';\n    }\n    /**\n     * Create a new change stream cursor based on self's configuration\n     * @internal\n     */\n    _createChangeStreamCursor(options) {\n        const changeStreamStageOptions = (0, utils_1.filterOptions)(options, CHANGE_STREAM_OPTIONS);\n        if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n            changeStreamStageOptions.allChangesForCluster = true;\n        }\n        const pipeline = [{ $changeStream: changeStreamStageOptions }, ...this.pipeline];\n        const client = this.type === CHANGE_DOMAIN_TYPES.CLUSTER\n            ? this.parent\n            : this.type === CHANGE_DOMAIN_TYPES.DATABASE\n                ? this.parent.s.client\n                : this.type === CHANGE_DOMAIN_TYPES.COLLECTION\n                    ? this.parent.s.db.s.client\n                    : null;\n        if (client == null) {\n            // This should never happen because of the assertion in the constructor\n            throw new error_1.MongoRuntimeError(`Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`);\n        }\n        const changeStreamCursor = new change_stream_cursor_1.ChangeStreamCursor(client, this.namespace, pipeline, options);\n        for (const event of CHANGE_STREAM_EVENTS) {\n            changeStreamCursor.on(event, e => this.emit(event, e));\n        }\n        if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n            this._streamEvents(changeStreamCursor);\n        }\n        return changeStreamCursor;\n    }\n    /** @internal */\n    _closeEmitterModeWithError(error) {\n        this.emit(ChangeStream.ERROR, error);\n        this.close(() => {\n            // nothing to do\n        });\n    }\n    /** @internal */\n    _streamEvents(cursor) {\n        var _a;\n        this._setIsEmitter();\n        const stream = (_a = this[kCursorStream]) !== null && _a !== void 0 ? _a : cursor.stream();\n        this[kCursorStream] = stream;\n        stream.on('data', change => {\n            try {\n                const processedChange = this._processChange(change);\n                this.emit(ChangeStream.CHANGE, processedChange);\n            }\n            catch (error) {\n                this.emit(ChangeStream.ERROR, error);\n            }\n        });\n        stream.on('error', error => this._processErrorStreamMode(error));\n    }\n    /** @internal */\n    _endStream() {\n        const cursorStream = this[kCursorStream];\n        if (cursorStream) {\n            ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n            cursorStream.destroy();\n        }\n        this[kCursorStream] = undefined;\n    }\n    /** @internal */\n    _processChange(change) {\n        if (this[kClosed]) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        // a null change means the cursor has been notified, implicitly closing the change stream\n        if (change == null) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        if (change && !change._id) {\n            throw new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n        }\n        // cache the resume token\n        this.cursor.cacheResumeToken(change._id);\n        // wipe the startAtOperationTime if there was one so that there won't be a conflict\n        // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n        this.options.startAtOperationTime = undefined;\n        return change;\n    }\n    /** @internal */\n    _processErrorStreamMode(changeStreamError) {\n        // If the change stream has been closed explicitly, do not process error.\n        if (this[kClosed])\n            return;\n        if ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n            this._endStream();\n            this.cursor.close().catch(() => null);\n            const topology = (0, utils_1.getTopology)(this.parent);\n            topology.selectServer(this.cursor.readPreference, {}, serverSelectionError => {\n                if (serverSelectionError)\n                    return this._closeEmitterModeWithError(changeStreamError);\n                this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n            });\n        }\n        else {\n            this._closeEmitterModeWithError(changeStreamError);\n        }\n    }\n    /** @internal */\n    _processErrorIteratorModeCallback(changeStreamError, callback) {\n        if (this[kClosed]) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            return callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n        }\n        if ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n            this.cursor.close().catch(() => null);\n            const topology = (0, utils_1.getTopology)(this.parent);\n            topology.selectServer(this.cursor.readPreference, {}, serverSelectionError => {\n                // if the topology can't reconnect, close the stream\n                if (serverSelectionError)\n                    return this.close(() => callback(changeStreamError));\n                this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n                callback();\n            });\n        }\n        else {\n            this.close(() => callback(changeStreamError));\n        }\n    }\n}\nexports.ChangeStream = ChangeStream;\n/** @event */\nChangeStream.RESPONSE = constants_1.RESPONSE;\n/** @event */\nChangeStream.MORE = constants_1.MORE;\n/** @event */\nChangeStream.INIT = constants_1.INIT;\n/** @event */\nChangeStream.CLOSE = constants_1.CLOSE;\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\nChangeStream.CHANGE = constants_1.CHANGE;\n/** @event */\nChangeStream.END = constants_1.END;\n/** @event */\nChangeStream.ERROR = constants_1.ERROR;\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\nChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;\n//# sourceMappingURL=change_stream.js.map"]},"metadata":{},"sourceType":"script"}