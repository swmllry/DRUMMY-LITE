{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BulkOperationBase = exports.FindOperators = exports.MongoBulkWriteError = exports.mergeBatchResults = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\n\nconst bson_1 = require(\"../bson\");\n\nconst error_1 = require(\"../error\");\n\nconst delete_1 = require(\"../operations/delete\");\n\nconst execute_operation_1 = require(\"../operations/execute_operation\");\n\nconst insert_1 = require(\"../operations/insert\");\n\nconst operation_1 = require(\"../operations/operation\");\n\nconst update_1 = require(\"../operations/update\");\n\nconst promise_provider_1 = require(\"../promise_provider\");\n\nconst utils_1 = require(\"../utils\");\n\nconst write_concern_1 = require(\"../write_concern\");\n/** @internal */\n\n\nconst kServerError = Symbol('serverError');\n/** @public */\n\nexports.BatchType = Object.freeze({\n  INSERT: 1,\n  UPDATE: 2,\n  DELETE: 3\n});\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\n\nclass Batch {\n  constructor(batchType, originalZeroIndex) {\n    this.originalZeroIndex = originalZeroIndex;\n    this.currentIndex = 0;\n    this.originalIndexes = [];\n    this.batchType = batchType;\n    this.operations = [];\n    this.size = 0;\n    this.sizeBytes = 0;\n  }\n\n}\n\nexports.Batch = Batch;\n/**\n * @public\n * The result of a bulk write.\n */\n\nclass BulkWriteResult {\n  /**\n   * Create a new BulkWriteResult instance\n   * @internal\n   */\n  constructor(bulkResult) {\n    this.result = bulkResult;\n  }\n  /** Number of documents inserted. */\n\n\n  get insertedCount() {\n    var _a;\n\n    return (_a = this.result.nInserted) !== null && _a !== void 0 ? _a : 0;\n  }\n  /** Number of documents matched for update. */\n\n\n  get matchedCount() {\n    var _a;\n\n    return (_a = this.result.nMatched) !== null && _a !== void 0 ? _a : 0;\n  }\n  /** Number of documents modified. */\n\n\n  get modifiedCount() {\n    var _a;\n\n    return (_a = this.result.nModified) !== null && _a !== void 0 ? _a : 0;\n  }\n  /** Number of documents deleted. */\n\n\n  get deletedCount() {\n    var _a;\n\n    return (_a = this.result.nRemoved) !== null && _a !== void 0 ? _a : 0;\n  }\n  /** Number of documents upserted. */\n\n\n  get upsertedCount() {\n    var _a;\n\n    return (_a = this.result.upserted.length) !== null && _a !== void 0 ? _a : 0;\n  }\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n\n\n  get upsertedIds() {\n    var _a;\n\n    const upserted = {};\n\n    for (const doc of (_a = this.result.upserted) !== null && _a !== void 0 ? _a : []) {\n      upserted[doc.index] = doc._id;\n    }\n\n    return upserted;\n  }\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n\n\n  get insertedIds() {\n    var _a;\n\n    const inserted = {};\n\n    for (const doc of (_a = this.result.insertedIds) !== null && _a !== void 0 ? _a : []) {\n      inserted[doc.index] = doc._id;\n    }\n\n    return inserted;\n  }\n  /** Evaluates to true if the bulk operation correctly executes */\n\n\n  get ok() {\n    return this.result.ok;\n  }\n  /** The number of inserted documents */\n\n\n  get nInserted() {\n    return this.result.nInserted;\n  }\n  /** Number of upserted documents */\n\n\n  get nUpserted() {\n    return this.result.nUpserted;\n  }\n  /** Number of matched documents */\n\n\n  get nMatched() {\n    return this.result.nMatched;\n  }\n  /** Number of documents updated physically on disk */\n\n\n  get nModified() {\n    return this.result.nModified;\n  }\n  /** Number of removed documents */\n\n\n  get nRemoved() {\n    return this.result.nRemoved;\n  }\n  /** Returns an array of all inserted ids */\n\n\n  getInsertedIds() {\n    return this.result.insertedIds;\n  }\n  /** Returns an array of all upserted ids */\n\n\n  getUpsertedIds() {\n    return this.result.upserted;\n  }\n  /** Returns the upserted id at the given index */\n\n\n  getUpsertedIdAt(index) {\n    return this.result.upserted[index];\n  }\n  /** Returns raw internal result */\n\n\n  getRawResponse() {\n    return this.result;\n  }\n  /** Returns true if the bulk operation contains a write error */\n\n\n  hasWriteErrors() {\n    return this.result.writeErrors.length > 0;\n  }\n  /** Returns the number of write errors off the bulk operation */\n\n\n  getWriteErrorCount() {\n    return this.result.writeErrors.length;\n  }\n  /** Returns a specific write error object */\n\n\n  getWriteErrorAt(index) {\n    return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n  }\n  /** Retrieve all write errors */\n\n\n  getWriteErrors() {\n    return this.result.writeErrors;\n  }\n  /** Retrieve lastOp if available */\n\n\n  getLastOp() {\n    return this.result.opTime;\n  }\n  /** Retrieve the write concern error if one exists */\n\n\n  getWriteConcernError() {\n    if (this.result.writeConcernErrors.length === 0) {\n      return;\n    } else if (this.result.writeConcernErrors.length === 1) {\n      // Return the error\n      return this.result.writeConcernErrors[0];\n    } else {\n      // Combine the errors\n      let errmsg = '';\n\n      for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n        const err = this.result.writeConcernErrors[i];\n        errmsg = errmsg + err.errmsg; // TODO: Something better\n\n        if (i === 0) errmsg = errmsg + ' and ';\n      }\n\n      return new WriteConcernError({\n        errmsg,\n        code: error_1.MONGODB_ERROR_CODES.WriteConcernFailed\n      });\n    }\n  }\n\n  toJSON() {\n    return this.result;\n  }\n\n  toString() {\n    return `BulkWriteResult(${this.toJSON()})`;\n  }\n\n  isOk() {\n    return this.result.ok === 1;\n  }\n\n}\n\nexports.BulkWriteResult = BulkWriteResult;\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\n\nclass WriteConcernError {\n  constructor(error) {\n    this[kServerError] = error;\n  }\n  /** Write concern error code. */\n\n\n  get code() {\n    return this[kServerError].code;\n  }\n  /** Write concern error message. */\n\n\n  get errmsg() {\n    return this[kServerError].errmsg;\n  }\n  /** Write concern error info. */\n\n\n  get errInfo() {\n    return this[kServerError].errInfo;\n  }\n  /** @deprecated The `err` prop that contained a MongoServerError has been deprecated. */\n\n\n  get err() {\n    return this[kServerError];\n  }\n\n  toJSON() {\n    return this[kServerError];\n  }\n\n  toString() {\n    return `WriteConcernError(${this.errmsg})`;\n  }\n\n}\n\nexports.WriteConcernError = WriteConcernError;\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\n\nclass WriteError {\n  constructor(err) {\n    this.err = err;\n  }\n  /** WriteError code. */\n\n\n  get code() {\n    return this.err.code;\n  }\n  /** WriteError original bulk operation index. */\n\n\n  get index() {\n    return this.err.index;\n  }\n  /** WriteError message. */\n\n\n  get errmsg() {\n    return this.err.errmsg;\n  }\n  /** WriteError details. */\n\n\n  get errInfo() {\n    return this.err.errInfo;\n  }\n  /** Returns the underlying operation that caused the error */\n\n\n  getOperation() {\n    return this.err.op;\n  }\n\n  toJSON() {\n    return {\n      code: this.err.code,\n      index: this.err.index,\n      errmsg: this.err.errmsg,\n      op: this.err.op\n    };\n  }\n\n  toString() {\n    return `WriteError(${JSON.stringify(this.toJSON())})`;\n  }\n\n}\n\nexports.WriteError = WriteError;\n/** Converts the number to a Long or returns it. */\n\nfunction longOrConvert(value) {\n  return typeof value === 'number' ? bson_1.Long.fromNumber(value) : value;\n}\n/** Merges results into shared data structure */\n\n\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  }\n\n  if (result == null) {\n    return;\n  } // Do we have a top level error stop processing and return\n\n\n  if (result.ok === 0 && bulkResult.ok === 1) {\n    bulkResult.ok = 0;\n    const writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      errInfo: result.errInfo,\n      op: batch.operations[0]\n    };\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\n    return;\n  } // The server write command specification states that lastOp is an optional\n  // mongod only field that has a type of timestamp. Across various scarce specs\n  // where opTime is mentioned, it is an \"opaque\" object that can have a \"ts\" and\n  // \"t\" field with Timestamp and Long as their types respectively.\n  // The \"lastOp\" field of the bulk write result is never mentioned in the driver\n  // specifications or the bulk write spec, so we should probably just keep its\n  // value consistent since it seems to vary.\n  // See: https://github.com/mongodb/specifications/blob/master/source/driver-bulk-update.rst#results-object\n\n\n  if (result.opTime || result.lastOp) {\n    let opTime = result.lastOp || result.opTime; // If the opTime is a Timestamp, convert it to a consistent format to be\n    // able to compare easily. Converting to the object from a timestamp is\n    // much more straightforward than the other direction.\n\n    if (opTime._bsontype === 'Timestamp') {\n      opTime = {\n        ts: opTime,\n        t: bson_1.Long.ZERO\n      };\n    } // If there's no lastOp, just set it.\n\n\n    if (!bulkResult.opTime) {\n      bulkResult.opTime = opTime;\n    } else {\n      // First compare the ts values and set if the opTimeTS value is greater.\n      const lastOpTS = longOrConvert(bulkResult.opTime.ts);\n      const opTimeTS = longOrConvert(opTime.ts);\n\n      if (opTimeTS.greaterThan(lastOpTS)) {\n        bulkResult.opTime = opTime;\n      } else if (opTimeTS.equals(lastOpTS)) {\n        // If the ts values are equal, then compare using the t values.\n        const lastOpT = longOrConvert(bulkResult.opTime.t);\n        const opTimeT = longOrConvert(opTime.t);\n\n        if (opTimeT.greaterThan(lastOpT)) {\n          bulkResult.opTime = opTime;\n        }\n      }\n    }\n  } // If we have an insert Batch type\n\n\n  if (isInsertBatch(batch) && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  } // If we have an insert Batch type\n\n\n  if (isDeleteBatch(batch) && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n\n  let nUpserted = 0; // We have an array of upserted values, we need to rewrite the indexes\n\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n\n    for (let i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n    nUpserted = 1;\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  } // If we have an update Batch type\n\n\n  if (isUpdateBatch(batch) && result.n) {\n    const nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n\n    if (typeof nModified === 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = 0;\n    }\n  }\n\n  if (Array.isArray(result.writeErrors)) {\n    for (let i = 0; i < result.writeErrors.length; i++) {\n      const writeError = {\n        index: batch.originalIndexes[result.writeErrors[i].index],\n        code: result.writeErrors[i].code,\n        errmsg: result.writeErrors[i].errmsg,\n        errInfo: result.writeErrors[i].errInfo,\n        op: batch.operations[result.writeErrors[i].index]\n      };\n      bulkResult.writeErrors.push(new WriteError(writeError));\n    }\n  }\n\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\n\nexports.mergeBatchResults = mergeBatchResults;\n\nfunction executeCommands(bulkOperation, options, callback) {\n  if (bulkOperation.s.batches.length === 0) {\n    return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult));\n  }\n\n  const batch = bulkOperation.s.batches.shift();\n\n  function resultHandler(err, result) {\n    // Error is a driver related error not a bulk op error, return early\n    if (err && 'message' in err && !(err instanceof error_1.MongoWriteConcernError)) {\n      return callback(new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult)));\n    }\n\n    if (err instanceof error_1.MongoWriteConcernError) {\n      return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\n    } // Merge the results together\n\n\n    const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\n    const mergeResult = mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n\n    if (mergeResult != null) {\n      return callback(undefined, writeResult);\n    }\n\n    if (bulkOperation.handleWriteError(callback, writeResult)) return; // Execute the next command in line\n\n    executeCommands(bulkOperation, options, callback);\n  }\n\n  const finalOptions = (0, utils_1.resolveOptions)(bulkOperation, { ...options,\n    ordered: bulkOperation.isOrdered\n  });\n\n  if (finalOptions.bypassDocumentValidation !== true) {\n    delete finalOptions.bypassDocumentValidation;\n  } // Set an operationIf if provided\n\n\n  if (bulkOperation.operationId) {\n    resultHandler.operationId = bulkOperation.operationId;\n  } // Is the bypassDocumentValidation options specific\n\n\n  if (bulkOperation.s.bypassDocumentValidation === true) {\n    finalOptions.bypassDocumentValidation = true;\n  } // Is the checkKeys option disabled\n\n\n  if (bulkOperation.s.checkKeys === false) {\n    finalOptions.checkKeys = false;\n  }\n\n  if (finalOptions.retryWrites) {\n    if (isUpdateBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n    }\n\n    if (isDeleteBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n    }\n  }\n\n  try {\n    if (isInsertBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isUpdateBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isDeleteBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    }\n  } catch (err) {\n    // Force top level error\n    err.ok = 0; // Merge top level error and return\n\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n    callback();\n  }\n}\n\nfunction handleMongoWriteConcernError(batch, bulkResult, err, callback) {\n  var _a, _b;\n\n  mergeBatchResults(batch, bulkResult, undefined, err.result);\n  callback(new MongoBulkWriteError({\n    message: (_a = err.result) === null || _a === void 0 ? void 0 : _a.writeConcernError.errmsg,\n    code: (_b = err.result) === null || _b === void 0 ? void 0 : _b.writeConcernError.result\n  }, new BulkWriteResult(bulkResult)));\n}\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\n\n\nclass MongoBulkWriteError extends error_1.MongoServerError {\n  /** Creates a new MongoBulkWriteError */\n  constructor(error, result) {\n    var _a;\n\n    super(error);\n    this.writeErrors = [];\n    if (error instanceof WriteConcernError) this.err = error;else if (!(error instanceof Error)) {\n      this.message = error.message;\n      this.code = error.code;\n      this.writeErrors = (_a = error.writeErrors) !== null && _a !== void 0 ? _a : [];\n    }\n    this.result = result;\n    Object.assign(this, error);\n  }\n\n  get name() {\n    return 'MongoBulkWriteError';\n  }\n  /** Number of documents inserted. */\n\n\n  get insertedCount() {\n    return this.result.insertedCount;\n  }\n  /** Number of documents matched for update. */\n\n\n  get matchedCount() {\n    return this.result.matchedCount;\n  }\n  /** Number of documents modified. */\n\n\n  get modifiedCount() {\n    return this.result.modifiedCount;\n  }\n  /** Number of documents deleted. */\n\n\n  get deletedCount() {\n    return this.result.deletedCount;\n  }\n  /** Number of documents upserted. */\n\n\n  get upsertedCount() {\n    return this.result.upsertedCount;\n  }\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n\n\n  get insertedIds() {\n    return this.result.insertedIds;\n  }\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n\n\n  get upsertedIds() {\n    return this.result.upsertedIds;\n  }\n\n}\n\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\n\nclass FindOperators {\n  /**\n   * Creates a new FindOperators object.\n   * @internal\n   */\n  constructor(bulkOperation) {\n    this.bulkOperation = bulkOperation;\n  }\n  /** Add a multiple update operation to the bulk operation */\n\n\n  update(updateDocument) {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, { ...currentOp,\n      multi: true\n    }));\n  }\n  /** Add a single update operation to the bulk operation */\n\n\n  updateOne(updateDocument) {\n    if (!(0, utils_1.hasAtomicOperators)(updateDocument)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, { ...currentOp,\n      multi: false\n    }));\n  }\n  /** Add a replace one operation to the bulk operation */\n\n\n  replaceOne(replacement) {\n    if ((0, utils_1.hasAtomicOperators)(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n    }\n\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, { ...currentOp,\n      multi: false\n    }));\n  }\n  /** Add a delete one operation to the bulk operation */\n\n\n  deleteOne() {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp,\n      limit: 1\n    }));\n  }\n  /** Add a delete many operation to the bulk operation */\n\n\n  delete() {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp,\n      limit: 0\n    }));\n  }\n  /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n\n\n  upsert() {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.upsert = true;\n    return this;\n  }\n  /** Specifies the collation for the query condition. */\n\n\n  collation(collation) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.collation = collation;\n    return this;\n  }\n  /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n\n\n  arrayFilters(arrayFilters) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n    return this;\n  }\n\n}\n\nexports.FindOperators = FindOperators;\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\n\nclass BulkWriteShimOperation extends operation_1.AbstractOperation {\n  constructor(bulkOperation, options) {\n    super(options);\n    this.bulkOperation = bulkOperation;\n  }\n\n  execute(server, session, callback) {\n    if (this.options.session == null) {\n      // An implicit session could have been created by 'executeOperation'\n      // So if we stick it on finalOptions here, each bulk operation\n      // will use this same session, it'll be passed in the same way\n      // an explicit session would be\n      this.options.session = session;\n    }\n\n    return executeCommands(this.bulkOperation, this.options, callback);\n  }\n\n}\n/** @public */\n\n\nclass BulkOperationBase {\n  /**\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n   * @internal\n   */\n  constructor(collection, options, isOrdered) {\n    // determine whether bulkOperation is ordered or unordered\n    this.isOrdered = isOrdered;\n    const topology = (0, utils_1.getTopology)(collection);\n    options = options == null ? {} : options; // TODO Bring from driver information in hello\n    // Get the namespace for the write operations\n\n    const namespace = collection.s.namespace; // Used to mark operation as executed\n\n    const executed = false; // Current item\n\n    const currentOp = undefined; // Set max byte size\n\n    const hello = topology.lastHello(); // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n    // over 2mb are still allowed\n\n    const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n    const maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n    const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n    const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000; // Calculates the largest possible size of an Array key, represented as a BSON string\n    // element. This calculation:\n    //     1 byte for BSON type\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n    //   + 1 bytes for null terminator\n\n    const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2; // Final options for retryable writes\n\n    let finalOptions = Object.assign({}, options);\n    finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db); // Final results\n\n    const bulkResult = {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    }; // Internal state\n\n    this.s = {\n      // Final result\n      bulkResult,\n      // Current batch state\n      currentBatch: undefined,\n      currentIndex: 0,\n      // ordered specific\n      currentBatchSize: 0,\n      currentBatchSizeBytes: 0,\n      // unordered specific\n      currentInsertBatch: undefined,\n      currentUpdateBatch: undefined,\n      currentRemoveBatch: undefined,\n      batches: [],\n      // Write concern\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Max batch size options\n      maxBsonObjectSize,\n      maxBatchSizeBytes,\n      maxWriteBatchSize,\n      maxKeySize,\n      // Namespace\n      namespace,\n      // Topology\n      topology,\n      // Options\n      options: finalOptions,\n      // BSON options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n      // Current operation\n      currentOp,\n      // Executed\n      executed,\n      // Collection\n      collection,\n      // Fundamental error\n      err: undefined,\n      // check keys\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n    }; // bypass Validation\n\n    if (options.bypassDocumentValidation === true) {\n      this.s.bypassDocumentValidation = true;\n    }\n  }\n  /**\n   * Add a single insert document to the bulk operation\n   *\n   * @example\n   * ```js\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Adds three inserts to the bulkOp.\n   * bulkOp\n   *   .insert({ a: 1 })\n   *   .insert({ b: 2 })\n   *   .insert({ c: 3 });\n   * await bulkOp.execute();\n   * ```\n   */\n\n\n  insert(document) {\n    if (document._id == null && !shouldForceServerObjectId(this)) {\n      document._id = new bson_1.ObjectId();\n    }\n\n    return this.addToOperationsList(exports.BatchType.INSERT, document);\n  }\n  /**\n   * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n   * Returns a builder object used to complete the definition of the operation.\n   *\n   * @example\n   * ```js\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Add an updateOne to the bulkOp\n   * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n   *\n   * // Add an updateMany to the bulkOp\n   * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n   *\n   * // Add an upsert\n   * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n   *\n   * // Add a deletion\n   * bulkOp.find({ g: 7 }).deleteOne();\n   *\n   * // Add a multi deletion\n   * bulkOp.find({ h: 8 }).delete();\n   *\n   * // Add a replaceOne\n   * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n   *\n   * // Update using a pipeline (requires Mongodb 4.2 or higher)\n   * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n   *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n   * ]);\n   *\n   * // All of the ops will now be executed\n   * await bulkOp.execute();\n   * ```\n   */\n\n\n  find(selector) {\n    if (!selector) {\n      throw new error_1.MongoInvalidArgumentError('Bulk find operation must specify a selector');\n    } // Save a current selector\n\n\n    this.s.currentOp = {\n      selector: selector\n    };\n    return new FindOperators(this);\n  }\n  /** Specifies a raw operation to perform in the bulk write. */\n\n\n  raw(op) {\n    if (op == null || typeof op !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Operation must be an object with an operation key');\n    }\n\n    if ('insertOne' in op) {\n      const forceServerObjectId = shouldForceServerObjectId(this);\n\n      if (op.insertOne && op.insertOne.document == null) {\n        // NOTE: provided for legacy support, but this is a malformed operation\n        if (forceServerObjectId !== true && op.insertOne._id == null) {\n          op.insertOne._id = new bson_1.ObjectId();\n        }\n\n        return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne);\n      }\n\n      if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n        op.insertOne.document._id = new bson_1.ObjectId();\n      }\n\n      return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne.document);\n    }\n\n    if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n      if ('replaceOne' in op) {\n        if ('q' in op.replaceOne) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, { ...op.replaceOne,\n          multi: false\n        });\n\n        if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n\n      if ('updateOne' in op) {\n        if ('q' in op.updateOne) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, { ...op.updateOne,\n          multi: false\n        });\n\n        if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n\n      if ('updateMany' in op) {\n        if ('q' in op.updateMany) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, { ...op.updateMany,\n          multi: true\n        });\n\n        if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n    }\n\n    if ('deleteOne' in op) {\n      if ('q' in op.deleteOne) {\n        throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n\n      return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, { ...op.deleteOne,\n        limit: 1\n      }));\n    }\n\n    if ('deleteMany' in op) {\n      if ('q' in op.deleteMany) {\n        throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n\n      return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, { ...op.deleteMany,\n        limit: 0\n      }));\n    } // otherwise an unknown operation was provided\n\n\n    throw new error_1.MongoInvalidArgumentError('bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany');\n  }\n\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n\n  get batches() {\n    const batches = [...this.s.batches];\n\n    if (this.isOrdered) {\n      if (this.s.currentBatch) batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\n    }\n\n    return batches;\n  }\n\n  execute(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n\n    if (this.s.executed) {\n      return handleEarlyError(new error_1.MongoBatchReExecutionError(), callback);\n    }\n\n    const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n\n    if (writeConcern) {\n      this.s.writeConcern = writeConcern;\n    } // If we have current batch\n\n\n    if (this.isOrdered) {\n      if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n    } // If we have no operations in the bulk raise an error\n\n\n    if (this.s.batches.length === 0) {\n      const emptyBatchError = new error_1.MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n      return handleEarlyError(emptyBatchError, callback);\n    }\n\n    this.s.executed = true;\n    const finalOptions = { ...this.s.options,\n      ...options\n    };\n    const operation = new BulkWriteShimOperation(this, finalOptions);\n    return (0, execute_operation_1.executeOperation)(this.s.collection.s.db.s.client, operation, callback);\n  }\n  /**\n   * Handles the write error before executing commands\n   * @internal\n   */\n\n\n  handleWriteError(callback, writeResult) {\n    if (this.s.bulkResult.writeErrors.length > 0) {\n      const msg = this.s.bulkResult.writeErrors[0].errmsg ? this.s.bulkResult.writeErrors[0].errmsg : 'write operation failed';\n      callback(new MongoBulkWriteError({\n        message: msg,\n        code: this.s.bulkResult.writeErrors[0].code,\n        writeErrors: this.s.bulkResult.writeErrors\n      }, writeResult));\n      return true;\n    }\n\n    const writeConcernError = writeResult.getWriteConcernError();\n\n    if (writeConcernError) {\n      callback(new MongoBulkWriteError(writeConcernError, writeResult));\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexports.BulkOperationBase = BulkOperationBase;\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n  enumerable: true,\n\n  get() {\n    return this.s.currentIndex;\n  }\n\n});\n/** helper function to assist with promiseOrCallback behavior */\n\nfunction handleEarlyError(err, callback) {\n  const Promise = promise_provider_1.PromiseProvider.get();\n\n  if (typeof callback === 'function') {\n    callback(err);\n    return;\n  }\n\n  return Promise.reject(err);\n}\n\nfunction shouldForceServerObjectId(bulkOperation) {\n  var _a, _b;\n\n  if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.options.forceServerObjectId;\n  }\n\n  if (typeof ((_a = bulkOperation.s.collection.s.db.options) === null || _a === void 0 ? void 0 : _a.forceServerObjectId) === 'boolean') {\n    return (_b = bulkOperation.s.collection.s.db.options) === null || _b === void 0 ? void 0 : _b.forceServerObjectId;\n  }\n\n  return false;\n}\n\nfunction isInsertBatch(batch) {\n  return batch.batchType === exports.BatchType.INSERT;\n}\n\nfunction isUpdateBatch(batch) {\n  return batch.batchType === exports.BatchType.UPDATE;\n}\n\nfunction isDeleteBatch(batch) {\n  return batch.batchType === exports.BatchType.DELETE;\n}\n\nfunction buildCurrentOp(bulkOp) {\n  let {\n    currentOp\n  } = bulkOp.s;\n  bulkOp.s.currentOp = undefined;\n  if (!currentOp) currentOp = {};\n  return currentOp;\n}","map":{"version":3,"sources":["../../src/bulk/common.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BulkOperationBase = exports.FindOperators = exports.MongoBulkWriteError = exports.mergeBatchResults = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\nconst bson_1 = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst delete_1 = require(\"../operations/delete\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst insert_1 = require(\"../operations/insert\");\nconst operation_1 = require(\"../operations/operation\");\nconst update_1 = require(\"../operations/update\");\nconst promise_provider_1 = require(\"../promise_provider\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"../write_concern\");\n/** @internal */\nconst kServerError = Symbol('serverError');\n/** @public */\nexports.BatchType = Object.freeze({\n    INSERT: 1,\n    UPDATE: 2,\n    DELETE: 3\n});\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nclass Batch {\n    constructor(batchType, originalZeroIndex) {\n        this.originalZeroIndex = originalZeroIndex;\n        this.currentIndex = 0;\n        this.originalIndexes = [];\n        this.batchType = batchType;\n        this.operations = [];\n        this.size = 0;\n        this.sizeBytes = 0;\n    }\n}\nexports.Batch = Batch;\n/**\n * @public\n * The result of a bulk write.\n */\nclass BulkWriteResult {\n    /**\n     * Create a new BulkWriteResult instance\n     * @internal\n     */\n    constructor(bulkResult) {\n        this.result = bulkResult;\n    }\n    /** Number of documents inserted. */\n    get insertedCount() {\n        var _a;\n        return (_a = this.result.nInserted) !== null && _a !== void 0 ? _a : 0;\n    }\n    /** Number of documents matched for update. */\n    get matchedCount() {\n        var _a;\n        return (_a = this.result.nMatched) !== null && _a !== void 0 ? _a : 0;\n    }\n    /** Number of documents modified. */\n    get modifiedCount() {\n        var _a;\n        return (_a = this.result.nModified) !== null && _a !== void 0 ? _a : 0;\n    }\n    /** Number of documents deleted. */\n    get deletedCount() {\n        var _a;\n        return (_a = this.result.nRemoved) !== null && _a !== void 0 ? _a : 0;\n    }\n    /** Number of documents upserted. */\n    get upsertedCount() {\n        var _a;\n        return (_a = this.result.upserted.length) !== null && _a !== void 0 ? _a : 0;\n    }\n    /** Upserted document generated Id's, hash key is the index of the originating operation */\n    get upsertedIds() {\n        var _a;\n        const upserted = {};\n        for (const doc of (_a = this.result.upserted) !== null && _a !== void 0 ? _a : []) {\n            upserted[doc.index] = doc._id;\n        }\n        return upserted;\n    }\n    /** Inserted document generated Id's, hash key is the index of the originating operation */\n    get insertedIds() {\n        var _a;\n        const inserted = {};\n        for (const doc of (_a = this.result.insertedIds) !== null && _a !== void 0 ? _a : []) {\n            inserted[doc.index] = doc._id;\n        }\n        return inserted;\n    }\n    /** Evaluates to true if the bulk operation correctly executes */\n    get ok() {\n        return this.result.ok;\n    }\n    /** The number of inserted documents */\n    get nInserted() {\n        return this.result.nInserted;\n    }\n    /** Number of upserted documents */\n    get nUpserted() {\n        return this.result.nUpserted;\n    }\n    /** Number of matched documents */\n    get nMatched() {\n        return this.result.nMatched;\n    }\n    /** Number of documents updated physically on disk */\n    get nModified() {\n        return this.result.nModified;\n    }\n    /** Number of removed documents */\n    get nRemoved() {\n        return this.result.nRemoved;\n    }\n    /** Returns an array of all inserted ids */\n    getInsertedIds() {\n        return this.result.insertedIds;\n    }\n    /** Returns an array of all upserted ids */\n    getUpsertedIds() {\n        return this.result.upserted;\n    }\n    /** Returns the upserted id at the given index */\n    getUpsertedIdAt(index) {\n        return this.result.upserted[index];\n    }\n    /** Returns raw internal result */\n    getRawResponse() {\n        return this.result;\n    }\n    /** Returns true if the bulk operation contains a write error */\n    hasWriteErrors() {\n        return this.result.writeErrors.length > 0;\n    }\n    /** Returns the number of write errors off the bulk operation */\n    getWriteErrorCount() {\n        return this.result.writeErrors.length;\n    }\n    /** Returns a specific write error object */\n    getWriteErrorAt(index) {\n        return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n    }\n    /** Retrieve all write errors */\n    getWriteErrors() {\n        return this.result.writeErrors;\n    }\n    /** Retrieve lastOp if available */\n    getLastOp() {\n        return this.result.opTime;\n    }\n    /** Retrieve the write concern error if one exists */\n    getWriteConcernError() {\n        if (this.result.writeConcernErrors.length === 0) {\n            return;\n        }\n        else if (this.result.writeConcernErrors.length === 1) {\n            // Return the error\n            return this.result.writeConcernErrors[0];\n        }\n        else {\n            // Combine the errors\n            let errmsg = '';\n            for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n                const err = this.result.writeConcernErrors[i];\n                errmsg = errmsg + err.errmsg;\n                // TODO: Something better\n                if (i === 0)\n                    errmsg = errmsg + ' and ';\n            }\n            return new WriteConcernError({ errmsg, code: error_1.MONGODB_ERROR_CODES.WriteConcernFailed });\n        }\n    }\n    toJSON() {\n        return this.result;\n    }\n    toString() {\n        return `BulkWriteResult(${this.toJSON()})`;\n    }\n    isOk() {\n        return this.result.ok === 1;\n    }\n}\nexports.BulkWriteResult = BulkWriteResult;\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nclass WriteConcernError {\n    constructor(error) {\n        this[kServerError] = error;\n    }\n    /** Write concern error code. */\n    get code() {\n        return this[kServerError].code;\n    }\n    /** Write concern error message. */\n    get errmsg() {\n        return this[kServerError].errmsg;\n    }\n    /** Write concern error info. */\n    get errInfo() {\n        return this[kServerError].errInfo;\n    }\n    /** @deprecated The `err` prop that contained a MongoServerError has been deprecated. */\n    get err() {\n        return this[kServerError];\n    }\n    toJSON() {\n        return this[kServerError];\n    }\n    toString() {\n        return `WriteConcernError(${this.errmsg})`;\n    }\n}\nexports.WriteConcernError = WriteConcernError;\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nclass WriteError {\n    constructor(err) {\n        this.err = err;\n    }\n    /** WriteError code. */\n    get code() {\n        return this.err.code;\n    }\n    /** WriteError original bulk operation index. */\n    get index() {\n        return this.err.index;\n    }\n    /** WriteError message. */\n    get errmsg() {\n        return this.err.errmsg;\n    }\n    /** WriteError details. */\n    get errInfo() {\n        return this.err.errInfo;\n    }\n    /** Returns the underlying operation that caused the error */\n    getOperation() {\n        return this.err.op;\n    }\n    toJSON() {\n        return { code: this.err.code, index: this.err.index, errmsg: this.err.errmsg, op: this.err.op };\n    }\n    toString() {\n        return `WriteError(${JSON.stringify(this.toJSON())})`;\n    }\n}\nexports.WriteError = WriteError;\n/** Converts the number to a Long or returns it. */\nfunction longOrConvert(value) {\n    return typeof value === 'number' ? bson_1.Long.fromNumber(value) : value;\n}\n/** Merges results into shared data structure */\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n    // If we have an error set the result to be the err object\n    if (err) {\n        result = err;\n    }\n    else if (result && result.result) {\n        result = result.result;\n    }\n    if (result == null) {\n        return;\n    }\n    // Do we have a top level error stop processing and return\n    if (result.ok === 0 && bulkResult.ok === 1) {\n        bulkResult.ok = 0;\n        const writeError = {\n            index: 0,\n            code: result.code || 0,\n            errmsg: result.message,\n            errInfo: result.errInfo,\n            op: batch.operations[0]\n        };\n        bulkResult.writeErrors.push(new WriteError(writeError));\n        return;\n    }\n    else if (result.ok === 0 && bulkResult.ok === 0) {\n        return;\n    }\n    // The server write command specification states that lastOp is an optional\n    // mongod only field that has a type of timestamp. Across various scarce specs\n    // where opTime is mentioned, it is an \"opaque\" object that can have a \"ts\" and\n    // \"t\" field with Timestamp and Long as their types respectively.\n    // The \"lastOp\" field of the bulk write result is never mentioned in the driver\n    // specifications or the bulk write spec, so we should probably just keep its\n    // value consistent since it seems to vary.\n    // See: https://github.com/mongodb/specifications/blob/master/source/driver-bulk-update.rst#results-object\n    if (result.opTime || result.lastOp) {\n        let opTime = result.lastOp || result.opTime;\n        // If the opTime is a Timestamp, convert it to a consistent format to be\n        // able to compare easily. Converting to the object from a timestamp is\n        // much more straightforward than the other direction.\n        if (opTime._bsontype === 'Timestamp') {\n            opTime = { ts: opTime, t: bson_1.Long.ZERO };\n        }\n        // If there's no lastOp, just set it.\n        if (!bulkResult.opTime) {\n            bulkResult.opTime = opTime;\n        }\n        else {\n            // First compare the ts values and set if the opTimeTS value is greater.\n            const lastOpTS = longOrConvert(bulkResult.opTime.ts);\n            const opTimeTS = longOrConvert(opTime.ts);\n            if (opTimeTS.greaterThan(lastOpTS)) {\n                bulkResult.opTime = opTime;\n            }\n            else if (opTimeTS.equals(lastOpTS)) {\n                // If the ts values are equal, then compare using the t values.\n                const lastOpT = longOrConvert(bulkResult.opTime.t);\n                const opTimeT = longOrConvert(opTime.t);\n                if (opTimeT.greaterThan(lastOpT)) {\n                    bulkResult.opTime = opTime;\n                }\n            }\n        }\n    }\n    // If we have an insert Batch type\n    if (isInsertBatch(batch) && result.n) {\n        bulkResult.nInserted = bulkResult.nInserted + result.n;\n    }\n    // If we have an insert Batch type\n    if (isDeleteBatch(batch) && result.n) {\n        bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n    }\n    let nUpserted = 0;\n    // We have an array of upserted values, we need to rewrite the indexes\n    if (Array.isArray(result.upserted)) {\n        nUpserted = result.upserted.length;\n        for (let i = 0; i < result.upserted.length; i++) {\n            bulkResult.upserted.push({\n                index: result.upserted[i].index + batch.originalZeroIndex,\n                _id: result.upserted[i]._id\n            });\n        }\n    }\n    else if (result.upserted) {\n        nUpserted = 1;\n        bulkResult.upserted.push({\n            index: batch.originalZeroIndex,\n            _id: result.upserted\n        });\n    }\n    // If we have an update Batch type\n    if (isUpdateBatch(batch) && result.n) {\n        const nModified = result.nModified;\n        bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n        bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n        if (typeof nModified === 'number') {\n            bulkResult.nModified = bulkResult.nModified + nModified;\n        }\n        else {\n            bulkResult.nModified = 0;\n        }\n    }\n    if (Array.isArray(result.writeErrors)) {\n        for (let i = 0; i < result.writeErrors.length; i++) {\n            const writeError = {\n                index: batch.originalIndexes[result.writeErrors[i].index],\n                code: result.writeErrors[i].code,\n                errmsg: result.writeErrors[i].errmsg,\n                errInfo: result.writeErrors[i].errInfo,\n                op: batch.operations[result.writeErrors[i].index]\n            };\n            bulkResult.writeErrors.push(new WriteError(writeError));\n        }\n    }\n    if (result.writeConcernError) {\n        bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n    }\n}\nexports.mergeBatchResults = mergeBatchResults;\nfunction executeCommands(bulkOperation, options, callback) {\n    if (bulkOperation.s.batches.length === 0) {\n        return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult));\n    }\n    const batch = bulkOperation.s.batches.shift();\n    function resultHandler(err, result) {\n        // Error is a driver related error not a bulk op error, return early\n        if (err && 'message' in err && !(err instanceof error_1.MongoWriteConcernError)) {\n            return callback(new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult)));\n        }\n        if (err instanceof error_1.MongoWriteConcernError) {\n            return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\n        }\n        // Merge the results together\n        const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\n        const mergeResult = mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n        if (mergeResult != null) {\n            return callback(undefined, writeResult);\n        }\n        if (bulkOperation.handleWriteError(callback, writeResult))\n            return;\n        // Execute the next command in line\n        executeCommands(bulkOperation, options, callback);\n    }\n    const finalOptions = (0, utils_1.resolveOptions)(bulkOperation, {\n        ...options,\n        ordered: bulkOperation.isOrdered\n    });\n    if (finalOptions.bypassDocumentValidation !== true) {\n        delete finalOptions.bypassDocumentValidation;\n    }\n    // Set an operationIf if provided\n    if (bulkOperation.operationId) {\n        resultHandler.operationId = bulkOperation.operationId;\n    }\n    // Is the bypassDocumentValidation options specific\n    if (bulkOperation.s.bypassDocumentValidation === true) {\n        finalOptions.bypassDocumentValidation = true;\n    }\n    // Is the checkKeys option disabled\n    if (bulkOperation.s.checkKeys === false) {\n        finalOptions.checkKeys = false;\n    }\n    if (finalOptions.retryWrites) {\n        if (isUpdateBatch(batch)) {\n            finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n        }\n        if (isDeleteBatch(batch)) {\n            finalOptions.retryWrites =\n                finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n        }\n    }\n    try {\n        if (isInsertBatch(batch)) {\n            (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n        }\n        else if (isUpdateBatch(batch)) {\n            (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n        }\n        else if (isDeleteBatch(batch)) {\n            (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n        }\n    }\n    catch (err) {\n        // Force top level error\n        err.ok = 0;\n        // Merge top level error and return\n        mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n        callback();\n    }\n}\nfunction handleMongoWriteConcernError(batch, bulkResult, err, callback) {\n    var _a, _b;\n    mergeBatchResults(batch, bulkResult, undefined, err.result);\n    callback(new MongoBulkWriteError({\n        message: (_a = err.result) === null || _a === void 0 ? void 0 : _a.writeConcernError.errmsg,\n        code: (_b = err.result) === null || _b === void 0 ? void 0 : _b.writeConcernError.result\n    }, new BulkWriteResult(bulkResult)));\n}\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nclass MongoBulkWriteError extends error_1.MongoServerError {\n    /** Creates a new MongoBulkWriteError */\n    constructor(error, result) {\n        var _a;\n        super(error);\n        this.writeErrors = [];\n        if (error instanceof WriteConcernError)\n            this.err = error;\n        else if (!(error instanceof Error)) {\n            this.message = error.message;\n            this.code = error.code;\n            this.writeErrors = (_a = error.writeErrors) !== null && _a !== void 0 ? _a : [];\n        }\n        this.result = result;\n        Object.assign(this, error);\n    }\n    get name() {\n        return 'MongoBulkWriteError';\n    }\n    /** Number of documents inserted. */\n    get insertedCount() {\n        return this.result.insertedCount;\n    }\n    /** Number of documents matched for update. */\n    get matchedCount() {\n        return this.result.matchedCount;\n    }\n    /** Number of documents modified. */\n    get modifiedCount() {\n        return this.result.modifiedCount;\n    }\n    /** Number of documents deleted. */\n    get deletedCount() {\n        return this.result.deletedCount;\n    }\n    /** Number of documents upserted. */\n    get upsertedCount() {\n        return this.result.upsertedCount;\n    }\n    /** Inserted document generated Id's, hash key is the index of the originating operation */\n    get insertedIds() {\n        return this.result.insertedIds;\n    }\n    /** Upserted document generated Id's, hash key is the index of the originating operation */\n    get upsertedIds() {\n        return this.result.upsertedIds;\n    }\n}\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nclass FindOperators {\n    /**\n     * Creates a new FindOperators object.\n     * @internal\n     */\n    constructor(bulkOperation) {\n        this.bulkOperation = bulkOperation;\n    }\n    /** Add a multiple update operation to the bulk operation */\n    update(updateDocument) {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, {\n            ...currentOp,\n            multi: true\n        }));\n    }\n    /** Add a single update operation to the bulk operation */\n    updateOne(updateDocument) {\n        if (!(0, utils_1.hasAtomicOperators)(updateDocument)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, { ...currentOp, multi: false }));\n    }\n    /** Add a replace one operation to the bulk operation */\n    replaceOne(replacement) {\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, { ...currentOp, multi: false }));\n    }\n    /** Add a delete one operation to the bulk operation */\n    deleteOne() {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp, limit: 1 }));\n    }\n    /** Add a delete many operation to the bulk operation */\n    delete() {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp, limit: 0 }));\n    }\n    /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n    upsert() {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.upsert = true;\n        return this;\n    }\n    /** Specifies the collation for the query condition. */\n    collation(collation) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.collation = collation;\n        return this;\n    }\n    /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n    arrayFilters(arrayFilters) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n        return this;\n    }\n}\nexports.FindOperators = FindOperators;\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\nclass BulkWriteShimOperation extends operation_1.AbstractOperation {\n    constructor(bulkOperation, options) {\n        super(options);\n        this.bulkOperation = bulkOperation;\n    }\n    execute(server, session, callback) {\n        if (this.options.session == null) {\n            // An implicit session could have been created by 'executeOperation'\n            // So if we stick it on finalOptions here, each bulk operation\n            // will use this same session, it'll be passed in the same way\n            // an explicit session would be\n            this.options.session = session;\n        }\n        return executeCommands(this.bulkOperation, this.options, callback);\n    }\n}\n/** @public */\nclass BulkOperationBase {\n    /**\n     * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n     * @internal\n     */\n    constructor(collection, options, isOrdered) {\n        // determine whether bulkOperation is ordered or unordered\n        this.isOrdered = isOrdered;\n        const topology = (0, utils_1.getTopology)(collection);\n        options = options == null ? {} : options;\n        // TODO Bring from driver information in hello\n        // Get the namespace for the write operations\n        const namespace = collection.s.namespace;\n        // Used to mark operation as executed\n        const executed = false;\n        // Current item\n        const currentOp = undefined;\n        // Set max byte size\n        const hello = topology.lastHello();\n        // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n        // over 2mb are still allowed\n        const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n        const maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n        const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n        const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n        // Calculates the largest possible size of an Array key, represented as a BSON string\n        // element. This calculation:\n        //     1 byte for BSON type\n        //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n        //   + 1 bytes for null terminator\n        const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n        // Final options for retryable writes\n        let finalOptions = Object.assign({}, options);\n        finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db);\n        // Final results\n        const bulkResult = {\n            ok: 1,\n            writeErrors: [],\n            writeConcernErrors: [],\n            insertedIds: [],\n            nInserted: 0,\n            nUpserted: 0,\n            nMatched: 0,\n            nModified: 0,\n            nRemoved: 0,\n            upserted: []\n        };\n        // Internal state\n        this.s = {\n            // Final result\n            bulkResult,\n            // Current batch state\n            currentBatch: undefined,\n            currentIndex: 0,\n            // ordered specific\n            currentBatchSize: 0,\n            currentBatchSizeBytes: 0,\n            // unordered specific\n            currentInsertBatch: undefined,\n            currentUpdateBatch: undefined,\n            currentRemoveBatch: undefined,\n            batches: [],\n            // Write concern\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Max batch size options\n            maxBsonObjectSize,\n            maxBatchSizeBytes,\n            maxWriteBatchSize,\n            maxKeySize,\n            // Namespace\n            namespace,\n            // Topology\n            topology,\n            // Options\n            options: finalOptions,\n            // BSON options\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n            // Current operation\n            currentOp,\n            // Executed\n            executed,\n            // Collection\n            collection,\n            // Fundamental error\n            err: undefined,\n            // check keys\n            checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n        };\n        // bypass Validation\n        if (options.bypassDocumentValidation === true) {\n            this.s.bypassDocumentValidation = true;\n        }\n    }\n    /**\n     * Add a single insert document to the bulk operation\n     *\n     * @example\n     * ```js\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Adds three inserts to the bulkOp.\n     * bulkOp\n     *   .insert({ a: 1 })\n     *   .insert({ b: 2 })\n     *   .insert({ c: 3 });\n     * await bulkOp.execute();\n     * ```\n     */\n    insert(document) {\n        if (document._id == null && !shouldForceServerObjectId(this)) {\n            document._id = new bson_1.ObjectId();\n        }\n        return this.addToOperationsList(exports.BatchType.INSERT, document);\n    }\n    /**\n     * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n     * Returns a builder object used to complete the definition of the operation.\n     *\n     * @example\n     * ```js\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Add an updateOne to the bulkOp\n     * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n     *\n     * // Add an updateMany to the bulkOp\n     * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n     *\n     * // Add an upsert\n     * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n     *\n     * // Add a deletion\n     * bulkOp.find({ g: 7 }).deleteOne();\n     *\n     * // Add a multi deletion\n     * bulkOp.find({ h: 8 }).delete();\n     *\n     * // Add a replaceOne\n     * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n     *\n     * // Update using a pipeline (requires Mongodb 4.2 or higher)\n     * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n     *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n     * ]);\n     *\n     * // All of the ops will now be executed\n     * await bulkOp.execute();\n     * ```\n     */\n    find(selector) {\n        if (!selector) {\n            throw new error_1.MongoInvalidArgumentError('Bulk find operation must specify a selector');\n        }\n        // Save a current selector\n        this.s.currentOp = {\n            selector: selector\n        };\n        return new FindOperators(this);\n    }\n    /** Specifies a raw operation to perform in the bulk write. */\n    raw(op) {\n        if (op == null || typeof op !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Operation must be an object with an operation key');\n        }\n        if ('insertOne' in op) {\n            const forceServerObjectId = shouldForceServerObjectId(this);\n            if (op.insertOne && op.insertOne.document == null) {\n                // NOTE: provided for legacy support, but this is a malformed operation\n                if (forceServerObjectId !== true && op.insertOne._id == null) {\n                    op.insertOne._id = new bson_1.ObjectId();\n                }\n                return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne);\n            }\n            if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n                op.insertOne.document._id = new bson_1.ObjectId();\n            }\n            return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne.document);\n        }\n        if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n            if ('replaceOne' in op) {\n                if ('q' in op.replaceOne) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, { ...op.replaceOne, multi: false });\n                if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n            if ('updateOne' in op) {\n                if ('q' in op.updateOne) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, {\n                    ...op.updateOne,\n                    multi: false\n                });\n                if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n            if ('updateMany' in op) {\n                if ('q' in op.updateMany) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, {\n                    ...op.updateMany,\n                    multi: true\n                });\n                if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n        }\n        if ('deleteOne' in op) {\n            if ('q' in op.deleteOne) {\n                throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n            }\n            return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, { ...op.deleteOne, limit: 1 }));\n        }\n        if ('deleteMany' in op) {\n            if ('q' in op.deleteMany) {\n                throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n            }\n            return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, { ...op.deleteMany, limit: 0 }));\n        }\n        // otherwise an unknown operation was provided\n        throw new error_1.MongoInvalidArgumentError('bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany');\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get batches() {\n        const batches = [...this.s.batches];\n        if (this.isOrdered) {\n            if (this.s.currentBatch)\n                batches.push(this.s.currentBatch);\n        }\n        else {\n            if (this.s.currentInsertBatch)\n                batches.push(this.s.currentInsertBatch);\n            if (this.s.currentUpdateBatch)\n                batches.push(this.s.currentUpdateBatch);\n            if (this.s.currentRemoveBatch)\n                batches.push(this.s.currentRemoveBatch);\n        }\n        return batches;\n    }\n    execute(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options !== null && options !== void 0 ? options : {};\n        if (this.s.executed) {\n            return handleEarlyError(new error_1.MongoBatchReExecutionError(), callback);\n        }\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            this.s.writeConcern = writeConcern;\n        }\n        // If we have current batch\n        if (this.isOrdered) {\n            if (this.s.currentBatch)\n                this.s.batches.push(this.s.currentBatch);\n        }\n        else {\n            if (this.s.currentInsertBatch)\n                this.s.batches.push(this.s.currentInsertBatch);\n            if (this.s.currentUpdateBatch)\n                this.s.batches.push(this.s.currentUpdateBatch);\n            if (this.s.currentRemoveBatch)\n                this.s.batches.push(this.s.currentRemoveBatch);\n        }\n        // If we have no operations in the bulk raise an error\n        if (this.s.batches.length === 0) {\n            const emptyBatchError = new error_1.MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n            return handleEarlyError(emptyBatchError, callback);\n        }\n        this.s.executed = true;\n        const finalOptions = { ...this.s.options, ...options };\n        const operation = new BulkWriteShimOperation(this, finalOptions);\n        return (0, execute_operation_1.executeOperation)(this.s.collection.s.db.s.client, operation, callback);\n    }\n    /**\n     * Handles the write error before executing commands\n     * @internal\n     */\n    handleWriteError(callback, writeResult) {\n        if (this.s.bulkResult.writeErrors.length > 0) {\n            const msg = this.s.bulkResult.writeErrors[0].errmsg\n                ? this.s.bulkResult.writeErrors[0].errmsg\n                : 'write operation failed';\n            callback(new MongoBulkWriteError({\n                message: msg,\n                code: this.s.bulkResult.writeErrors[0].code,\n                writeErrors: this.s.bulkResult.writeErrors\n            }, writeResult));\n            return true;\n        }\n        const writeConcernError = writeResult.getWriteConcernError();\n        if (writeConcernError) {\n            callback(new MongoBulkWriteError(writeConcernError, writeResult));\n            return true;\n        }\n        return false;\n    }\n}\nexports.BulkOperationBase = BulkOperationBase;\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n    enumerable: true,\n    get() {\n        return this.s.currentIndex;\n    }\n});\n/** helper function to assist with promiseOrCallback behavior */\nfunction handleEarlyError(err, callback) {\n    const Promise = promise_provider_1.PromiseProvider.get();\n    if (typeof callback === 'function') {\n        callback(err);\n        return;\n    }\n    return Promise.reject(err);\n}\nfunction shouldForceServerObjectId(bulkOperation) {\n    var _a, _b;\n    if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\n        return bulkOperation.s.options.forceServerObjectId;\n    }\n    if (typeof ((_a = bulkOperation.s.collection.s.db.options) === null || _a === void 0 ? void 0 : _a.forceServerObjectId) === 'boolean') {\n        return (_b = bulkOperation.s.collection.s.db.options) === null || _b === void 0 ? void 0 : _b.forceServerObjectId;\n    }\n    return false;\n}\nfunction isInsertBatch(batch) {\n    return batch.batchType === exports.BatchType.INSERT;\n}\nfunction isUpdateBatch(batch) {\n    return batch.batchType === exports.BatchType.UPDATE;\n}\nfunction isDeleteBatch(batch) {\n    return batch.batchType === exports.BatchType.DELETE;\n}\nfunction buildCurrentOp(bulkOp) {\n    let { currentOp } = bulkOp.s;\n    bulkOp.s.currentOp = undefined;\n    if (!currentOp)\n        currentOp = {};\n    return currentOp;\n}\n//# sourceMappingURL=common.js.map"]},"metadata":{},"sourceType":"script"}