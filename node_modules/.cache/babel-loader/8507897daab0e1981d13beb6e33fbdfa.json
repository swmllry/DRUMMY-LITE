{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defineAspects = exports.AbstractOperation = exports.Aspect = void 0;\n\nconst bson_1 = require(\"../bson\");\n\nconst read_preference_1 = require(\"../read_preference\");\n\nexports.Aspect = {\n  READ_OPERATION: Symbol('READ_OPERATION'),\n  WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n  RETRYABLE: Symbol('RETRYABLE'),\n  EXPLAINABLE: Symbol('EXPLAINABLE'),\n  SKIP_COLLATION: Symbol('SKIP_COLLATION'),\n  CURSOR_CREATING: Symbol('CURSOR_CREATING'),\n  MUST_SELECT_SAME_SERVER: Symbol('MUST_SELECT_SAME_SERVER')\n};\n/** @internal */\n\nconst kSession = Symbol('session');\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n * @internal\n */\n\nclass AbstractOperation {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _a;\n\n    this.readPreference = this.hasAspect(exports.Aspect.WRITE_OPERATION) ? read_preference_1.ReadPreference.primary : (_a = read_preference_1.ReadPreference.fromOptions(options)) !== null && _a !== void 0 ? _a : read_preference_1.ReadPreference.primary; // Pull the BSON serialize options from the already-resolved options\n\n    this.bsonOptions = (0, bson_1.resolveBSONOptions)(options);\n    this[kSession] = options.session != null ? options.session : undefined;\n    this.options = options;\n    this.bypassPinningCheck = !!options.bypassPinningCheck;\n    this.trySecondaryWrite = false;\n  }\n\n  hasAspect(aspect) {\n    const ctor = this.constructor;\n\n    if (ctor.aspects == null) {\n      return false;\n    }\n\n    return ctor.aspects.has(aspect);\n  }\n\n  get session() {\n    return this[kSession];\n  }\n\n  clearSession() {\n    this[kSession] = undefined;\n  }\n\n  get canRetryRead() {\n    return true;\n  }\n\n  get canRetryWrite() {\n    return true;\n  }\n\n}\n\nexports.AbstractOperation = AbstractOperation;\n\nfunction defineAspects(operation, aspects) {\n  if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n    aspects = [aspects];\n  }\n\n  aspects = new Set(aspects);\n  Object.defineProperty(operation, 'aspects', {\n    value: aspects,\n    writable: false\n  });\n  return aspects;\n}\n\nexports.defineAspects = defineAspects;","map":{"version":3,"sources":["../../src/operations/operation.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,iBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAKa,OAAA,CAAA,MAAA,GAAS;EACpB,cAAc,EAAE,MAAM,CAAC,gBAAD,CADF;EAEpB,eAAe,EAAE,MAAM,CAAC,iBAAD,CAFH;EAGpB,SAAS,EAAE,MAAM,CAAC,WAAD,CAHG;EAIpB,WAAW,EAAE,MAAM,CAAC,aAAD,CAJC;EAKpB,cAAc,EAAE,MAAM,CAAC,gBAAD,CALF;EAMpB,eAAe,EAAE,MAAM,CAAC,iBAAD,CANH;EAOpB,uBAAuB,EAAE,MAAM,CAAC,yBAAD;AAPX,CAAT;AA+Bb;;AACA,MAAM,QAAQ,GAAG,MAAM,CAAC,SAAD,CAAvB;AAEA;;;;;;AAMG;;AACH,MAAsB,iBAAtB,CAAuC;EAerC,WAAA,GAA0C;IAAA,IAA9B,OAA8B,uEAAF,EAAE;;;;IACxC,KAAK,cAAL,GAAsB,KAAK,SAAL,CAAe,OAAA,CAAA,MAAA,CAAO,eAAtB,IAClB,iBAAA,CAAA,cAAA,CAAe,OADG,GAElB,CAAA,EAAA,GAAA,iBAAA,CAAA,cAAA,CAAe,WAAf,CAA2B,OAA3B,CAAA,MAAmC,IAAnC,IAAmC,EAAA,KAAA,KAAA,CAAnC,GAAmC,EAAnC,GAAuC,iBAAA,CAAA,cAAA,CAAe,OAF1D,CADwC,CAKxC;;IACA,KAAK,WAAL,GAAmB,CAAA,GAAA,MAAA,CAAA,kBAAA,EAAmB,OAAnB,CAAnB;IAEA,KAAK,QAAL,IAAiB,OAAO,CAAC,OAAR,IAAmB,IAAnB,GAA0B,OAAO,CAAC,OAAlC,GAA4C,SAA7D;IAEA,KAAK,OAAL,GAAe,OAAf;IACA,KAAK,kBAAL,GAA0B,CAAC,CAAC,OAAO,CAAC,kBAApC;IACA,KAAK,iBAAL,GAAyB,KAAzB;EACD;;EAQD,SAAS,CAAC,MAAD,EAAe;IACtB,MAAM,IAAI,GAAG,KAAK,WAAlB;;IACA,IAAI,IAAI,CAAC,OAAL,IAAgB,IAApB,EAA0B;MACxB,OAAO,KAAP;IACD;;IAED,OAAO,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,MAAjB,CAAP;EACD;;EAEU,IAAP,OAAO,GAAA;IACT,OAAO,KAAK,QAAL,CAAP;EACD;;EAED,YAAY,GAAA;IACV,KAAK,QAAL,IAAiB,SAAjB;EACD;;EAEe,IAAZ,YAAY,GAAA;IACd,OAAO,IAAP;EACD;;EAEgB,IAAb,aAAa,GAAA;IACf,OAAO,IAAP;EACD;;AA3DoC;;AAAvC,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AA8DA,SAAgB,aAAhB,CACE,SADF,EAEE,OAFF,EAE0C;EAExC,IAAI,CAAC,KAAK,CAAC,OAAN,CAAc,OAAd,CAAD,IAA2B,EAAE,OAAO,YAAY,GAArB,CAA/B,EAA0D;IACxD,OAAO,GAAG,CAAC,OAAD,CAAV;EACD;;EAED,OAAO,GAAG,IAAI,GAAJ,CAAQ,OAAR,CAAV;EACA,MAAM,CAAC,cAAP,CAAsB,SAAtB,EAAiC,SAAjC,EAA4C;IAC1C,KAAK,EAAE,OADmC;IAE1C,QAAQ,EAAE;EAFgC,CAA5C;EAKA,OAAO,OAAP;AACD;;AAfD,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defineAspects = exports.AbstractOperation = exports.Aspect = void 0;\nconst bson_1 = require(\"../bson\");\nconst read_preference_1 = require(\"../read_preference\");\nexports.Aspect = {\n    READ_OPERATION: Symbol('READ_OPERATION'),\n    WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n    RETRYABLE: Symbol('RETRYABLE'),\n    EXPLAINABLE: Symbol('EXPLAINABLE'),\n    SKIP_COLLATION: Symbol('SKIP_COLLATION'),\n    CURSOR_CREATING: Symbol('CURSOR_CREATING'),\n    MUST_SELECT_SAME_SERVER: Symbol('MUST_SELECT_SAME_SERVER')\n};\n/** @internal */\nconst kSession = Symbol('session');\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n * @internal\n */\nclass AbstractOperation {\n    constructor(options = {}) {\n        var _a;\n        this.readPreference = this.hasAspect(exports.Aspect.WRITE_OPERATION)\n            ? read_preference_1.ReadPreference.primary\n            : (_a = read_preference_1.ReadPreference.fromOptions(options)) !== null && _a !== void 0 ? _a : read_preference_1.ReadPreference.primary;\n        // Pull the BSON serialize options from the already-resolved options\n        this.bsonOptions = (0, bson_1.resolveBSONOptions)(options);\n        this[kSession] = options.session != null ? options.session : undefined;\n        this.options = options;\n        this.bypassPinningCheck = !!options.bypassPinningCheck;\n        this.trySecondaryWrite = false;\n    }\n    hasAspect(aspect) {\n        const ctor = this.constructor;\n        if (ctor.aspects == null) {\n            return false;\n        }\n        return ctor.aspects.has(aspect);\n    }\n    get session() {\n        return this[kSession];\n    }\n    clearSession() {\n        this[kSession] = undefined;\n    }\n    get canRetryRead() {\n        return true;\n    }\n    get canRetryWrite() {\n        return true;\n    }\n}\nexports.AbstractOperation = AbstractOperation;\nfunction defineAspects(operation, aspects) {\n    if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n        aspects = [aspects];\n    }\n    aspects = new Set(aspects);\n    Object.defineProperty(operation, 'aspects', {\n        value: aspects,\n        writable: false\n    });\n    return aspects;\n}\nexports.defineAspects = defineAspects;\n//# sourceMappingURL=operation.js.map"]},"metadata":{},"sourceType":"script"}