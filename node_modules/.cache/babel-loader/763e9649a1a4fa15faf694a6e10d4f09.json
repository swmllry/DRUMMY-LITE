{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DropDatabaseOperation = exports.DropCollectionOperation = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n/** @internal */\n\n\nclass DropCollectionOperation extends command_1.CommandOperation {\n  constructor(db, name) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(db, options);\n    this.db = db;\n    this.options = options;\n    this.name = name;\n  }\n\n  execute(server, session, callback) {\n    (async () => {\n      var _a, _b, _c, _d;\n\n      const db = this.db;\n      const options = this.options;\n      const name = this.name;\n      const encryptedFieldsMap = (_a = db.s.client.options.autoEncryption) === null || _a === void 0 ? void 0 : _a.encryptedFieldsMap;\n      let encryptedFields = (_b = options.encryptedFields) !== null && _b !== void 0 ? _b : encryptedFieldsMap === null || encryptedFieldsMap === void 0 ? void 0 : encryptedFieldsMap[`${db.databaseName}.${name}`];\n\n      if (!encryptedFields && encryptedFieldsMap) {\n        // If the MongoClient was configued with an encryptedFieldsMap,\n        // and no encryptedFields config was available in it or explicitly\n        // passed as an argument, the spec tells us to look one up using\n        // listCollections().\n        const listCollectionsResult = await db.listCollections({\n          name\n        }, {\n          nameOnly: false\n        }).toArray();\n        encryptedFields = (_d = (_c = listCollectionsResult === null || listCollectionsResult === void 0 ? void 0 : listCollectionsResult[0]) === null || _c === void 0 ? void 0 : _c.options) === null || _d === void 0 ? void 0 : _d.encryptedFields;\n      }\n\n      if (encryptedFields) {\n        const escCollection = encryptedFields.escCollection || `enxcol_.${name}.esc`;\n        const eccCollection = encryptedFields.eccCollection || `enxcol_.${name}.ecc`;\n        const ecocCollection = encryptedFields.ecocCollection || `enxcol_.${name}.ecoc`;\n\n        for (const collectionName of [escCollection, eccCollection, ecocCollection]) {\n          // Drop auxilliary collections, ignoring potential NamespaceNotFound errors.\n          const dropOp = new DropCollectionOperation(db, collectionName);\n\n          try {\n            await dropOp.executeWithoutEncryptedFieldsCheck(server, session);\n          } catch (err) {\n            if (!(err instanceof error_1.MongoServerError) || err.code !== error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n              throw err;\n            }\n          }\n        }\n      }\n\n      return await this.executeWithoutEncryptedFieldsCheck(server, session);\n    })().then(result => callback(undefined, result), err => callback(err));\n  }\n\n  executeWithoutEncryptedFieldsCheck(server, session) {\n    return new Promise((resolve, reject) => {\n      super.executeCommand(server, session, {\n        drop: this.name\n      }, (err, result) => {\n        if (err) return reject(err);\n        resolve(!!result.ok);\n      });\n    });\n  }\n\n}\n\nexports.DropCollectionOperation = DropCollectionOperation;\n/** @internal */\n\nclass DropDatabaseOperation extends command_1.CommandOperation {\n  constructor(db, options) {\n    super(db, options);\n    this.options = options;\n  }\n\n  execute(server, session, callback) {\n    super.executeCommand(server, session, {\n      dropDatabase: 1\n    }, (err, result) => {\n      if (err) return callback(err);\n      if (result.ok) return callback(undefined, true);\n      callback(undefined, false);\n    });\n  }\n\n}\n\nexports.DropDatabaseOperation = DropDatabaseOperation;\n(0, operation_1.defineAspects)(DropCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropDatabaseOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"sources":["../../src/operations/drop.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DropDatabaseOperation = exports.DropCollectionOperation = void 0;\nconst error_1 = require(\"../error\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass DropCollectionOperation extends command_1.CommandOperation {\n    constructor(db, name, options = {}) {\n        super(db, options);\n        this.db = db;\n        this.options = options;\n        this.name = name;\n    }\n    execute(server, session, callback) {\n        (async () => {\n            var _a, _b, _c, _d;\n            const db = this.db;\n            const options = this.options;\n            const name = this.name;\n            const encryptedFieldsMap = (_a = db.s.client.options.autoEncryption) === null || _a === void 0 ? void 0 : _a.encryptedFieldsMap;\n            let encryptedFields = (_b = options.encryptedFields) !== null && _b !== void 0 ? _b : encryptedFieldsMap === null || encryptedFieldsMap === void 0 ? void 0 : encryptedFieldsMap[`${db.databaseName}.${name}`];\n            if (!encryptedFields && encryptedFieldsMap) {\n                // If the MongoClient was configued with an encryptedFieldsMap,\n                // and no encryptedFields config was available in it or explicitly\n                // passed as an argument, the spec tells us to look one up using\n                // listCollections().\n                const listCollectionsResult = await db\n                    .listCollections({ name }, { nameOnly: false })\n                    .toArray();\n                encryptedFields = (_d = (_c = listCollectionsResult === null || listCollectionsResult === void 0 ? void 0 : listCollectionsResult[0]) === null || _c === void 0 ? void 0 : _c.options) === null || _d === void 0 ? void 0 : _d.encryptedFields;\n            }\n            if (encryptedFields) {\n                const escCollection = encryptedFields.escCollection || `enxcol_.${name}.esc`;\n                const eccCollection = encryptedFields.eccCollection || `enxcol_.${name}.ecc`;\n                const ecocCollection = encryptedFields.ecocCollection || `enxcol_.${name}.ecoc`;\n                for (const collectionName of [escCollection, eccCollection, ecocCollection]) {\n                    // Drop auxilliary collections, ignoring potential NamespaceNotFound errors.\n                    const dropOp = new DropCollectionOperation(db, collectionName);\n                    try {\n                        await dropOp.executeWithoutEncryptedFieldsCheck(server, session);\n                    }\n                    catch (err) {\n                        if (!(err instanceof error_1.MongoServerError) ||\n                            err.code !== error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n                            throw err;\n                        }\n                    }\n                }\n            }\n            return await this.executeWithoutEncryptedFieldsCheck(server, session);\n        })().then(result => callback(undefined, result), err => callback(err));\n    }\n    executeWithoutEncryptedFieldsCheck(server, session) {\n        return new Promise((resolve, reject) => {\n            super.executeCommand(server, session, { drop: this.name }, (err, result) => {\n                if (err)\n                    return reject(err);\n                resolve(!!result.ok);\n            });\n        });\n    }\n}\nexports.DropCollectionOperation = DropCollectionOperation;\n/** @internal */\nclass DropDatabaseOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options;\n    }\n    execute(server, session, callback) {\n        super.executeCommand(server, session, { dropDatabase: 1 }, (err, result) => {\n            if (err)\n                return callback(err);\n            if (result.ok)\n                return callback(undefined, true);\n            callback(undefined, false);\n        });\n    }\n}\nexports.DropDatabaseOperation = DropDatabaseOperation;\n(0, operation_1.defineAspects)(DropCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropDatabaseOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=drop.js.map"]},"metadata":{},"sourceType":"script"}