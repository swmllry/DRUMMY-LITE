{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Db = void 0;\n\nconst admin_1 = require(\"./admin\");\n\nconst bson_1 = require(\"./bson\");\n\nconst change_stream_1 = require(\"./change_stream\");\n\nconst collection_1 = require(\"./collection\");\n\nconst CONSTANTS = require(\"./constants\");\n\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\n\nconst list_collections_cursor_1 = require(\"./cursor/list_collections_cursor\");\n\nconst error_1 = require(\"./error\");\n\nconst logger_1 = require(\"./logger\");\n\nconst add_user_1 = require(\"./operations/add_user\");\n\nconst collections_1 = require(\"./operations/collections\");\n\nconst create_collection_1 = require(\"./operations/create_collection\");\n\nconst drop_1 = require(\"./operations/drop\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst indexes_1 = require(\"./operations/indexes\");\n\nconst profiling_level_1 = require(\"./operations/profiling_level\");\n\nconst remove_user_1 = require(\"./operations/remove_user\");\n\nconst rename_1 = require(\"./operations/rename\");\n\nconst run_command_1 = require(\"./operations/run_command\");\n\nconst set_profiling_level_1 = require(\"./operations/set_profiling_level\");\n\nconst stats_1 = require(\"./operations/stats\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst utils_1 = require(\"./utils\");\n\nconst write_concern_1 = require(\"./write_concern\"); // Allowed parameters\n\n\nconst DB_OPTIONS_ALLOW_LIST = ['writeConcern', 'readPreference', 'readPreferenceTags', 'native_parser', 'forceServerObjectId', 'pkFactory', 'serializeFunctions', 'raw', 'authSource', 'ignoreUndefined', 'readConcern', 'retryMiliSeconds', 'numberOfRetries', 'loggerLevel', 'logger', 'promoteBuffers', 'promoteLongs', 'bsonRegExp', 'enableUtf8Validation', 'promoteValues', 'compression', 'retryWrites'];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```js\n * const { MongoClient } = require('mongodb');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Select the database by name\n *   const testDb = client.db(dbName);\n *   client.close();\n * });\n * ```\n */\n\nclass Db {\n  /**\n   * Creates a new Db instance\n   *\n   * @param client - The MongoClient for the database.\n   * @param databaseName - The name of the database this instance represents.\n   * @param options - Optional settings for Db construction\n   */\n  constructor(client, databaseName, options) {\n    var _a;\n\n    options = options !== null && options !== void 0 ? options : {}; // Filter the options\n\n    options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST); // Ensure we have a valid db name\n\n    validateDatabaseName(databaseName); // Internal state of the db object\n\n    this.s = {\n      // Client\n      client,\n      // Options\n      options,\n      // Logger instance\n      logger: new logger_1.Logger('Db', options),\n      // Unpack read preference\n      readPreference: read_preference_1.ReadPreference.fromOptions(options),\n      // Merge bson options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n      // Set up the primary key factory or fallback to ObjectId\n      pkFactory: (_a = options === null || options === void 0 ? void 0 : options.pkFactory) !== null && _a !== void 0 ? _a : utils_1.DEFAULT_PK_FACTORY,\n      // ReadConcern\n      readConcern: read_concern_1.ReadConcern.fromOptions(options),\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Namespace\n      namespace: new utils_1.MongoDBNamespace(databaseName)\n    };\n  }\n\n  get databaseName() {\n    return this.s.namespace.db;\n  } // Options\n\n\n  get options() {\n    return this.s.options;\n  }\n  /**\n   * slaveOk specified\n   * @deprecated Use secondaryOk instead\n   */\n\n\n  get slaveOk() {\n    return this.secondaryOk;\n  }\n  /**\n   * Check if a secondary can be used (because the read preference is *not* set to primary)\n   */\n\n\n  get secondaryOk() {\n    var _a;\n\n    return ((_a = this.s.readPreference) === null || _a === void 0 ? void 0 : _a.preference) !== 'primary' || false;\n  }\n\n  get readConcern() {\n    return this.s.readConcern;\n  }\n  /**\n   * The current readPreference of the Db. If not explicitly defined for\n   * this Db, will be inherited from the parent MongoClient\n   */\n\n\n  get readPreference() {\n    if (this.s.readPreference == null) {\n      return this.s.client.readPreference;\n    }\n\n    return this.s.readPreference;\n  }\n\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  } // get the write Concern\n\n\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n\n  get namespace() {\n    return this.s.namespace.toString();\n  }\n\n  createCollection(name, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new create_collection_1.CreateCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  command(command, options, callback) {\n    if (typeof options === 'function') callback = options, options = {}; // Intentionally, we do not inherit options from parent for this operation.\n\n    return (0, execute_operation_1.executeOperation)(this.s.client, new run_command_1.RunCommandOperation(this, command, options !== null && options !== void 0 ? options : {}), callback);\n  }\n  /**\n   * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n   *\n   * @param pipeline - An array of aggregation stages to be executed\n   * @param options - Optional settings for the command\n   */\n\n\n  aggregate() {\n    let pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n\n    if (arguments.length > 2) {\n      throw new error_1.MongoInvalidArgumentError('Method \"db.aggregate()\" accepts at most two arguments');\n    }\n\n    if (typeof pipeline === 'function') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"pipeline\" must not be function');\n    }\n\n    if (typeof options === 'function') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"options\" must not be function');\n    }\n\n    return new aggregation_cursor_1.AggregationCursor(this.s.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /** Return the Admin db instance */\n\n\n  admin() {\n    return new admin_1.Admin(this);\n  }\n  /**\n   * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n   *\n   * @param name - the collection name we wish to access.\n   * @returns return the new Collection instance\n   */\n\n\n  collection(name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (typeof options === 'function') {\n      throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n    }\n\n    const finalOptions = (0, utils_1.resolveOptions)(this, options);\n    return new collection_1.Collection(this, name, finalOptions);\n  }\n\n  stats(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new stats_1.DbStatsOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  listCollections() {\n    let filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new list_collections_cursor_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n  }\n\n  renameCollection(fromCollection, toCollection, options, callback) {\n    if (typeof options === 'function') callback = options, options = {}; // Intentionally, we do not inherit options from parent for this operation.\n\n    options = { ...options,\n      readPreference: read_preference_1.ReadPreference.PRIMARY\n    }; // Add return new collection\n\n    options.new_collection = true;\n    return (0, execute_operation_1.executeOperation)(this.s.client, new rename_1.RenameOperation(this.collection(fromCollection), toCollection, options), callback);\n  }\n\n  dropCollection(name, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new drop_1.DropCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  dropDatabase(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new drop_1.DropDatabaseOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  collections(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new collections_1.CollectionsOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  createIndex(name, indexSpec, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new indexes_1.CreateIndexOperation(this, name, indexSpec, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  addUser(username, password, options, callback) {\n    if (typeof password === 'function') {\n      callback = password, password = undefined, options = {};\n    } else if (typeof password !== 'string') {\n      if (typeof options === 'function') {\n        callback = options, options = password, password = undefined;\n      } else {\n        options = password, callback = undefined, password = undefined;\n      }\n    } else {\n      if (typeof options === 'function') callback = options, options = {};\n    }\n\n    return (0, execute_operation_1.executeOperation)(this.s.client, new add_user_1.AddUserOperation(this, username, password, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  removeUser(username, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new remove_user_1.RemoveUserOperation(this, username, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  setProfilingLevel(level, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new set_profiling_level_1.SetProfilingLevelOperation(this, level, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  profilingLevel(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new profiling_level_1.ProfilingLevelOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  indexInformation(name, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new indexes_1.IndexInformationOperation(this, name, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  /**\n   * Unref all sockets\n   * @deprecated This function is deprecated and will be removed in the next major version.\n   */\n\n\n  unref() {\n    (0, utils_1.getTopology)(this).unref();\n  }\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates,\n   * replacements, deletions, and invalidations) in this database. Will ignore all\n   * changes to system collections.\n   *\n   * @remarks\n   * watch() accepts two generic arguments for distinct usecases:\n   * - The first is to provide the schema that may be defined for all the collections within this database\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n   *\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   * @typeParam TSchema - Type of the data being detected by the change stream\n   * @typeParam TChange - Type of the whole change stream document emitted\n   */\n\n\n  watch() {\n    let pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n\n    return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /** Return the db logger */\n\n\n  getLogger() {\n    return this.s.logger;\n  }\n\n  get logger() {\n    return this.s.logger;\n  }\n\n}\n\nexports.Db = Db;\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION; // TODO(NODE-3484): Refactor into MongoDBNamespace\n// Validate the database name\n\nfunction validateDatabaseName(databaseName) {\n  if (typeof databaseName !== 'string') throw new error_1.MongoInvalidArgumentError('Database name must be a string');\n  if (databaseName.length === 0) throw new error_1.MongoInvalidArgumentError('Database name cannot be the empty string');\n  if (databaseName === '$external') return;\n  const invalidChars = [' ', '.', '$', '/', '\\\\'];\n\n  for (let i = 0; i < invalidChars.length; i++) {\n    if (databaseName.indexOf(invalidChars[i]) !== -1) throw new error_1.MongoAPIError(`database names cannot contain the character '${invalidChars[i]}'`);\n  }\n}","map":{"version":3,"sources":["../src/db.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Db = void 0;\nconst admin_1 = require(\"./admin\");\nconst bson_1 = require(\"./bson\");\nconst change_stream_1 = require(\"./change_stream\");\nconst collection_1 = require(\"./collection\");\nconst CONSTANTS = require(\"./constants\");\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\nconst list_collections_cursor_1 = require(\"./cursor/list_collections_cursor\");\nconst error_1 = require(\"./error\");\nconst logger_1 = require(\"./logger\");\nconst add_user_1 = require(\"./operations/add_user\");\nconst collections_1 = require(\"./operations/collections\");\nconst create_collection_1 = require(\"./operations/create_collection\");\nconst drop_1 = require(\"./operations/drop\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst indexes_1 = require(\"./operations/indexes\");\nconst profiling_level_1 = require(\"./operations/profiling_level\");\nconst remove_user_1 = require(\"./operations/remove_user\");\nconst rename_1 = require(\"./operations/rename\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst set_profiling_level_1 = require(\"./operations/set_profiling_level\");\nconst stats_1 = require(\"./operations/stats\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = [\n    'writeConcern',\n    'readPreference',\n    'readPreferenceTags',\n    'native_parser',\n    'forceServerObjectId',\n    'pkFactory',\n    'serializeFunctions',\n    'raw',\n    'authSource',\n    'ignoreUndefined',\n    'readConcern',\n    'retryMiliSeconds',\n    'numberOfRetries',\n    'loggerLevel',\n    'logger',\n    'promoteBuffers',\n    'promoteLongs',\n    'bsonRegExp',\n    'enableUtf8Validation',\n    'promoteValues',\n    'compression',\n    'retryWrites'\n];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```js\n * const { MongoClient } = require('mongodb');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Select the database by name\n *   const testDb = client.db(dbName);\n *   client.close();\n * });\n * ```\n */\nclass Db {\n    /**\n     * Creates a new Db instance\n     *\n     * @param client - The MongoClient for the database.\n     * @param databaseName - The name of the database this instance represents.\n     * @param options - Optional settings for Db construction\n     */\n    constructor(client, databaseName, options) {\n        var _a;\n        options = options !== null && options !== void 0 ? options : {};\n        // Filter the options\n        options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST);\n        // Ensure we have a valid db name\n        validateDatabaseName(databaseName);\n        // Internal state of the db object\n        this.s = {\n            // Client\n            client,\n            // Options\n            options,\n            // Logger instance\n            logger: new logger_1.Logger('Db', options),\n            // Unpack read preference\n            readPreference: read_preference_1.ReadPreference.fromOptions(options),\n            // Merge bson options\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n            // Set up the primary key factory or fallback to ObjectId\n            pkFactory: (_a = options === null || options === void 0 ? void 0 : options.pkFactory) !== null && _a !== void 0 ? _a : utils_1.DEFAULT_PK_FACTORY,\n            // ReadConcern\n            readConcern: read_concern_1.ReadConcern.fromOptions(options),\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Namespace\n            namespace: new utils_1.MongoDBNamespace(databaseName)\n        };\n    }\n    get databaseName() {\n        return this.s.namespace.db;\n    }\n    // Options\n    get options() {\n        return this.s.options;\n    }\n    /**\n     * slaveOk specified\n     * @deprecated Use secondaryOk instead\n     */\n    get slaveOk() {\n        return this.secondaryOk;\n    }\n    /**\n     * Check if a secondary can be used (because the read preference is *not* set to primary)\n     */\n    get secondaryOk() {\n        var _a;\n        return ((_a = this.s.readPreference) === null || _a === void 0 ? void 0 : _a.preference) !== 'primary' || false;\n    }\n    get readConcern() {\n        return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the Db. If not explicitly defined for\n     * this Db, will be inherited from the parent MongoClient\n     */\n    get readPreference() {\n        if (this.s.readPreference == null) {\n            return this.s.client.readPreference;\n        }\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    // get the write Concern\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get namespace() {\n        return this.s.namespace.toString();\n    }\n    createCollection(name, options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        return (0, execute_operation_1.executeOperation)(this.s.client, new create_collection_1.CreateCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)), callback);\n    }\n    command(command, options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        // Intentionally, we do not inherit options from parent for this operation.\n        return (0, execute_operation_1.executeOperation)(this.s.client, new run_command_1.RunCommandOperation(this, command, options !== null && options !== void 0 ? options : {}), callback);\n    }\n    /**\n     * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n     *\n     * @param pipeline - An array of aggregation stages to be executed\n     * @param options - Optional settings for the command\n     */\n    aggregate(pipeline = [], options) {\n        if (arguments.length > 2) {\n            throw new error_1.MongoInvalidArgumentError('Method \"db.aggregate()\" accepts at most two arguments');\n        }\n        if (typeof pipeline === 'function') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"pipeline\" must not be function');\n        }\n        if (typeof options === 'function') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"options\" must not be function');\n        }\n        return new aggregation_cursor_1.AggregationCursor(this.s.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /** Return the Admin db instance */\n    admin() {\n        return new admin_1.Admin(this);\n    }\n    /**\n     * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n     *\n     * @param name - the collection name we wish to access.\n     * @returns return the new Collection instance\n     */\n    collection(name, options = {}) {\n        if (typeof options === 'function') {\n            throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n        }\n        const finalOptions = (0, utils_1.resolveOptions)(this, options);\n        return new collection_1.Collection(this, name, finalOptions);\n    }\n    stats(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        return (0, execute_operation_1.executeOperation)(this.s.client, new stats_1.DbStatsOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n    }\n    listCollections(filter = {}, options = {}) {\n        return new list_collections_cursor_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    renameCollection(fromCollection, toCollection, options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        // Intentionally, we do not inherit options from parent for this operation.\n        options = { ...options, readPreference: read_preference_1.ReadPreference.PRIMARY };\n        // Add return new collection\n        options.new_collection = true;\n        return (0, execute_operation_1.executeOperation)(this.s.client, new rename_1.RenameOperation(this.collection(fromCollection), toCollection, options), callback);\n    }\n    dropCollection(name, options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        return (0, execute_operation_1.executeOperation)(this.s.client, new drop_1.DropCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)), callback);\n    }\n    dropDatabase(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        return (0, execute_operation_1.executeOperation)(this.s.client, new drop_1.DropDatabaseOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n    }\n    collections(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        return (0, execute_operation_1.executeOperation)(this.s.client, new collections_1.CollectionsOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n    }\n    createIndex(name, indexSpec, options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        return (0, execute_operation_1.executeOperation)(this.s.client, new indexes_1.CreateIndexOperation(this, name, indexSpec, (0, utils_1.resolveOptions)(this, options)), callback);\n    }\n    addUser(username, password, options, callback) {\n        if (typeof password === 'function') {\n            (callback = password), (password = undefined), (options = {});\n        }\n        else if (typeof password !== 'string') {\n            if (typeof options === 'function') {\n                (callback = options), (options = password), (password = undefined);\n            }\n            else {\n                (options = password), (callback = undefined), (password = undefined);\n            }\n        }\n        else {\n            if (typeof options === 'function')\n                (callback = options), (options = {});\n        }\n        return (0, execute_operation_1.executeOperation)(this.s.client, new add_user_1.AddUserOperation(this, username, password, (0, utils_1.resolveOptions)(this, options)), callback);\n    }\n    removeUser(username, options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        return (0, execute_operation_1.executeOperation)(this.s.client, new remove_user_1.RemoveUserOperation(this, username, (0, utils_1.resolveOptions)(this, options)), callback);\n    }\n    setProfilingLevel(level, options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        return (0, execute_operation_1.executeOperation)(this.s.client, new set_profiling_level_1.SetProfilingLevelOperation(this, level, (0, utils_1.resolveOptions)(this, options)), callback);\n    }\n    profilingLevel(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        return (0, execute_operation_1.executeOperation)(this.s.client, new profiling_level_1.ProfilingLevelOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n    }\n    indexInformation(name, options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        return (0, execute_operation_1.executeOperation)(this.s.client, new indexes_1.IndexInformationOperation(this, name, (0, utils_1.resolveOptions)(this, options)), callback);\n    }\n    /**\n     * Unref all sockets\n     * @deprecated This function is deprecated and will be removed in the next major version.\n     */\n    unref() {\n        (0, utils_1.getTopology)(this).unref();\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this database. Will ignore all\n     * changes to system collections.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct usecases:\n     * - The first is to provide the schema that may be defined for all the collections within this database\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /** Return the db logger */\n    getLogger() {\n        return this.s.logger;\n    }\n    get logger() {\n        return this.s.logger;\n    }\n}\nexports.Db = Db;\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\n// TODO(NODE-3484): Refactor into MongoDBNamespace\n// Validate the database name\nfunction validateDatabaseName(databaseName) {\n    if (typeof databaseName !== 'string')\n        throw new error_1.MongoInvalidArgumentError('Database name must be a string');\n    if (databaseName.length === 0)\n        throw new error_1.MongoInvalidArgumentError('Database name cannot be the empty string');\n    if (databaseName === '$external')\n        return;\n    const invalidChars = [' ', '.', '$', '/', '\\\\'];\n    for (let i = 0; i < invalidChars.length; i++) {\n        if (databaseName.indexOf(invalidChars[i]) !== -1)\n            throw new error_1.MongoAPIError(`database names cannot contain the character '${invalidChars[i]}'`);\n    }\n}\n//# sourceMappingURL=db.js.map"]},"metadata":{},"sourceType":"script"}