{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Encrypter = void 0;\n/* eslint-disable @typescript-eslint/no-var-requires */\n\nconst bson_1 = require(\"./bson\");\n\nconst constants_1 = require(\"./constants\");\n\nconst error_1 = require(\"./error\");\n\nconst mongo_client_1 = require(\"./mongo_client\");\n\nconst utils_1 = require(\"./utils\");\n\nlet AutoEncrypterClass;\n/** @internal */\n\nconst kInternalClient = Symbol('internalClient');\n/** @internal */\n\nclass Encrypter {\n  constructor(client, uri, options) {\n    if (typeof options.autoEncryption !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n    } // initialize to null, if we call getInternalClient, we may set this it is important to not overwrite those function calls.\n\n\n    this[kInternalClient] = null;\n    this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n    this.needsConnecting = false;\n\n    if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = client;\n    } else if (options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n    }\n\n    if (this.bypassAutoEncryption) {\n      options.autoEncryption.metadataClient = undefined;\n    } else if (options.maxPoolSize === 0) {\n      options.autoEncryption.metadataClient = client;\n    } else {\n      options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n    }\n\n    if (options.proxyHost) {\n      options.autoEncryption.proxyOptions = {\n        proxyHost: options.proxyHost,\n        proxyPort: options.proxyPort,\n        proxyUsername: options.proxyUsername,\n        proxyPassword: options.proxyPassword\n      };\n    }\n\n    options.autoEncryption.bson = Object.create(null); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    options.autoEncryption.bson.serialize = bson_1.serialize; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    options.autoEncryption.bson.deserialize = bson_1.deserialize;\n    this.autoEncrypter = new AutoEncrypterClass(client, options.autoEncryption);\n  }\n\n  getInternalClient(client, uri, options) {\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    let internalClient = this[kInternalClient];\n\n    if (internalClient == null) {\n      const clonedOptions = {};\n\n      for (const key of [...Object.getOwnPropertyNames(options), ...Object.getOwnPropertySymbols(options)]) {\n        if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key)) continue;\n        Reflect.set(clonedOptions, key, Reflect.get(options, key));\n      }\n\n      clonedOptions.minPoolSize = 0;\n      internalClient = new mongo_client_1.MongoClient(uri, clonedOptions);\n      this[kInternalClient] = internalClient;\n\n      for (const eventName of constants_1.MONGO_CLIENT_EVENTS) {\n        for (const listener of client.listeners(eventName)) {\n          internalClient.on(eventName, listener);\n        }\n      }\n\n      client.on('newListener', (eventName, listener) => {\n        internalClient === null || internalClient === void 0 ? void 0 : internalClient.on(eventName, listener);\n      });\n      this.needsConnecting = true;\n    }\n\n    return internalClient;\n  }\n\n  connectInternalClient(callback) {\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    const internalClient = this[kInternalClient];\n\n    if (this.needsConnecting && internalClient != null) {\n      this.needsConnecting = false;\n      return internalClient.connect(callback);\n    }\n\n    return callback();\n  }\n\n  close(client, force, callback) {\n    this.autoEncrypter.teardown(!!force, e => {\n      const internalClient = this[kInternalClient];\n\n      if (internalClient != null && client !== internalClient) {\n        return internalClient.close(force, callback);\n      }\n\n      callback(e);\n    });\n  }\n\n  static checkForMongoCrypt() {\n    const mongodbClientEncryption = (0, utils_1.getMongoDBClientEncryption)();\n\n    if (mongodbClientEncryption == null) {\n      throw new error_1.MongoMissingDependencyError('Auto-encryption requested, but the module is not installed. ' + 'Please add `mongodb-client-encryption` as a dependency of your project');\n    }\n\n    AutoEncrypterClass = mongodbClientEncryption.extension(require('../lib/index')).AutoEncrypter;\n  }\n\n}\n\nexports.Encrypter = Encrypter;","map":{"version":3,"sources":["../src/encrypter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Encrypter = void 0;\n/* eslint-disable @typescript-eslint/no-var-requires */\nconst bson_1 = require(\"./bson\");\nconst constants_1 = require(\"./constants\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst utils_1 = require(\"./utils\");\nlet AutoEncrypterClass;\n/** @internal */\nconst kInternalClient = Symbol('internalClient');\n/** @internal */\nclass Encrypter {\n    constructor(client, uri, options) {\n        if (typeof options.autoEncryption !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n        }\n        // initialize to null, if we call getInternalClient, we may set this it is important to not overwrite those function calls.\n        this[kInternalClient] = null;\n        this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n        this.needsConnecting = false;\n        if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = client;\n        }\n        else if (options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n        }\n        if (this.bypassAutoEncryption) {\n            options.autoEncryption.metadataClient = undefined;\n        }\n        else if (options.maxPoolSize === 0) {\n            options.autoEncryption.metadataClient = client;\n        }\n        else {\n            options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n        }\n        if (options.proxyHost) {\n            options.autoEncryption.proxyOptions = {\n                proxyHost: options.proxyHost,\n                proxyPort: options.proxyPort,\n                proxyUsername: options.proxyUsername,\n                proxyPassword: options.proxyPassword\n            };\n        }\n        options.autoEncryption.bson = Object.create(null);\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        options.autoEncryption.bson.serialize = bson_1.serialize;\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        options.autoEncryption.bson.deserialize = bson_1.deserialize;\n        this.autoEncrypter = new AutoEncrypterClass(client, options.autoEncryption);\n    }\n    getInternalClient(client, uri, options) {\n        // TODO(NODE-4144): Remove new variable for type narrowing\n        let internalClient = this[kInternalClient];\n        if (internalClient == null) {\n            const clonedOptions = {};\n            for (const key of [\n                ...Object.getOwnPropertyNames(options),\n                ...Object.getOwnPropertySymbols(options)\n            ]) {\n                if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key))\n                    continue;\n                Reflect.set(clonedOptions, key, Reflect.get(options, key));\n            }\n            clonedOptions.minPoolSize = 0;\n            internalClient = new mongo_client_1.MongoClient(uri, clonedOptions);\n            this[kInternalClient] = internalClient;\n            for (const eventName of constants_1.MONGO_CLIENT_EVENTS) {\n                for (const listener of client.listeners(eventName)) {\n                    internalClient.on(eventName, listener);\n                }\n            }\n            client.on('newListener', (eventName, listener) => {\n                internalClient === null || internalClient === void 0 ? void 0 : internalClient.on(eventName, listener);\n            });\n            this.needsConnecting = true;\n        }\n        return internalClient;\n    }\n    connectInternalClient(callback) {\n        // TODO(NODE-4144): Remove new variable for type narrowing\n        const internalClient = this[kInternalClient];\n        if (this.needsConnecting && internalClient != null) {\n            this.needsConnecting = false;\n            return internalClient.connect(callback);\n        }\n        return callback();\n    }\n    close(client, force, callback) {\n        this.autoEncrypter.teardown(!!force, e => {\n            const internalClient = this[kInternalClient];\n            if (internalClient != null && client !== internalClient) {\n                return internalClient.close(force, callback);\n            }\n            callback(e);\n        });\n    }\n    static checkForMongoCrypt() {\n        const mongodbClientEncryption = (0, utils_1.getMongoDBClientEncryption)();\n        if (mongodbClientEncryption == null) {\n            throw new error_1.MongoMissingDependencyError('Auto-encryption requested, but the module is not installed. ' +\n                'Please add `mongodb-client-encryption` as a dependency of your project');\n        }\n        AutoEncrypterClass = mongodbClientEncryption.extension(require('../lib/index')).AutoEncrypter;\n    }\n}\nexports.Encrypter = Encrypter;\n//# sourceMappingURL=encrypter.js.map"]},"metadata":{},"sourceType":"script"}