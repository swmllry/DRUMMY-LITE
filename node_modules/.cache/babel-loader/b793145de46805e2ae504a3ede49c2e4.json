{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReceiveBuffer = void 0;\n\nclass ReceiveBuffer {\n  constructor() {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4096;\n    this.buffer = Buffer.allocUnsafe(size);\n    this.offset = 0;\n    this.originalSize = size;\n  }\n\n  get length() {\n    return this.offset;\n  }\n\n  append(data) {\n    if (!Buffer.isBuffer(data)) {\n      throw new Error('Attempted to append a non-buffer instance to ReceiveBuffer.');\n    }\n\n    if (this.offset + data.length >= this.buffer.length) {\n      const tmp = this.buffer;\n      this.buffer = Buffer.allocUnsafe(Math.max(this.buffer.length + this.originalSize, this.buffer.length + data.length));\n      tmp.copy(this.buffer);\n    }\n\n    data.copy(this.buffer, this.offset);\n    return this.offset += data.length;\n  }\n\n  peek(length) {\n    if (length > this.offset) {\n      throw new Error('Attempted to read beyond the bounds of the managed internal data.');\n    }\n\n    return this.buffer.slice(0, length);\n  }\n\n  get(length) {\n    if (length > this.offset) {\n      throw new Error('Attempted to read beyond the bounds of the managed internal data.');\n    }\n\n    const value = Buffer.allocUnsafe(length);\n    this.buffer.slice(0, length).copy(value);\n    this.buffer.copyWithin(0, length, length + this.offset - length);\n    this.offset -= length;\n    return value;\n  }\n\n}\n\nexports.ReceiveBuffer = ReceiveBuffer;","map":{"version":3,"sources":["../../src/common/receivebuffer.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAM,aAAN,CAAmB;EAKjB,WAAA,GAAuB;IAAA,IAAX,IAAW,uEAAJ,IAAI;IACrB,KAAK,MAAL,GAAc,MAAM,CAAC,WAAP,CAAmB,IAAnB,CAAd;IACA,KAAK,MAAL,GAAc,CAAd;IACA,KAAK,YAAL,GAAoB,IAApB;EACD;;EAES,IAAN,MAAM,GAAA;IACR,OAAO,KAAK,MAAZ;EACD;;EAED,MAAM,CAAC,IAAD,EAAa;IACjB,IAAI,CAAC,MAAM,CAAC,QAAP,CAAgB,IAAhB,CAAL,EAA4B;MAC1B,MAAM,IAAI,KAAJ,CACJ,6DADI,CAAN;IAGD;;IAED,IAAI,KAAK,MAAL,GAAc,IAAI,CAAC,MAAnB,IAA6B,KAAK,MAAL,CAAY,MAA7C,EAAqD;MACnD,MAAM,GAAG,GAAG,KAAK,MAAjB;MACA,KAAK,MAAL,GAAc,MAAM,CAAC,WAAP,CACZ,IAAI,CAAC,GAAL,CACE,KAAK,MAAL,CAAY,MAAZ,GAAqB,KAAK,YAD5B,EAEE,KAAK,MAAL,CAAY,MAAZ,GAAqB,IAAI,CAAC,MAF5B,CADY,CAAd;MAMA,GAAG,CAAC,IAAJ,CAAS,KAAK,MAAd;IACD;;IAED,IAAI,CAAC,IAAL,CAAU,KAAK,MAAf,EAAuB,KAAK,MAA5B;IACA,OAAQ,KAAK,MAAL,IAAe,IAAI,CAAC,MAA5B;EACD;;EAED,IAAI,CAAC,MAAD,EAAe;IACjB,IAAI,MAAM,GAAG,KAAK,MAAlB,EAA0B;MACxB,MAAM,IAAI,KAAJ,CACJ,mEADI,CAAN;IAGD;;IACD,OAAO,KAAK,MAAL,CAAY,KAAZ,CAAkB,CAAlB,EAAqB,MAArB,CAAP;EACD;;EAED,GAAG,CAAC,MAAD,EAAe;IAChB,IAAI,MAAM,GAAG,KAAK,MAAlB,EAA0B;MACxB,MAAM,IAAI,KAAJ,CACJ,mEADI,CAAN;IAGD;;IAED,MAAM,KAAK,GAAG,MAAM,CAAC,WAAP,CAAmB,MAAnB,CAAd;IACA,KAAK,MAAL,CAAY,KAAZ,CAAkB,CAAlB,EAAqB,MAArB,EAA6B,IAA7B,CAAkC,KAAlC;IACA,KAAK,MAAL,CAAY,UAAZ,CAAuB,CAAvB,EAA0B,MAA1B,EAAkC,MAAM,GAAG,KAAK,MAAd,GAAuB,MAAzD;IACA,KAAK,MAAL,IAAe,MAAf;IAEA,OAAO,KAAP;EACD;;AA3DgB;;AA8DX,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReceiveBuffer = void 0;\nclass ReceiveBuffer {\n    constructor(size = 4096) {\n        this.buffer = Buffer.allocUnsafe(size);\n        this.offset = 0;\n        this.originalSize = size;\n    }\n    get length() {\n        return this.offset;\n    }\n    append(data) {\n        if (!Buffer.isBuffer(data)) {\n            throw new Error('Attempted to append a non-buffer instance to ReceiveBuffer.');\n        }\n        if (this.offset + data.length >= this.buffer.length) {\n            const tmp = this.buffer;\n            this.buffer = Buffer.allocUnsafe(Math.max(this.buffer.length + this.originalSize, this.buffer.length + data.length));\n            tmp.copy(this.buffer);\n        }\n        data.copy(this.buffer, this.offset);\n        return (this.offset += data.length);\n    }\n    peek(length) {\n        if (length > this.offset) {\n            throw new Error('Attempted to read beyond the bounds of the managed internal data.');\n        }\n        return this.buffer.slice(0, length);\n    }\n    get(length) {\n        if (length > this.offset) {\n            throw new Error('Attempted to read beyond the bounds of the managed internal data.');\n        }\n        const value = Buffer.allocUnsafe(length);\n        this.buffer.slice(0, length).copy(value);\n        this.buffer.copyWithin(0, length, length + this.offset - length);\n        this.offset -= length;\n        return value;\n    }\n}\nexports.ReceiveBuffer = ReceiveBuffer;\n//# sourceMappingURL=receivebuffer.js.map"]},"metadata":{},"sourceType":"script"}