{"ast":null,"code":"\"use strict\";\n\nconst {\n  MongoClient\n} = require('mongodb');\n\nconst ObjectId = require('mongodb').ObjectId;\n\nrequire('dotenv').config();\n\nconst {\n  MONGO_URI\n} = process.env;\nconst options = {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n};\n\nconst loginAuthentication = async (req, res) => {\n  const client = new MongoClient(MONGO_URI, options);\n\n  try {\n    await client.connect();\n    const db = client.db('Drummy');\n    console.log('Connected!');\n    const {\n      loginEmail,\n      loginPassword\n    } = req.body; // console.log('loginEmail: ', loginEmail);\n    // console.log('loginPassword: ', loginPassword);\n\n    const userMatch = await db.collection('users').findOne({\n      email: loginEmail\n    });\n    console.log('userMatch: ', userMatch);\n    let validatedPassword = false;\n\n    if (userMatch.password === loginPassword) {\n      console.log('Password Match!');\n      validatedPassword = true;\n      res.status(200).json({\n        status: 200,\n        data: {\n          userMatch: userMatch.id,\n          validatedPassword: validatedPassword\n        },\n        message: 'Password Correct!'\n      });\n    } else {\n      console.log(\"Invalid Password!\");\n      validatedPassword = false;\n      res.status(401).json({\n        status: 401,\n        data: {\n          userMatch: userMatch.id,\n          validatedPassword: validatedPassword\n        },\n        message: 'Invalid Password!'\n      });\n    }\n  } catch (err) {\n    console.log(err.stack);\n    res.status(500).json({\n      status: 500,\n      error: err.message\n    });\n  }\n\n  client.close();\n  console.log('Disconnected!');\n};\n\nconst getUsers = async (req, res) => {\n  const client = new MongoClient(MONGO_URI, options);\n\n  try {\n    await client.connect();\n    const db = client.db('Drummy');\n    console.log('Connected!');\n    const allUsersData = await db.collection(\"users\").find().toArray();\n    const usersArray = allUsersData.map(userData => {\n      return userData;\n    });\n\n    if (allUsersData) {\n      res.status(200).json({\n        status: 200,\n        data: usersArray\n      });\n    } else {\n      res.status(404).json({\n        status: 404,\n        data: \"Not Found\"\n      });\n    }\n  } catch (err) {\n    console.log(err.stack);\n    res.status(500).json({\n      status: 500,\n      error: err.message\n    });\n  }\n\n  client.close();\n  console.log('Disconnected!');\n};\n\nconst addUser = async (req, res) => {\n  const client = new MongoClient(MONGO_URI, options);\n\n  try {\n    await client.connect();\n    const db = client.db('Drummy');\n    console.log('Connected!');\n    const {\n      givenName,\n      surname,\n      email,\n      password\n    } = req.body;\n    const newUser = {\n      givenName: givenName,\n      surname: surname,\n      email: email,\n      password: password,\n      patches: []\n    };\n    await db.collection('users').insertOne(newUser);\n    res.status(200).json({\n      status: 200,\n      data: newUser,\n      message: \"User successfully added to database\"\n    });\n  } catch (err) {\n    console.log(err.stack);\n    res.status(500).json({\n      status: 500,\n      error: err.message\n    });\n  }\n\n  client.close();\n  console.log('Disconnected!');\n};\n\nconst savePatch = async (req, res) => {\n  const client = new MongoClient(MONGO_URI, options);\n\n  try {\n    await client.connect();\n    const db = client.db('Drummy');\n    console.log('Connected!');\n    const {\n      lowShelfFilterGainState,\n      midPeakFilterGainState,\n      highShelfFilterGainState,\n      delayTimeValue,\n      delayFeedback\n    } = req.body;\n    let newPatch = {\n      lowShelfFilterGainState: lowShelfFilterGainState,\n      midPeakFilterGainState: midPeakFilterGainState,\n      highShelfFilterGainState: highShelfFilterGainState,\n      delayTimeValue: delayTimeValue,\n      delayFeedback: delayFeedback\n    };\n    await db.collection('users').findOneAndUpdate(newUser);\n    res.status(200).json({\n      status: 200,\n      data: newUser,\n      message: \"User patch successfully added to database\"\n    });\n  } catch (err) {\n    console.log(err.stack);\n    res.status(500).json({\n      status: 500,\n      error: err.message\n    });\n  }\n\n  client.close();\n  console.log('Disconnected!');\n};\n\nmodule.exports = {\n  loginAuthentication,\n  getUsers,\n  addUser,\n  savePatch\n};","map":{"version":3,"names":["MongoClient","require","ObjectId","config","MONGO_URI","process","env","options","useNewUrlParser","useUnifiedTopology","loginAuthentication","req","res","client","connect","db","console","log","loginEmail","loginPassword","body","userMatch","collection","findOne","email","validatedPassword","password","status","json","data","id","message","err","stack","error","close","getUsers","allUsersData","find","toArray","usersArray","map","userData","addUser","givenName","surname","newUser","patches","insertOne","savePatch","lowShelfFilterGainState","midPeakFilterGainState","highShelfFilterGainState","delayTimeValue","delayFeedback","newPatch","findOneAndUpdate","module","exports"],"sources":["/Users/a4543721/Documents/Concordia-Bootcamps/DRUMMY - FINAL PROJECT/Drummy/server/handlers.js"],"sourcesContent":["\"use strict\";\n\nconst { MongoClient } = require('mongodb');\nconst ObjectId = require('mongodb').ObjectId;\n\nrequire('dotenv').config();\nconst { MONGO_URI } = process.env;\n\nconst options = {\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n}\n\nconst loginAuthentication = async (req, res) => {\n\n    const client = new MongoClient(MONGO_URI, options);\n\n    try {\n\n        await client.connect();\n\n        const db = client.db('Drummy');\n        console.log('Connected!')\n\n        const { loginEmail, loginPassword } = req.body;\n        // console.log('loginEmail: ', loginEmail);\n        // console.log('loginPassword: ', loginPassword);\n\n        const userMatch = await db.collection('users').findOne({ email: loginEmail })\n        console.log('userMatch: ', userMatch);\n\n        let validatedPassword = false\n\n        if (userMatch.password === loginPassword) {\n\n            console.log('Password Match!')\n            validatedPassword = true;\n            res.status(200).json({\n                status: 200,\n                data: { userMatch: userMatch.id, validatedPassword: validatedPassword },\n                message: 'Password Correct!'\n            })\n\n        } else {\n\n            console.log(\"Invalid Password!\")\n            validatedPassword = false;\n            res.status(401).json({\n                status: 401,\n                data: { userMatch: userMatch.id, validatedPassword: validatedPassword },\n                message: 'Invalid Password!'\n            })\n\n        }\n\n    } catch (err) {\n        console.log(err.stack);\n        res.status(500).json({ status: 500, error: err.message });\n    }\n\n    client.close();\n    console.log('Disconnected!');\n\n}\n\nconst getUsers = async (req, res) => {\n\n    const client = new MongoClient(MONGO_URI, options);\n\n    try {\n\n        await client.connect();\n\n        const db = client.db('Drummy');\n        console.log('Connected!')\n\n        const allUsersData = await db.collection(\"users\").find().toArray()\n\n        const usersArray = allUsersData.map(userData => {\n            return userData\n        })\n\n        if (allUsersData) {\n            res.status(200).json({ status: 200, data: usersArray });\n        } else {\n            res.status(404).json({ status: 404, data: \"Not Found\" });\n        }\n\n    } catch (err) {\n        console.log(err.stack);\n        res.status(500).json({ status: 500, error: err.message });\n    }\n\n    client.close();\n    console.log('Disconnected!')\n\n}\n\nconst addUser = async (req, res) => {\n\n    const client = new MongoClient(MONGO_URI, options);\n\n    try {\n\n        await client.connect();\n\n        const db = client.db('Drummy');\n        console.log('Connected!')\n\n        const { givenName, surname, email, password } = req.body\n\n        const newUser = {\n            givenName: givenName,\n            surname: surname,\n            email: email,\n            password: password,\n            patches: [],\n        }\n\n        await db.collection('users').insertOne(newUser);\n\n        res.status(200).json({ status: 200, data: newUser, message: \"User successfully added to database\" })\n\n    } catch (err) {\n\n        console.log(err.stack);\n        res.status(500).json({ status: 500, error: err.message });\n\n    }\n\n\n    client.close();\n    console.log('Disconnected!')\n\n}\n\nconst savePatch = async (req, res) => {\n\n    const client = new MongoClient(MONGO_URI, options);\n\n    try {\n\n        await client.connect();\n\n        const db = client.db('Drummy');\n        console.log('Connected!')\n\n        const {\n            lowShelfFilterGainState,\n            midPeakFilterGainState,\n            highShelfFilterGainState,\n            delayTimeValue,\n            delayFeedback,\n        } = req.body\n\n        let newPatch = {\n            lowShelfFilterGainState: lowShelfFilterGainState,\n            midPeakFilterGainState: midPeakFilterGainState,\n            highShelfFilterGainState: highShelfFilterGainState,\n            delayTimeValue: delayTimeValue,\n            delayFeedback: delayFeedback,\n        }\n\n        await db.collection('users').findOneAndUpdate(newUser);\n\n        res.status(200).json({ status: 200, data: newUser, message: \"User patch successfully added to database\" })\n\n    } catch (err) {\n\n        console.log(err.stack);\n        res.status(500).json({ status: 500, error: err.message });\n\n    }\n\n\n    client.close();\n    console.log('Disconnected!')\n\n}\n\nmodule.exports = { loginAuthentication, getUsers, addUser, savePatch }"],"mappings":"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"},"metadata":{},"sourceType":"script"}