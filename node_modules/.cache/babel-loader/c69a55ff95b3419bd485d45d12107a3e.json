{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggregationCursor = void 0;\n\nconst aggregate_1 = require(\"../operations/aggregate\");\n\nconst execute_operation_1 = require(\"../operations/execute_operation\");\n\nconst utils_1 = require(\"../utils\");\n\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\n\n\nconst kPipeline = Symbol('pipeline');\n/** @internal */\n\nconst kOptions = Symbol('options');\n/**\n * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n * @public\n */\n\nclass AggregationCursor extends abstract_cursor_1.AbstractCursor {\n  /** @internal */\n  constructor(client, namespace) {\n    let pipeline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(client, namespace, options);\n    this[kPipeline] = pipeline;\n    this[kOptions] = options;\n  }\n\n  get pipeline() {\n    return this[kPipeline];\n  }\n\n  clone() {\n    const clonedOptions = (0, utils_1.mergeOptions)({}, this[kOptions]);\n    delete clonedOptions.session;\n    return new AggregationCursor(this.client, this.namespace, this[kPipeline], { ...clonedOptions\n    });\n  }\n\n  map(transform) {\n    return super.map(transform);\n  }\n  /** @internal */\n\n\n  _initialize(session, callback) {\n    const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], { ...this[kOptions],\n      ...this.cursorOptions,\n      session\n    });\n    (0, execute_operation_1.executeOperation)(this.client, aggregateOperation, (err, response) => {\n      if (err || response == null) return callback(err); // TODO: NODE-2882\n\n      callback(undefined, {\n        server: aggregateOperation.server,\n        session,\n        response\n      });\n    });\n  }\n\n  explain(verbosity, callback) {\n    if (typeof verbosity === 'function') callback = verbosity, verbosity = true;\n    if (verbosity == null) verbosity = true;\n    return (0, execute_operation_1.executeOperation)(this.client, new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], { ...this[kOptions],\n      ...this.cursorOptions,\n      explain: verbosity\n    }), callback);\n  }\n\n  group($group) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kPipeline].push({\n      $group\n    });\n    return this;\n  }\n  /** Add a limit stage to the aggregation pipeline */\n\n\n  limit($limit) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kPipeline].push({\n      $limit\n    });\n    return this;\n  }\n  /** Add a match stage to the aggregation pipeline */\n\n\n  match($match) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kPipeline].push({\n      $match\n    });\n    return this;\n  }\n  /** Add an out stage to the aggregation pipeline */\n\n\n  out($out) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kPipeline].push({\n      $out\n    });\n    return this;\n  }\n  /**\n   * Add a project stage to the aggregation pipeline\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.\n   * You should specify a parameterized type to have assertions on your final results.\n   *\n   * @example\n   * ```typescript\n   * // Best way\n   * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * // Flexible way\n   * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });\n   * ```\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling project,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);\n   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n   *\n   * // or always use chaining and save the final cursor\n   *\n   * const cursor = coll.aggregate().project<{ a: string }>({\n   *   _id: 0,\n   *   a: { $convert: { input: '$a', to: 'string' }\n   * }});\n   * ```\n   */\n\n\n  project($project) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kPipeline].push({\n      $project\n    });\n    return this;\n  }\n  /** Add a lookup stage to the aggregation pipeline */\n\n\n  lookup($lookup) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kPipeline].push({\n      $lookup\n    });\n    return this;\n  }\n  /** Add a redact stage to the aggregation pipeline */\n\n\n  redact($redact) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kPipeline].push({\n      $redact\n    });\n    return this;\n  }\n  /** Add a skip stage to the aggregation pipeline */\n\n\n  skip($skip) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kPipeline].push({\n      $skip\n    });\n    return this;\n  }\n  /** Add a sort stage to the aggregation pipeline */\n\n\n  sort($sort) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kPipeline].push({\n      $sort\n    });\n    return this;\n  }\n  /** Add a unwind stage to the aggregation pipeline */\n\n\n  unwind($unwind) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kPipeline].push({\n      $unwind\n    });\n    return this;\n  } // deprecated methods\n\n  /** @deprecated Add a geoNear stage to the aggregation pipeline */\n\n\n  geoNear($geoNear) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kPipeline].push({\n      $geoNear\n    });\n    return this;\n  }\n\n}\n\nexports.AggregationCursor = AggregationCursor;","map":{"version":3,"sources":["../../src/cursor/aggregation_cursor.ts"],"names":[],"mappings":";;;;;;;AAGA,MAAA,WAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AACA,MAAA,mBAAA,GAAA,OAAA,CAAA,iCAAA,CAAA;;AAIA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,MAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAKA;;;AACA,MAAM,SAAS,GAAG,MAAM,CAAC,UAAD,CAAxB;AACA;;AACA,MAAM,QAAQ,GAAG,MAAM,CAAC,SAAD,CAAvB;AAEA;;;;;;AAMG;;AACH,MAAa,iBAAb,SAAsD,iBAAA,CAAA,cAAtD,CAA6E;EAM3E;EACA,WAAA,CACE,MADF,EAEE,SAFF,EAIgC;IAAA,IAD9B,QAC8B,uEADP,EACO;IAAA,IAA9B,OAA8B,uEAAF,EAAE;IAE9B,MAAM,MAAN,EAAc,SAAd,EAAyB,OAAzB;IAEA,KAAK,SAAL,IAAkB,QAAlB;IACA,KAAK,QAAL,IAAiB,OAAjB;EACD;;EAEW,IAAR,QAAQ,GAAA;IACV,OAAO,KAAK,SAAL,CAAP;EACD;;EAED,KAAK,GAAA;IACH,MAAM,aAAa,GAAG,CAAA,GAAA,OAAA,CAAA,YAAA,EAAa,EAAb,EAAiB,KAAK,QAAL,CAAjB,CAAtB;IACA,OAAO,aAAa,CAAC,OAArB;IACA,OAAO,IAAI,iBAAJ,CAAsB,KAAK,MAA3B,EAAmC,KAAK,SAAxC,EAAmD,KAAK,SAAL,CAAnD,EAAoE,EACzE,GAAG;IADsE,CAApE,CAAP;EAGD;;EAEQ,GAAG,CAAI,SAAJ,EAAkC;IAC5C,OAAO,MAAM,GAAN,CAAU,SAAV,CAAP;EACD;EAED;;;EACA,WAAW,CAAC,OAAD,EAAyB,QAAzB,EAA4D;IACrE,MAAM,kBAAkB,GAAG,IAAI,WAAA,CAAA,kBAAJ,CAAuB,KAAK,SAA5B,EAAuC,KAAK,SAAL,CAAvC,EAAwD,EACjF,GAAG,KAAK,QAAL,CAD8E;MAEjF,GAAG,KAAK,aAFyE;MAGjF;IAHiF,CAAxD,CAA3B;IAMA,CAAA,GAAA,mBAAA,CAAA,gBAAA,EAAiB,KAAK,MAAtB,EAA8B,kBAA9B,EAAkD,CAAC,GAAD,EAAM,QAAN,KAAkB;MAClE,IAAI,GAAG,IAAI,QAAQ,IAAI,IAAvB,EAA6B,OAAO,QAAQ,CAAC,GAAD,CAAf,CADqC,CAGlE;;MACA,QAAQ,CAAC,SAAD,EAAY;QAAE,MAAM,EAAE,kBAAkB,CAAC,MAA7B;QAAqC,OAArC;QAA8C;MAA9C,CAAZ,CAAR;IACD,CALD;EAMD;;EAMD,OAAO,CACL,SADK,EAEL,QAFK,EAEwB;IAE7B,IAAI,OAAO,SAAP,KAAqB,UAAzB,EAAsC,QAAQ,GAAG,SAAZ,EAAyB,SAAS,GAAG,IAArC;IACrC,IAAI,SAAS,IAAI,IAAjB,EAAuB,SAAS,GAAG,IAAZ;IAEvB,OAAO,CAAA,GAAA,mBAAA,CAAA,gBAAA,EACL,KAAK,MADA,EAEL,IAAI,WAAA,CAAA,kBAAJ,CAAuB,KAAK,SAA5B,EAAuC,KAAK,SAAL,CAAvC,EAAwD,EACtD,GAAG,KAAK,QAAL,CADmD;MAEtD,GAAG,KAAK,aAF8C;MAGtD,OAAO,EAAE;IAH6C,CAAxD,CAFK,EAOL,QAPK,CAAP;EASD;;EAID,KAAK,CAAC,MAAD,EAAiB;IACpB,CAAA,GAAA,iBAAA,CAAA,mBAAA,EAAoB,IAApB;IACA,KAAK,SAAL,EAAgB,IAAhB,CAAqB;MAAE;IAAF,CAArB;IACA,OAAO,IAAP;EACD;EAED;;;EACA,KAAK,CAAC,MAAD,EAAe;IAClB,CAAA,GAAA,iBAAA,CAAA,mBAAA,EAAoB,IAApB;IACA,KAAK,SAAL,EAAgB,IAAhB,CAAqB;MAAE;IAAF,CAArB;IACA,OAAO,IAAP;EACD;EAED;;;EACA,KAAK,CAAC,MAAD,EAAiB;IACpB,CAAA,GAAA,iBAAA,CAAA,mBAAA,EAAoB,IAApB;IACA,KAAK,SAAL,EAAgB,IAAhB,CAAqB;MAAE;IAAF,CAArB;IACA,OAAO,IAAP;EACD;EAED;;;EACA,GAAG,CAAC,IAAD,EAA4C;IAC7C,CAAA,GAAA,iBAAA,CAAA,mBAAA,EAAoB,IAApB;IACA,KAAK,SAAL,EAAgB,IAAhB,CAAqB;MAAE;IAAF,CAArB;IACA,OAAO,IAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCG;;;EACH,OAAO,CAAgC,QAAhC,EAAkD;IACvD,CAAA,GAAA,iBAAA,CAAA,mBAAA,EAAoB,IAApB;IACA,KAAK,SAAL,EAAgB,IAAhB,CAAqB;MAAE;IAAF,CAArB;IACA,OAAO,IAAP;EACD;EAED;;;EACA,MAAM,CAAC,OAAD,EAAkB;IACtB,CAAA,GAAA,iBAAA,CAAA,mBAAA,EAAoB,IAApB;IACA,KAAK,SAAL,EAAgB,IAAhB,CAAqB;MAAE;IAAF,CAArB;IACA,OAAO,IAAP;EACD;EAED;;;EACA,MAAM,CAAC,OAAD,EAAkB;IACtB,CAAA,GAAA,iBAAA,CAAA,mBAAA,EAAoB,IAApB;IACA,KAAK,SAAL,EAAgB,IAAhB,CAAqB;MAAE;IAAF,CAArB;IACA,OAAO,IAAP;EACD;EAED;;;EACA,IAAI,CAAC,KAAD,EAAc;IAChB,CAAA,GAAA,iBAAA,CAAA,mBAAA,EAAoB,IAApB;IACA,KAAK,SAAL,EAAgB,IAAhB,CAAqB;MAAE;IAAF,CAArB;IACA,OAAO,IAAP;EACD;EAED;;;EACA,IAAI,CAAC,KAAD,EAAY;IACd,CAAA,GAAA,iBAAA,CAAA,mBAAA,EAAoB,IAApB;IACA,KAAK,SAAL,EAAgB,IAAhB,CAAqB;MAAE;IAAF,CAArB;IACA,OAAO,IAAP;EACD;EAED;;;EACA,MAAM,CAAC,OAAD,EAA2B;IAC/B,CAAA,GAAA,iBAAA,CAAA,mBAAA,EAAoB,IAApB;IACA,KAAK,SAAL,EAAgB,IAAhB,CAAqB;MAAE;IAAF,CAArB;IACA,OAAO,IAAP;EACD,CAtL0E,CAwL3E;;EACA;;;EACA,OAAO,CAAC,QAAD,EAAmB;IACxB,CAAA,GAAA,iBAAA,CAAA,mBAAA,EAAoB,IAApB;IACA,KAAK,SAAL,EAAgB,IAAhB,CAAqB;MAAE;IAAF,CAArB;IACA,OAAO,IAAP;EACD;;AA9L0E;;AAA7E,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AggregationCursor = void 0;\nconst aggregate_1 = require(\"../operations/aggregate\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst utils_1 = require(\"../utils\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\nconst kPipeline = Symbol('pipeline');\n/** @internal */\nconst kOptions = Symbol('options');\n/**\n * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n * @public\n */\nclass AggregationCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */\n    constructor(client, namespace, pipeline = [], options = {}) {\n        super(client, namespace, options);\n        this[kPipeline] = pipeline;\n        this[kOptions] = options;\n    }\n    get pipeline() {\n        return this[kPipeline];\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this[kOptions]);\n        delete clonedOptions.session;\n        return new AggregationCursor(this.client, this.namespace, this[kPipeline], {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */\n    _initialize(session, callback) {\n        const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], {\n            ...this[kOptions],\n            ...this.cursorOptions,\n            session\n        });\n        (0, execute_operation_1.executeOperation)(this.client, aggregateOperation, (err, response) => {\n            if (err || response == null)\n                return callback(err);\n            // TODO: NODE-2882\n            callback(undefined, { server: aggregateOperation.server, session, response });\n        });\n    }\n    explain(verbosity, callback) {\n        if (typeof verbosity === 'function')\n            (callback = verbosity), (verbosity = true);\n        if (verbosity == null)\n            verbosity = true;\n        return (0, execute_operation_1.executeOperation)(this.client, new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], {\n            ...this[kOptions],\n            ...this.cursorOptions,\n            explain: verbosity\n        }), callback);\n    }\n    group($group) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $group });\n        return this;\n    }\n    /** Add a limit stage to the aggregation pipeline */\n    limit($limit) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $limit });\n        return this;\n    }\n    /** Add a match stage to the aggregation pipeline */\n    match($match) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $match });\n        return this;\n    }\n    /** Add an out stage to the aggregation pipeline */\n    out($out) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $out });\n        return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.aggregate().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project($project) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $project });\n        return this;\n    }\n    /** Add a lookup stage to the aggregation pipeline */\n    lookup($lookup) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $lookup });\n        return this;\n    }\n    /** Add a redact stage to the aggregation pipeline */\n    redact($redact) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $redact });\n        return this;\n    }\n    /** Add a skip stage to the aggregation pipeline */\n    skip($skip) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $skip });\n        return this;\n    }\n    /** Add a sort stage to the aggregation pipeline */\n    sort($sort) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $sort });\n        return this;\n    }\n    /** Add a unwind stage to the aggregation pipeline */\n    unwind($unwind) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $unwind });\n        return this;\n    }\n    // deprecated methods\n    /** @deprecated Add a geoNear stage to the aggregation pipeline */\n    geoNear($geoNear) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $geoNear });\n        return this;\n    }\n}\nexports.AggregationCursor = AggregationCursor;\n//# sourceMappingURL=aggregation_cursor.js.map"]},"metadata":{},"sourceType":"script"}