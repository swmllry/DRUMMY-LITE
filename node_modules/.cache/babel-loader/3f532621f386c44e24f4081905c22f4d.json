{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindOneAndUpdateOperation = exports.FindOneAndReplaceOperation = exports.FindOneAndDeleteOperation = exports.ReturnDocument = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst read_preference_1 = require(\"../read_preference\");\n\nconst sort_1 = require(\"../sort\");\n\nconst utils_1 = require(\"../utils\");\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n/** @public */\n\n\nexports.ReturnDocument = Object.freeze({\n  BEFORE: 'before',\n  AFTER: 'after'\n});\n\nfunction configureFindAndModifyCmdBaseUpdateOpts(cmdBase, options) {\n  cmdBase.new = options.returnDocument === exports.ReturnDocument.AFTER;\n  cmdBase.upsert = options.upsert === true;\n\n  if (options.bypassDocumentValidation === true) {\n    cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n  }\n\n  return cmdBase;\n}\n/** @internal */\n\n\nclass FindAndModifyOperation extends command_1.CommandOperation {\n  constructor(collection, query, options) {\n    super(collection, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.cmdBase = {\n      remove: false,\n      new: false,\n      upsert: false\n    };\n    const sort = (0, sort_1.formatSort)(options.sort);\n\n    if (sort) {\n      this.cmdBase.sort = sort;\n    }\n\n    if (options.projection) {\n      this.cmdBase.fields = options.projection;\n    }\n\n    if (options.maxTimeMS) {\n      this.cmdBase.maxTimeMS = options.maxTimeMS;\n    } // Decorate the findAndModify command with the write Concern\n\n\n    if (options.writeConcern) {\n      this.cmdBase.writeConcern = options.writeConcern;\n    }\n\n    if (options.let) {\n      this.cmdBase.let = options.let;\n    } // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n\n\n    if (options.comment !== undefined) {\n      this.cmdBase.comment = options.comment;\n    } // force primary read preference\n\n\n    this.readPreference = read_preference_1.ReadPreference.primary;\n    this.collection = collection;\n    this.query = query;\n  }\n\n  execute(server, session, callback) {\n    var _a;\n\n    const coll = this.collection;\n    const query = this.query;\n    const options = { ...this.options,\n      ...this.bsonOptions\n    }; // Create findAndModify command object\n\n    const cmd = {\n      findAndModify: coll.collectionName,\n      query: query,\n      ...this.cmdBase\n    }; // Have we specified collation\n\n    try {\n      (0, utils_1.decorateWithCollation)(cmd, coll, options);\n    } catch (err) {\n      return callback(err);\n    }\n\n    if (options.hint) {\n      // TODO: once this method becomes a CommandOperation we will have the server\n      // in place to check.\n      const unacknowledgedWrite = ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) === 0;\n\n      if (unacknowledgedWrite || (0, utils_1.maxWireVersion)(server) < 8) {\n        callback(new error_1.MongoCompatibilityError('The current topology does not support a hint on findAndModify commands'));\n        return;\n      }\n\n      cmd.hint = options.hint;\n    }\n\n    if (this.explain && (0, utils_1.maxWireVersion)(server) < 4) {\n      callback(new error_1.MongoCompatibilityError(`Server ${server.name} does not support explain on findAndModify`));\n      return;\n    } // Execute the command\n\n\n    super.executeCommand(server, session, cmd, (err, result) => {\n      if (err) return callback(err);\n      return callback(undefined, result);\n    });\n  }\n\n}\n/** @internal */\n\n\nclass FindOneAndDeleteOperation extends FindAndModifyOperation {\n  constructor(collection, filter, options) {\n    // Basic validation\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n\n    super(collection, filter, options);\n    this.cmdBase.remove = true;\n  }\n\n}\n\nexports.FindOneAndDeleteOperation = FindOneAndDeleteOperation;\n/** @internal */\n\nclass FindOneAndReplaceOperation extends FindAndModifyOperation {\n  constructor(collection, filter, replacement, options) {\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n\n    if (replacement == null || typeof replacement !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"replacement\" must be an object');\n    }\n\n    if ((0, utils_1.hasAtomicOperators)(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n\n    super(collection, filter, options);\n    this.cmdBase.update = replacement;\n    configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n  }\n\n}\n\nexports.FindOneAndReplaceOperation = FindOneAndReplaceOperation;\n/** @internal */\n\nclass FindOneAndUpdateOperation extends FindAndModifyOperation {\n  constructor(collection, filter, update, options) {\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n\n    if (update == null || typeof update !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"update\" must be an object');\n    }\n\n    if (!(0, utils_1.hasAtomicOperators)(update)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n\n    super(collection, filter, options);\n    this.cmdBase.update = update;\n    configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n\n    if (options.arrayFilters) {\n      this.cmdBase.arrayFilters = options.arrayFilters;\n    }\n  }\n\n}\n\nexports.FindOneAndUpdateOperation = FindOneAndUpdateOperation;\n(0, operation_1.defineAspects)(FindAndModifyOperation, [operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);","map":{"version":3,"sources":["../../src/operations/find_and_modify.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FindOneAndUpdateOperation = exports.FindOneAndReplaceOperation = exports.FindOneAndDeleteOperation = exports.ReturnDocument = void 0;\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst sort_1 = require(\"../sort\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @public */\nexports.ReturnDocument = Object.freeze({\n    BEFORE: 'before',\n    AFTER: 'after'\n});\nfunction configureFindAndModifyCmdBaseUpdateOpts(cmdBase, options) {\n    cmdBase.new = options.returnDocument === exports.ReturnDocument.AFTER;\n    cmdBase.upsert = options.upsert === true;\n    if (options.bypassDocumentValidation === true) {\n        cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n    return cmdBase;\n}\n/** @internal */\nclass FindAndModifyOperation extends command_1.CommandOperation {\n    constructor(collection, query, options) {\n        super(collection, options);\n        this.options = options !== null && options !== void 0 ? options : {};\n        this.cmdBase = {\n            remove: false,\n            new: false,\n            upsert: false\n        };\n        const sort = (0, sort_1.formatSort)(options.sort);\n        if (sort) {\n            this.cmdBase.sort = sort;\n        }\n        if (options.projection) {\n            this.cmdBase.fields = options.projection;\n        }\n        if (options.maxTimeMS) {\n            this.cmdBase.maxTimeMS = options.maxTimeMS;\n        }\n        // Decorate the findAndModify command with the write Concern\n        if (options.writeConcern) {\n            this.cmdBase.writeConcern = options.writeConcern;\n        }\n        if (options.let) {\n            this.cmdBase.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            this.cmdBase.comment = options.comment;\n        }\n        // force primary read preference\n        this.readPreference = read_preference_1.ReadPreference.primary;\n        this.collection = collection;\n        this.query = query;\n    }\n    execute(server, session, callback) {\n        var _a;\n        const coll = this.collection;\n        const query = this.query;\n        const options = { ...this.options, ...this.bsonOptions };\n        // Create findAndModify command object\n        const cmd = {\n            findAndModify: coll.collectionName,\n            query: query,\n            ...this.cmdBase\n        };\n        // Have we specified collation\n        try {\n            (0, utils_1.decorateWithCollation)(cmd, coll, options);\n        }\n        catch (err) {\n            return callback(err);\n        }\n        if (options.hint) {\n            // TODO: once this method becomes a CommandOperation we will have the server\n            // in place to check.\n            const unacknowledgedWrite = ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) === 0;\n            if (unacknowledgedWrite || (0, utils_1.maxWireVersion)(server) < 8) {\n                callback(new error_1.MongoCompatibilityError('The current topology does not support a hint on findAndModify commands'));\n                return;\n            }\n            cmd.hint = options.hint;\n        }\n        if (this.explain && (0, utils_1.maxWireVersion)(server) < 4) {\n            callback(new error_1.MongoCompatibilityError(`Server ${server.name} does not support explain on findAndModify`));\n            return;\n        }\n        // Execute the command\n        super.executeCommand(server, session, cmd, (err, result) => {\n            if (err)\n                return callback(err);\n            return callback(undefined, result);\n        });\n    }\n}\n/** @internal */\nclass FindOneAndDeleteOperation extends FindAndModifyOperation {\n    constructor(collection, filter, options) {\n        // Basic validation\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        super(collection, filter, options);\n        this.cmdBase.remove = true;\n    }\n}\nexports.FindOneAndDeleteOperation = FindOneAndDeleteOperation;\n/** @internal */\nclass FindOneAndReplaceOperation extends FindAndModifyOperation {\n    constructor(collection, filter, replacement, options) {\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        if (replacement == null || typeof replacement !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"replacement\" must be an object');\n        }\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n        }\n        super(collection, filter, options);\n        this.cmdBase.update = replacement;\n        configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n    }\n}\nexports.FindOneAndReplaceOperation = FindOneAndReplaceOperation;\n/** @internal */\nclass FindOneAndUpdateOperation extends FindAndModifyOperation {\n    constructor(collection, filter, update, options) {\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        if (update == null || typeof update !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"update\" must be an object');\n        }\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        super(collection, filter, options);\n        this.cmdBase.update = update;\n        configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n        if (options.arrayFilters) {\n            this.cmdBase.arrayFilters = options.arrayFilters;\n        }\n    }\n}\nexports.FindOneAndUpdateOperation = FindOneAndUpdateOperation;\n(0, operation_1.defineAspects)(FindAndModifyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE\n]);\n//# sourceMappingURL=find_and_modify.js.map"]},"metadata":{},"sourceType":"script"}