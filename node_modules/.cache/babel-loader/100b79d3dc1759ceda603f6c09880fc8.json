{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Admin = void 0;\n\nconst add_user_1 = require(\"./operations/add_user\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst list_databases_1 = require(\"./operations/list_databases\");\n\nconst remove_user_1 = require(\"./operations/remove_user\");\n\nconst run_command_1 = require(\"./operations/run_command\");\n\nconst validate_collection_1 = require(\"./operations/validate_collection\");\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```js\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n *\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Use the admin database for the operation\n *   const adminDb = client.db(dbName).admin();\n *\n *   // List all the available databases\n *   adminDb.listDatabases(function(err, dbs) {\n *     expect(err).to.not.exist;\n *     test.ok(dbs.databases.length > 0);\n *     client.close();\n *   });\n * });\n * ```\n */\n\n\nclass Admin {\n  /**\n   * Create a new Admin instance\n   * @internal\n   */\n  constructor(db) {\n    this.s = {\n      db\n    };\n  }\n\n  command(command, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = Object.assign({\n      dbName: 'admin'\n    }, options);\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new run_command_1.RunCommandOperation(this.s.db, command, options), callback);\n  }\n\n  buildInfo(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      buildinfo: 1\n    }, options, callback);\n  }\n\n  serverInfo(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      buildinfo: 1\n    }, options, callback);\n  }\n\n  serverStatus(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      serverStatus: 1\n    }, options, callback);\n  }\n\n  ping(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      ping: 1\n    }, options, callback);\n  }\n\n  addUser(username, password, options, callback) {\n    if (typeof password === 'function') {\n      callback = password, password = undefined, options = {};\n    } else if (typeof password !== 'string') {\n      if (typeof options === 'function') {\n        callback = options, options = password, password = undefined;\n      } else {\n        options = password, callback = undefined, password = undefined;\n      }\n    } else {\n      if (typeof options === 'function') callback = options, options = {};\n    }\n\n    options = Object.assign({\n      dbName: 'admin'\n    }, options);\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new add_user_1.AddUserOperation(this.s.db, username, password, options), callback);\n  }\n\n  removeUser(username, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = Object.assign({\n      dbName: 'admin'\n    }, options);\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new remove_user_1.RemoveUserOperation(this.s.db, username, options), callback);\n  }\n\n  validateCollection(collectionName, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new validate_collection_1.ValidateCollectionOperation(this, collectionName, options), callback);\n  }\n\n  listDatabases(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new list_databases_1.ListDatabasesOperation(this.s.db, options), callback);\n  }\n\n  replSetGetStatus(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      replSetGetStatus: 1\n    }, options, callback);\n  }\n\n}\n\nexports.Admin = Admin;","map":{"version":3,"sources":["../src/admin.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Admin = void 0;\nconst add_user_1 = require(\"./operations/add_user\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst list_databases_1 = require(\"./operations/list_databases\");\nconst remove_user_1 = require(\"./operations/remove_user\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst validate_collection_1 = require(\"./operations/validate_collection\");\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```js\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n *\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Use the admin database for the operation\n *   const adminDb = client.db(dbName).admin();\n *\n *   // List all the available databases\n *   adminDb.listDatabases(function(err, dbs) {\n *     expect(err).to.not.exist;\n *     test.ok(dbs.databases.length > 0);\n *     client.close();\n *   });\n * });\n * ```\n */\nclass Admin {\n    /**\n     * Create a new Admin instance\n     * @internal\n     */\n    constructor(db) {\n        this.s = { db };\n    }\n    command(command, options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = Object.assign({ dbName: 'admin' }, options);\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new run_command_1.RunCommandOperation(this.s.db, command, options), callback);\n    }\n    buildInfo(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options !== null && options !== void 0 ? options : {};\n        return this.command({ buildinfo: 1 }, options, callback);\n    }\n    serverInfo(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options !== null && options !== void 0 ? options : {};\n        return this.command({ buildinfo: 1 }, options, callback);\n    }\n    serverStatus(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options !== null && options !== void 0 ? options : {};\n        return this.command({ serverStatus: 1 }, options, callback);\n    }\n    ping(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options !== null && options !== void 0 ? options : {};\n        return this.command({ ping: 1 }, options, callback);\n    }\n    addUser(username, password, options, callback) {\n        if (typeof password === 'function') {\n            (callback = password), (password = undefined), (options = {});\n        }\n        else if (typeof password !== 'string') {\n            if (typeof options === 'function') {\n                (callback = options), (options = password), (password = undefined);\n            }\n            else {\n                (options = password), (callback = undefined), (password = undefined);\n            }\n        }\n        else {\n            if (typeof options === 'function')\n                (callback = options), (options = {});\n        }\n        options = Object.assign({ dbName: 'admin' }, options);\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new add_user_1.AddUserOperation(this.s.db, username, password, options), callback);\n    }\n    removeUser(username, options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = Object.assign({ dbName: 'admin' }, options);\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new remove_user_1.RemoveUserOperation(this.s.db, username, options), callback);\n    }\n    validateCollection(collectionName, options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options !== null && options !== void 0 ? options : {};\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new validate_collection_1.ValidateCollectionOperation(this, collectionName, options), callback);\n    }\n    listDatabases(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options !== null && options !== void 0 ? options : {};\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new list_databases_1.ListDatabasesOperation(this.s.db, options), callback);\n    }\n    replSetGetStatus(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options !== null && options !== void 0 ? options : {};\n        return this.command({ replSetGetStatus: 1 }, options, callback);\n    }\n}\nexports.Admin = Admin;\n//# sourceMappingURL=admin.js.map"]},"metadata":{},"sourceType":"script"}