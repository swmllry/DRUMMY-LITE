{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BinMsg = exports.Msg = exports.Response = exports.Query = void 0;\n\nconst BSON = require(\"../bson\");\n\nconst error_1 = require(\"../error\");\n\nconst read_preference_1 = require(\"../read_preference\");\n\nconst utils_1 = require(\"../utils\");\n\nconst constants_1 = require(\"./wire_protocol/constants\"); // Incrementing request id\n\n\nlet _requestId = 0; // Query flags\n\nconst OPTS_TAILABLE_CURSOR = 2;\nconst OPTS_SECONDARY = 4;\nconst OPTS_OPLOG_REPLAY = 8;\nconst OPTS_NO_CURSOR_TIMEOUT = 16;\nconst OPTS_AWAIT_DATA = 32;\nconst OPTS_EXHAUST = 64;\nconst OPTS_PARTIAL = 128; // Response flags\n\nconst CURSOR_NOT_FOUND = 1;\nconst QUERY_FAILURE = 2;\nconst SHARD_CONFIG_STALE = 4;\nconst AWAIT_CAPABLE = 8;\n/**************************************************************\n * QUERY\n **************************************************************/\n\n/** @internal */\n\nclass Query {\n  constructor(ns, query, options) {\n    // Basic options needed to be passed in\n    // TODO(NODE-3483): Replace with MongoCommandError\n    if (ns == null) throw new error_1.MongoRuntimeError('Namespace must be specified for query'); // TODO(NODE-3483): Replace with MongoCommandError\n\n    if (query == null) throw new error_1.MongoRuntimeError('A query document must be specified for query'); // Validate that we are not passing 0x00 in the collection name\n\n    if (ns.indexOf('\\x00') !== -1) {\n      // TODO(NODE-3483): Use MongoNamespace static method\n      throw new error_1.MongoRuntimeError('Namespace cannot contain a null character');\n    } // Basic options\n\n\n    this.ns = ns;\n    this.query = query; // Additional options\n\n    this.numberToSkip = options.numberToSkip || 0;\n    this.numberToReturn = options.numberToReturn || 0;\n    this.returnFieldSelector = options.returnFieldSelector || undefined;\n    this.requestId = Query.getRequestId(); // special case for pre-3.2 find commands, delete ASAP\n\n    this.pre32Limit = options.pre32Limit; // Serialization option\n\n    this.serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    this.ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n    this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n    this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n    this.batchSize = this.numberToReturn; // Flags\n\n    this.tailable = false;\n    this.secondaryOk = typeof options.secondaryOk === 'boolean' ? options.secondaryOk : false;\n    this.oplogReplay = false;\n    this.noCursorTimeout = false;\n    this.awaitData = false;\n    this.exhaust = false;\n    this.partial = false;\n  }\n  /** Assign next request Id. */\n\n\n  incRequestId() {\n    this.requestId = _requestId++;\n  }\n  /** Peek next request Id. */\n\n\n  nextRequestId() {\n    return _requestId + 1;\n  }\n  /** Increment then return next request Id. */\n\n\n  static getRequestId() {\n    return ++_requestId;\n  } // Uses a single allocated buffer for the process, avoiding multiple memory allocations\n\n\n  toBin() {\n    const buffers = [];\n    let projection = null; // Set up the flags\n\n    let flags = 0;\n\n    if (this.tailable) {\n      flags |= OPTS_TAILABLE_CURSOR;\n    }\n\n    if (this.secondaryOk) {\n      flags |= OPTS_SECONDARY;\n    }\n\n    if (this.oplogReplay) {\n      flags |= OPTS_OPLOG_REPLAY;\n    }\n\n    if (this.noCursorTimeout) {\n      flags |= OPTS_NO_CURSOR_TIMEOUT;\n    }\n\n    if (this.awaitData) {\n      flags |= OPTS_AWAIT_DATA;\n    }\n\n    if (this.exhaust) {\n      flags |= OPTS_EXHAUST;\n    }\n\n    if (this.partial) {\n      flags |= OPTS_PARTIAL;\n    } // If batchSize is different to this.numberToReturn\n\n\n    if (this.batchSize !== this.numberToReturn) this.numberToReturn = this.batchSize; // Allocate write protocol header buffer\n\n    const header = Buffer.alloc(4 * 4 + // Header\n    4 + // Flags\n    Buffer.byteLength(this.ns) + 1 + // namespace\n    4 + // numberToSkip\n    4 // numberToReturn\n    ); // Add header to buffers\n\n    buffers.push(header); // Serialize the query\n\n    const query = BSON.serialize(this.query, {\n      checkKeys: this.checkKeys,\n      serializeFunctions: this.serializeFunctions,\n      ignoreUndefined: this.ignoreUndefined\n    }); // Add query document\n\n    buffers.push(query);\n\n    if (this.returnFieldSelector && Object.keys(this.returnFieldSelector).length > 0) {\n      // Serialize the projection document\n      projection = BSON.serialize(this.returnFieldSelector, {\n        checkKeys: this.checkKeys,\n        serializeFunctions: this.serializeFunctions,\n        ignoreUndefined: this.ignoreUndefined\n      }); // Add projection document\n\n      buffers.push(projection);\n    } // Total message size\n\n\n    const totalLength = header.length + query.length + (projection ? projection.length : 0); // Set up the index\n\n    let index = 4; // Write total document length\n\n    header[3] = totalLength >> 24 & 0xff;\n    header[2] = totalLength >> 16 & 0xff;\n    header[1] = totalLength >> 8 & 0xff;\n    header[0] = totalLength & 0xff; // Write header information requestId\n\n    header[index + 3] = this.requestId >> 24 & 0xff;\n    header[index + 2] = this.requestId >> 16 & 0xff;\n    header[index + 1] = this.requestId >> 8 & 0xff;\n    header[index] = this.requestId & 0xff;\n    index = index + 4; // Write header information responseTo\n\n    header[index + 3] = 0 >> 24 & 0xff;\n    header[index + 2] = 0 >> 16 & 0xff;\n    header[index + 1] = 0 >> 8 & 0xff;\n    header[index] = 0 & 0xff;\n    index = index + 4; // Write header information OP_QUERY\n\n    header[index + 3] = constants_1.OP_QUERY >> 24 & 0xff;\n    header[index + 2] = constants_1.OP_QUERY >> 16 & 0xff;\n    header[index + 1] = constants_1.OP_QUERY >> 8 & 0xff;\n    header[index] = constants_1.OP_QUERY & 0xff;\n    index = index + 4; // Write header information flags\n\n    header[index + 3] = flags >> 24 & 0xff;\n    header[index + 2] = flags >> 16 & 0xff;\n    header[index + 1] = flags >> 8 & 0xff;\n    header[index] = flags & 0xff;\n    index = index + 4; // Write collection name\n\n    index = index + header.write(this.ns, index, 'utf8') + 1;\n    header[index - 1] = 0; // Write header information flags numberToSkip\n\n    header[index + 3] = this.numberToSkip >> 24 & 0xff;\n    header[index + 2] = this.numberToSkip >> 16 & 0xff;\n    header[index + 1] = this.numberToSkip >> 8 & 0xff;\n    header[index] = this.numberToSkip & 0xff;\n    index = index + 4; // Write header information flags numberToReturn\n\n    header[index + 3] = this.numberToReturn >> 24 & 0xff;\n    header[index + 2] = this.numberToReturn >> 16 & 0xff;\n    header[index + 1] = this.numberToReturn >> 8 & 0xff;\n    header[index] = this.numberToReturn & 0xff;\n    index = index + 4; // Return the buffers\n\n    return buffers;\n  }\n\n}\n\nexports.Query = Query;\n/** @internal */\n\nclass Response {\n  constructor(message, msgHeader, msgBody, opts) {\n    this.documents = new Array(0);\n    this.parsed = false;\n    this.raw = message;\n    this.data = msgBody;\n    this.opts = opts !== null && opts !== void 0 ? opts : {\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: false,\n      bsonRegExp: false\n    }; // Read the message header\n\n    this.length = msgHeader.length;\n    this.requestId = msgHeader.requestId;\n    this.responseTo = msgHeader.responseTo;\n    this.opCode = msgHeader.opCode;\n    this.fromCompressed = msgHeader.fromCompressed; // Flag values\n\n    this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n    this.promoteValues = typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n    this.promoteBuffers = typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n    this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n  }\n\n  isParsed() {\n    return this.parsed;\n  }\n\n  parse(options) {\n    var _a, _b, _c, _d; // Don't parse again if not needed\n\n\n    if (this.parsed) return;\n    options = options !== null && options !== void 0 ? options : {}; // Allow the return of raw documents instead of parsing\n\n    const raw = options.raw || false;\n    const documentsReturnedIn = options.documentsReturnedIn || null;\n    const promoteLongs = (_a = options.promoteLongs) !== null && _a !== void 0 ? _a : this.opts.promoteLongs;\n    const promoteValues = (_b = options.promoteValues) !== null && _b !== void 0 ? _b : this.opts.promoteValues;\n    const promoteBuffers = (_c = options.promoteBuffers) !== null && _c !== void 0 ? _c : this.opts.promoteBuffers;\n    const bsonRegExp = (_d = options.bsonRegExp) !== null && _d !== void 0 ? _d : this.opts.bsonRegExp;\n    let bsonSize; // Set up the options\n\n    const _options = {\n      promoteLongs,\n      promoteValues,\n      promoteBuffers,\n      bsonRegExp\n    }; // Position within OP_REPLY at which documents start\n    // (See https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#wire-op-reply)\n\n    this.index = 20; // Read the message body\n\n    this.responseFlags = this.data.readInt32LE(0);\n    this.cursorId = new BSON.Long(this.data.readInt32LE(4), this.data.readInt32LE(8));\n    this.startingFrom = this.data.readInt32LE(12);\n    this.numberReturned = this.data.readInt32LE(16); // Preallocate document array\n\n    this.documents = new Array(this.numberReturned);\n    this.cursorNotFound = (this.responseFlags & CURSOR_NOT_FOUND) !== 0;\n    this.queryFailure = (this.responseFlags & QUERY_FAILURE) !== 0;\n    this.shardConfigStale = (this.responseFlags & SHARD_CONFIG_STALE) !== 0;\n    this.awaitCapable = (this.responseFlags & AWAIT_CAPABLE) !== 0; // Parse Body\n\n    for (let i = 0; i < this.numberReturned; i++) {\n      bsonSize = this.data[this.index] | this.data[this.index + 1] << 8 | this.data[this.index + 2] << 16 | this.data[this.index + 3] << 24; // If we have raw results specified slice the return document\n\n      if (raw) {\n        this.documents[i] = this.data.slice(this.index, this.index + bsonSize);\n      } else {\n        this.documents[i] = BSON.deserialize(this.data.slice(this.index, this.index + bsonSize), _options);\n      } // Adjust the index\n\n\n      this.index = this.index + bsonSize;\n    }\n\n    if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n      const fieldsAsRaw = {};\n      fieldsAsRaw[documentsReturnedIn] = true;\n      _options.fieldsAsRaw = fieldsAsRaw;\n      const doc = BSON.deserialize(this.documents[0], _options);\n      this.documents = [doc];\n    } // Set parsed\n\n\n    this.parsed = true;\n  }\n\n}\n\nexports.Response = Response; // Implementation of OP_MSG spec:\n// https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.rst\n//\n// struct Section {\n//   uint8 payloadType;\n//   union payload {\n//       document  document; // payloadType == 0\n//       struct sequence { // payloadType == 1\n//           int32      size;\n//           cstring    identifier;\n//           document*  documents;\n//       };\n//   };\n// };\n// struct OP_MSG {\n//   struct MsgHeader {\n//       int32  messageLength;\n//       int32  requestID;\n//       int32  responseTo;\n//       int32  opCode = 2013;\n//   };\n//   uint32      flagBits;\n//   Section+    sections;\n//   [uint32     checksum;]\n// };\n// Msg Flags\n\nconst OPTS_CHECKSUM_PRESENT = 1;\nconst OPTS_MORE_TO_COME = 2;\nconst OPTS_EXHAUST_ALLOWED = 1 << 16;\n/** @internal */\n\nclass Msg {\n  constructor(ns, command, options) {\n    // Basic options needed to be passed in\n    if (command == null) throw new error_1.MongoInvalidArgumentError('Query document must be specified for query'); // Basic options\n\n    this.ns = ns;\n    this.command = command;\n    this.command.$db = (0, utils_1.databaseNamespace)(ns);\n\n    if (options.readPreference && options.readPreference.mode !== read_preference_1.ReadPreference.PRIMARY) {\n      this.command.$readPreference = options.readPreference.toJSON();\n    } // Ensure empty options\n\n\n    this.options = options !== null && options !== void 0 ? options : {}; // Additional options\n\n    this.requestId = options.requestId ? options.requestId : Msg.getRequestId(); // Serialization option\n\n    this.serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    this.ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n    this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n    this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16; // flags\n\n    this.checksumPresent = false;\n    this.moreToCome = options.moreToCome || false;\n    this.exhaustAllowed = typeof options.exhaustAllowed === 'boolean' ? options.exhaustAllowed : false;\n  }\n\n  toBin() {\n    const buffers = [];\n    let flags = 0;\n\n    if (this.checksumPresent) {\n      flags |= OPTS_CHECKSUM_PRESENT;\n    }\n\n    if (this.moreToCome) {\n      flags |= OPTS_MORE_TO_COME;\n    }\n\n    if (this.exhaustAllowed) {\n      flags |= OPTS_EXHAUST_ALLOWED;\n    }\n\n    const header = Buffer.alloc(4 * 4 + // Header\n    4 // Flags\n    );\n    buffers.push(header);\n    let totalLength = header.length;\n    const command = this.command;\n    totalLength += this.makeDocumentSegment(buffers, command);\n    header.writeInt32LE(totalLength, 0); // messageLength\n\n    header.writeInt32LE(this.requestId, 4); // requestID\n\n    header.writeInt32LE(0, 8); // responseTo\n\n    header.writeInt32LE(constants_1.OP_MSG, 12); // opCode\n\n    header.writeUInt32LE(flags, 16); // flags\n\n    return buffers;\n  }\n\n  makeDocumentSegment(buffers, document) {\n    const payloadTypeBuffer = Buffer.alloc(1);\n    payloadTypeBuffer[0] = 0;\n    const documentBuffer = this.serializeBson(document);\n    buffers.push(payloadTypeBuffer);\n    buffers.push(documentBuffer);\n    return payloadTypeBuffer.length + documentBuffer.length;\n  }\n\n  serializeBson(document) {\n    return BSON.serialize(document, {\n      checkKeys: this.checkKeys,\n      serializeFunctions: this.serializeFunctions,\n      ignoreUndefined: this.ignoreUndefined\n    });\n  }\n\n  static getRequestId() {\n    _requestId = _requestId + 1 & 0x7fffffff;\n    return _requestId;\n  }\n\n}\n\nexports.Msg = Msg;\n/** @internal */\n\nclass BinMsg {\n  constructor(message, msgHeader, msgBody, opts) {\n    this.parsed = false;\n    this.raw = message;\n    this.data = msgBody;\n    this.opts = opts !== null && opts !== void 0 ? opts : {\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: false,\n      bsonRegExp: false\n    }; // Read the message header\n\n    this.length = msgHeader.length;\n    this.requestId = msgHeader.requestId;\n    this.responseTo = msgHeader.responseTo;\n    this.opCode = msgHeader.opCode;\n    this.fromCompressed = msgHeader.fromCompressed; // Read response flags\n\n    this.responseFlags = msgBody.readInt32LE(0);\n    this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;\n    this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;\n    this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;\n    this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n    this.promoteValues = typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n    this.promoteBuffers = typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n    this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n    this.documents = [];\n  }\n\n  isParsed() {\n    return this.parsed;\n  }\n\n  parse(options) {\n    var _a, _b, _c, _d; // Don't parse again if not needed\n\n\n    if (this.parsed) return;\n    options = options !== null && options !== void 0 ? options : {};\n    this.index = 4; // Allow the return of raw documents instead of parsing\n\n    const raw = options.raw || false;\n    const documentsReturnedIn = options.documentsReturnedIn || null;\n    const promoteLongs = (_a = options.promoteLongs) !== null && _a !== void 0 ? _a : this.opts.promoteLongs;\n    const promoteValues = (_b = options.promoteValues) !== null && _b !== void 0 ? _b : this.opts.promoteValues;\n    const promoteBuffers = (_c = options.promoteBuffers) !== null && _c !== void 0 ? _c : this.opts.promoteBuffers;\n    const bsonRegExp = (_d = options.bsonRegExp) !== null && _d !== void 0 ? _d : this.opts.bsonRegExp;\n    const validation = this.parseBsonSerializationOptions(options); // Set up the options\n\n    const bsonOptions = {\n      promoteLongs,\n      promoteValues,\n      promoteBuffers,\n      bsonRegExp,\n      validation // Due to the strictness of the BSON libraries validation option we need this cast\n\n    };\n\n    while (this.index < this.data.length) {\n      const payloadType = this.data.readUInt8(this.index++);\n\n      if (payloadType === 0) {\n        const bsonSize = this.data.readUInt32LE(this.index);\n        const bin = this.data.slice(this.index, this.index + bsonSize);\n        this.documents.push(raw ? bin : BSON.deserialize(bin, bsonOptions));\n        this.index += bsonSize;\n      } else if (payloadType === 1) {\n        // It was decided that no driver makes use of payload type 1\n        // TODO(NODE-3483): Replace with MongoDeprecationError\n        throw new error_1.MongoRuntimeError('OP_MSG Payload Type 1 detected unsupported protocol');\n      }\n    }\n\n    if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n      const fieldsAsRaw = {};\n      fieldsAsRaw[documentsReturnedIn] = true;\n      bsonOptions.fieldsAsRaw = fieldsAsRaw;\n      const doc = BSON.deserialize(this.documents[0], bsonOptions);\n      this.documents = [doc];\n    }\n\n    this.parsed = true;\n  }\n\n  parseBsonSerializationOptions(_ref) {\n    let {\n      enableUtf8Validation\n    } = _ref;\n\n    if (enableUtf8Validation === false) {\n      return {\n        utf8: false\n      };\n    }\n\n    return {\n      utf8: {\n        writeErrors: false\n      }\n    };\n  }\n\n}\n\nexports.BinMsg = BinMsg;","map":{"version":3,"sources":["../../src/cmap/commands.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BinMsg = exports.Msg = exports.Response = exports.Query = void 0;\nconst BSON = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst utils_1 = require(\"../utils\");\nconst constants_1 = require(\"./wire_protocol/constants\");\n// Incrementing request id\nlet _requestId = 0;\n// Query flags\nconst OPTS_TAILABLE_CURSOR = 2;\nconst OPTS_SECONDARY = 4;\nconst OPTS_OPLOG_REPLAY = 8;\nconst OPTS_NO_CURSOR_TIMEOUT = 16;\nconst OPTS_AWAIT_DATA = 32;\nconst OPTS_EXHAUST = 64;\nconst OPTS_PARTIAL = 128;\n// Response flags\nconst CURSOR_NOT_FOUND = 1;\nconst QUERY_FAILURE = 2;\nconst SHARD_CONFIG_STALE = 4;\nconst AWAIT_CAPABLE = 8;\n/**************************************************************\n * QUERY\n **************************************************************/\n/** @internal */\nclass Query {\n    constructor(ns, query, options) {\n        // Basic options needed to be passed in\n        // TODO(NODE-3483): Replace with MongoCommandError\n        if (ns == null)\n            throw new error_1.MongoRuntimeError('Namespace must be specified for query');\n        // TODO(NODE-3483): Replace with MongoCommandError\n        if (query == null)\n            throw new error_1.MongoRuntimeError('A query document must be specified for query');\n        // Validate that we are not passing 0x00 in the collection name\n        if (ns.indexOf('\\x00') !== -1) {\n            // TODO(NODE-3483): Use MongoNamespace static method\n            throw new error_1.MongoRuntimeError('Namespace cannot contain a null character');\n        }\n        // Basic options\n        this.ns = ns;\n        this.query = query;\n        // Additional options\n        this.numberToSkip = options.numberToSkip || 0;\n        this.numberToReturn = options.numberToReturn || 0;\n        this.returnFieldSelector = options.returnFieldSelector || undefined;\n        this.requestId = Query.getRequestId();\n        // special case for pre-3.2 find commands, delete ASAP\n        this.pre32Limit = options.pre32Limit;\n        // Serialization option\n        this.serializeFunctions =\n            typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n        this.ignoreUndefined =\n            typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n        this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n        this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n        this.batchSize = this.numberToReturn;\n        // Flags\n        this.tailable = false;\n        this.secondaryOk = typeof options.secondaryOk === 'boolean' ? options.secondaryOk : false;\n        this.oplogReplay = false;\n        this.noCursorTimeout = false;\n        this.awaitData = false;\n        this.exhaust = false;\n        this.partial = false;\n    }\n    /** Assign next request Id. */\n    incRequestId() {\n        this.requestId = _requestId++;\n    }\n    /** Peek next request Id. */\n    nextRequestId() {\n        return _requestId + 1;\n    }\n    /** Increment then return next request Id. */\n    static getRequestId() {\n        return ++_requestId;\n    }\n    // Uses a single allocated buffer for the process, avoiding multiple memory allocations\n    toBin() {\n        const buffers = [];\n        let projection = null;\n        // Set up the flags\n        let flags = 0;\n        if (this.tailable) {\n            flags |= OPTS_TAILABLE_CURSOR;\n        }\n        if (this.secondaryOk) {\n            flags |= OPTS_SECONDARY;\n        }\n        if (this.oplogReplay) {\n            flags |= OPTS_OPLOG_REPLAY;\n        }\n        if (this.noCursorTimeout) {\n            flags |= OPTS_NO_CURSOR_TIMEOUT;\n        }\n        if (this.awaitData) {\n            flags |= OPTS_AWAIT_DATA;\n        }\n        if (this.exhaust) {\n            flags |= OPTS_EXHAUST;\n        }\n        if (this.partial) {\n            flags |= OPTS_PARTIAL;\n        }\n        // If batchSize is different to this.numberToReturn\n        if (this.batchSize !== this.numberToReturn)\n            this.numberToReturn = this.batchSize;\n        // Allocate write protocol header buffer\n        const header = Buffer.alloc(4 * 4 + // Header\n            4 + // Flags\n            Buffer.byteLength(this.ns) +\n            1 + // namespace\n            4 + // numberToSkip\n            4 // numberToReturn\n        );\n        // Add header to buffers\n        buffers.push(header);\n        // Serialize the query\n        const query = BSON.serialize(this.query, {\n            checkKeys: this.checkKeys,\n            serializeFunctions: this.serializeFunctions,\n            ignoreUndefined: this.ignoreUndefined\n        });\n        // Add query document\n        buffers.push(query);\n        if (this.returnFieldSelector && Object.keys(this.returnFieldSelector).length > 0) {\n            // Serialize the projection document\n            projection = BSON.serialize(this.returnFieldSelector, {\n                checkKeys: this.checkKeys,\n                serializeFunctions: this.serializeFunctions,\n                ignoreUndefined: this.ignoreUndefined\n            });\n            // Add projection document\n            buffers.push(projection);\n        }\n        // Total message size\n        const totalLength = header.length + query.length + (projection ? projection.length : 0);\n        // Set up the index\n        let index = 4;\n        // Write total document length\n        header[3] = (totalLength >> 24) & 0xff;\n        header[2] = (totalLength >> 16) & 0xff;\n        header[1] = (totalLength >> 8) & 0xff;\n        header[0] = totalLength & 0xff;\n        // Write header information requestId\n        header[index + 3] = (this.requestId >> 24) & 0xff;\n        header[index + 2] = (this.requestId >> 16) & 0xff;\n        header[index + 1] = (this.requestId >> 8) & 0xff;\n        header[index] = this.requestId & 0xff;\n        index = index + 4;\n        // Write header information responseTo\n        header[index + 3] = (0 >> 24) & 0xff;\n        header[index + 2] = (0 >> 16) & 0xff;\n        header[index + 1] = (0 >> 8) & 0xff;\n        header[index] = 0 & 0xff;\n        index = index + 4;\n        // Write header information OP_QUERY\n        header[index + 3] = (constants_1.OP_QUERY >> 24) & 0xff;\n        header[index + 2] = (constants_1.OP_QUERY >> 16) & 0xff;\n        header[index + 1] = (constants_1.OP_QUERY >> 8) & 0xff;\n        header[index] = constants_1.OP_QUERY & 0xff;\n        index = index + 4;\n        // Write header information flags\n        header[index + 3] = (flags >> 24) & 0xff;\n        header[index + 2] = (flags >> 16) & 0xff;\n        header[index + 1] = (flags >> 8) & 0xff;\n        header[index] = flags & 0xff;\n        index = index + 4;\n        // Write collection name\n        index = index + header.write(this.ns, index, 'utf8') + 1;\n        header[index - 1] = 0;\n        // Write header information flags numberToSkip\n        header[index + 3] = (this.numberToSkip >> 24) & 0xff;\n        header[index + 2] = (this.numberToSkip >> 16) & 0xff;\n        header[index + 1] = (this.numberToSkip >> 8) & 0xff;\n        header[index] = this.numberToSkip & 0xff;\n        index = index + 4;\n        // Write header information flags numberToReturn\n        header[index + 3] = (this.numberToReturn >> 24) & 0xff;\n        header[index + 2] = (this.numberToReturn >> 16) & 0xff;\n        header[index + 1] = (this.numberToReturn >> 8) & 0xff;\n        header[index] = this.numberToReturn & 0xff;\n        index = index + 4;\n        // Return the buffers\n        return buffers;\n    }\n}\nexports.Query = Query;\n/** @internal */\nclass Response {\n    constructor(message, msgHeader, msgBody, opts) {\n        this.documents = new Array(0);\n        this.parsed = false;\n        this.raw = message;\n        this.data = msgBody;\n        this.opts = opts !== null && opts !== void 0 ? opts : {\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: false,\n            bsonRegExp: false\n        };\n        // Read the message header\n        this.length = msgHeader.length;\n        this.requestId = msgHeader.requestId;\n        this.responseTo = msgHeader.responseTo;\n        this.opCode = msgHeader.opCode;\n        this.fromCompressed = msgHeader.fromCompressed;\n        // Flag values\n        this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n        this.promoteValues =\n            typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n        this.promoteBuffers =\n            typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n        this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n    }\n    isParsed() {\n        return this.parsed;\n    }\n    parse(options) {\n        var _a, _b, _c, _d;\n        // Don't parse again if not needed\n        if (this.parsed)\n            return;\n        options = options !== null && options !== void 0 ? options : {};\n        // Allow the return of raw documents instead of parsing\n        const raw = options.raw || false;\n        const documentsReturnedIn = options.documentsReturnedIn || null;\n        const promoteLongs = (_a = options.promoteLongs) !== null && _a !== void 0 ? _a : this.opts.promoteLongs;\n        const promoteValues = (_b = options.promoteValues) !== null && _b !== void 0 ? _b : this.opts.promoteValues;\n        const promoteBuffers = (_c = options.promoteBuffers) !== null && _c !== void 0 ? _c : this.opts.promoteBuffers;\n        const bsonRegExp = (_d = options.bsonRegExp) !== null && _d !== void 0 ? _d : this.opts.bsonRegExp;\n        let bsonSize;\n        // Set up the options\n        const _options = {\n            promoteLongs,\n            promoteValues,\n            promoteBuffers,\n            bsonRegExp\n        };\n        // Position within OP_REPLY at which documents start\n        // (See https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#wire-op-reply)\n        this.index = 20;\n        // Read the message body\n        this.responseFlags = this.data.readInt32LE(0);\n        this.cursorId = new BSON.Long(this.data.readInt32LE(4), this.data.readInt32LE(8));\n        this.startingFrom = this.data.readInt32LE(12);\n        this.numberReturned = this.data.readInt32LE(16);\n        // Preallocate document array\n        this.documents = new Array(this.numberReturned);\n        this.cursorNotFound = (this.responseFlags & CURSOR_NOT_FOUND) !== 0;\n        this.queryFailure = (this.responseFlags & QUERY_FAILURE) !== 0;\n        this.shardConfigStale = (this.responseFlags & SHARD_CONFIG_STALE) !== 0;\n        this.awaitCapable = (this.responseFlags & AWAIT_CAPABLE) !== 0;\n        // Parse Body\n        for (let i = 0; i < this.numberReturned; i++) {\n            bsonSize =\n                this.data[this.index] |\n                    (this.data[this.index + 1] << 8) |\n                    (this.data[this.index + 2] << 16) |\n                    (this.data[this.index + 3] << 24);\n            // If we have raw results specified slice the return document\n            if (raw) {\n                this.documents[i] = this.data.slice(this.index, this.index + bsonSize);\n            }\n            else {\n                this.documents[i] = BSON.deserialize(this.data.slice(this.index, this.index + bsonSize), _options);\n            }\n            // Adjust the index\n            this.index = this.index + bsonSize;\n        }\n        if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n            const fieldsAsRaw = {};\n            fieldsAsRaw[documentsReturnedIn] = true;\n            _options.fieldsAsRaw = fieldsAsRaw;\n            const doc = BSON.deserialize(this.documents[0], _options);\n            this.documents = [doc];\n        }\n        // Set parsed\n        this.parsed = true;\n    }\n}\nexports.Response = Response;\n// Implementation of OP_MSG spec:\n// https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.rst\n//\n// struct Section {\n//   uint8 payloadType;\n//   union payload {\n//       document  document; // payloadType == 0\n//       struct sequence { // payloadType == 1\n//           int32      size;\n//           cstring    identifier;\n//           document*  documents;\n//       };\n//   };\n// };\n// struct OP_MSG {\n//   struct MsgHeader {\n//       int32  messageLength;\n//       int32  requestID;\n//       int32  responseTo;\n//       int32  opCode = 2013;\n//   };\n//   uint32      flagBits;\n//   Section+    sections;\n//   [uint32     checksum;]\n// };\n// Msg Flags\nconst OPTS_CHECKSUM_PRESENT = 1;\nconst OPTS_MORE_TO_COME = 2;\nconst OPTS_EXHAUST_ALLOWED = 1 << 16;\n/** @internal */\nclass Msg {\n    constructor(ns, command, options) {\n        // Basic options needed to be passed in\n        if (command == null)\n            throw new error_1.MongoInvalidArgumentError('Query document must be specified for query');\n        // Basic options\n        this.ns = ns;\n        this.command = command;\n        this.command.$db = (0, utils_1.databaseNamespace)(ns);\n        if (options.readPreference && options.readPreference.mode !== read_preference_1.ReadPreference.PRIMARY) {\n            this.command.$readPreference = options.readPreference.toJSON();\n        }\n        // Ensure empty options\n        this.options = options !== null && options !== void 0 ? options : {};\n        // Additional options\n        this.requestId = options.requestId ? options.requestId : Msg.getRequestId();\n        // Serialization option\n        this.serializeFunctions =\n            typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n        this.ignoreUndefined =\n            typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n        this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n        this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n        // flags\n        this.checksumPresent = false;\n        this.moreToCome = options.moreToCome || false;\n        this.exhaustAllowed =\n            typeof options.exhaustAllowed === 'boolean' ? options.exhaustAllowed : false;\n    }\n    toBin() {\n        const buffers = [];\n        let flags = 0;\n        if (this.checksumPresent) {\n            flags |= OPTS_CHECKSUM_PRESENT;\n        }\n        if (this.moreToCome) {\n            flags |= OPTS_MORE_TO_COME;\n        }\n        if (this.exhaustAllowed) {\n            flags |= OPTS_EXHAUST_ALLOWED;\n        }\n        const header = Buffer.alloc(4 * 4 + // Header\n            4 // Flags\n        );\n        buffers.push(header);\n        let totalLength = header.length;\n        const command = this.command;\n        totalLength += this.makeDocumentSegment(buffers, command);\n        header.writeInt32LE(totalLength, 0); // messageLength\n        header.writeInt32LE(this.requestId, 4); // requestID\n        header.writeInt32LE(0, 8); // responseTo\n        header.writeInt32LE(constants_1.OP_MSG, 12); // opCode\n        header.writeUInt32LE(flags, 16); // flags\n        return buffers;\n    }\n    makeDocumentSegment(buffers, document) {\n        const payloadTypeBuffer = Buffer.alloc(1);\n        payloadTypeBuffer[0] = 0;\n        const documentBuffer = this.serializeBson(document);\n        buffers.push(payloadTypeBuffer);\n        buffers.push(documentBuffer);\n        return payloadTypeBuffer.length + documentBuffer.length;\n    }\n    serializeBson(document) {\n        return BSON.serialize(document, {\n            checkKeys: this.checkKeys,\n            serializeFunctions: this.serializeFunctions,\n            ignoreUndefined: this.ignoreUndefined\n        });\n    }\n    static getRequestId() {\n        _requestId = (_requestId + 1) & 0x7fffffff;\n        return _requestId;\n    }\n}\nexports.Msg = Msg;\n/** @internal */\nclass BinMsg {\n    constructor(message, msgHeader, msgBody, opts) {\n        this.parsed = false;\n        this.raw = message;\n        this.data = msgBody;\n        this.opts = opts !== null && opts !== void 0 ? opts : {\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: false,\n            bsonRegExp: false\n        };\n        // Read the message header\n        this.length = msgHeader.length;\n        this.requestId = msgHeader.requestId;\n        this.responseTo = msgHeader.responseTo;\n        this.opCode = msgHeader.opCode;\n        this.fromCompressed = msgHeader.fromCompressed;\n        // Read response flags\n        this.responseFlags = msgBody.readInt32LE(0);\n        this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;\n        this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;\n        this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;\n        this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n        this.promoteValues =\n            typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n        this.promoteBuffers =\n            typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n        this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n        this.documents = [];\n    }\n    isParsed() {\n        return this.parsed;\n    }\n    parse(options) {\n        var _a, _b, _c, _d;\n        // Don't parse again if not needed\n        if (this.parsed)\n            return;\n        options = options !== null && options !== void 0 ? options : {};\n        this.index = 4;\n        // Allow the return of raw documents instead of parsing\n        const raw = options.raw || false;\n        const documentsReturnedIn = options.documentsReturnedIn || null;\n        const promoteLongs = (_a = options.promoteLongs) !== null && _a !== void 0 ? _a : this.opts.promoteLongs;\n        const promoteValues = (_b = options.promoteValues) !== null && _b !== void 0 ? _b : this.opts.promoteValues;\n        const promoteBuffers = (_c = options.promoteBuffers) !== null && _c !== void 0 ? _c : this.opts.promoteBuffers;\n        const bsonRegExp = (_d = options.bsonRegExp) !== null && _d !== void 0 ? _d : this.opts.bsonRegExp;\n        const validation = this.parseBsonSerializationOptions(options);\n        // Set up the options\n        const bsonOptions = {\n            promoteLongs,\n            promoteValues,\n            promoteBuffers,\n            bsonRegExp,\n            validation\n            // Due to the strictness of the BSON libraries validation option we need this cast\n        };\n        while (this.index < this.data.length) {\n            const payloadType = this.data.readUInt8(this.index++);\n            if (payloadType === 0) {\n                const bsonSize = this.data.readUInt32LE(this.index);\n                const bin = this.data.slice(this.index, this.index + bsonSize);\n                this.documents.push(raw ? bin : BSON.deserialize(bin, bsonOptions));\n                this.index += bsonSize;\n            }\n            else if (payloadType === 1) {\n                // It was decided that no driver makes use of payload type 1\n                // TODO(NODE-3483): Replace with MongoDeprecationError\n                throw new error_1.MongoRuntimeError('OP_MSG Payload Type 1 detected unsupported protocol');\n            }\n        }\n        if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n            const fieldsAsRaw = {};\n            fieldsAsRaw[documentsReturnedIn] = true;\n            bsonOptions.fieldsAsRaw = fieldsAsRaw;\n            const doc = BSON.deserialize(this.documents[0], bsonOptions);\n            this.documents = [doc];\n        }\n        this.parsed = true;\n    }\n    parseBsonSerializationOptions({ enableUtf8Validation }) {\n        if (enableUtf8Validation === false) {\n            return { utf8: false };\n        }\n        return { utf8: { writeErrors: false } };\n    }\n}\nexports.BinMsg = BinMsg;\n//# sourceMappingURL=commands.js.map"]},"metadata":{},"sourceType":"script"}