{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FEATURE_FLAGS = exports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.checkTLSOptions = exports.resolveSRVRecord = void 0;\n\nconst dns = require(\"dns\");\n\nconst fs = require(\"fs\");\n\nconst mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\n\nconst url_1 = require(\"url\");\n\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\n\nconst providers_1 = require(\"./cmap/auth/providers\");\n\nconst compression_1 = require(\"./cmap/wire_protocol/compression\");\n\nconst encrypter_1 = require(\"./encrypter\");\n\nconst error_1 = require(\"./error\");\n\nconst logger_1 = require(\"./logger\");\n\nconst mongo_client_1 = require(\"./mongo_client\");\n\nconst promise_provider_1 = require(\"./promise_provider\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst utils_1 = require(\"./utils\");\n\nconst write_concern_1 = require(\"./write_concern\");\n\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\n\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\n\n\nfunction resolveSRVRecord(options, callback) {\n  if (typeof options.srvHost !== 'string') {\n    return callback(new error_1.MongoAPIError('Option \"srvHost\" must not be empty'));\n  }\n\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    return callback(new error_1.MongoAPIError('URI must include hostname, domain name, and tld'));\n  } // Resolve the SRV record and use the result as the list of hosts to connect to.\n\n\n  const lookupAddress = options.srvHost;\n  dns.resolveSrv(`_${options.srvServiceName}._tcp.${lookupAddress}`, (err, addresses) => {\n    if (err) return callback(err);\n\n    if (addresses.length === 0) {\n      return callback(new error_1.MongoAPIError('No addresses found at host'));\n    }\n\n    for (const {\n      name\n    } of addresses) {\n      if (!matchesParentDomain(name, lookupAddress)) {\n        return callback(new error_1.MongoAPIError('Server record does not share hostname with parent URI'));\n      }\n    }\n\n    const hostAddresses = addresses.map(r => {\n      var _a;\n\n      return utils_1.HostAddress.fromString(`${r.name}:${(_a = r.port) !== null && _a !== void 0 ? _a : 27017}`);\n    });\n    const lbError = validateLoadBalancedOptions(hostAddresses, options, true);\n\n    if (lbError) {\n      return callback(lbError);\n    } // Resolve TXT record and add options from there if they exist.\n\n\n    dns.resolveTxt(lookupAddress, (err, record) => {\n      var _a, _b, _c;\n\n      if (err) {\n        if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\n          return callback(err);\n        }\n      } else {\n        if (record.length > 1) {\n          return callback(new error_1.MongoParseError('Multiple text records not allowed'));\n        }\n\n        const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n        const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n\n        if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n          return callback(new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`));\n        }\n\n        if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n          return callback(new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record'));\n        }\n\n        const source = (_a = txtRecordOptions.get('authSource')) !== null && _a !== void 0 ? _a : undefined;\n        const replicaSet = (_b = txtRecordOptions.get('replicaSet')) !== null && _b !== void 0 ? _b : undefined;\n        const loadBalanced = (_c = txtRecordOptions.get('loadBalanced')) !== null && _c !== void 0 ? _c : undefined;\n\n        if (!options.userSpecifiedAuthSource && source && options.credentials && !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n          options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n            source\n          });\n        }\n\n        if (!options.userSpecifiedReplicaSet && replicaSet) {\n          options.replicaSet = replicaSet;\n        }\n\n        if (loadBalanced === 'true') {\n          options.loadBalanced = true;\n        }\n\n        if (options.replicaSet && options.srvMaxHosts > 0) {\n          return callback(new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts'));\n        }\n\n        const lbError = validateLoadBalancedOptions(hostAddresses, options, true);\n\n        if (lbError) {\n          return callback(lbError);\n        }\n      }\n\n      callback(undefined, hostAddresses);\n    });\n  });\n}\n\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param options - The options used for options parsing\n * @throws MongoParseError if TLS options are invalid\n */\n\nfunction checkTLSOptions(options) {\n  if (!options) return;\n\n  const check = (a, b) => {\n    if (Reflect.has(options, a) && Reflect.has(options, b)) {\n      throw new error_1.MongoParseError(`The '${a}' option cannot be used with '${b}'`);\n    }\n  };\n\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\n\nexports.checkTLSOptions = checkTLSOptions;\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\n\nfunction getBoolean(name, value) {\n  if (typeof value === 'boolean') return value;\n  const valueString = String(value).toLowerCase();\n\n  if (TRUTHS.has(valueString)) {\n    if (valueString !== 'true') {\n      (0, utils_1.emitWarningOnce)(`deprecated value for ${name} : ${valueString} - please update to ${name} : true instead`);\n    }\n\n    return true;\n  }\n\n  if (FALSEHOODS.has(valueString)) {\n    if (valueString !== 'false') {\n      (0, utils_1.emitWarningOnce)(`deprecated value for ${name} : ${valueString} - please update to ${name} : false instead`);\n    }\n\n    return false;\n  }\n\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified boolean value, got: ${value}`);\n}\n\nfunction getInt(name, value) {\n  if (typeof value === 'number') return Math.trunc(value);\n  const parsedValue = Number.parseInt(String(value), 10);\n  if (!Number.isNaN(parsedValue)) return parsedValue;\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\n\nfunction getUint(name, value) {\n  const parsedValue = getInt(name, value);\n\n  if (parsedValue < 0) {\n    throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n\n  return parsedValue;\n}\n\nfunction* entriesFromString(value) {\n  const keyValuePairs = value.split(',');\n\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(':');\n\n    if (value == null) {\n      throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n    }\n\n    yield [key, value];\n  }\n}\n\nclass CaseInsensitiveMap extends Map {\n  constructor() {\n    let entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    super(entries.map(_ref => {\n      let [k, v] = _ref;\n      return [k.toLowerCase(), v];\n    }));\n  }\n\n  has(k) {\n    return super.has(k.toLowerCase());\n  }\n\n  get(k) {\n    return super.get(k.toLowerCase());\n  }\n\n  set(k, v) {\n    return super.set(k.toLowerCase(), v);\n  }\n\n  delete(k) {\n    return super.delete(k.toLowerCase());\n  }\n\n}\n\nfunction parseOptions(uri) {\n  let mongoClient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n\n  const url = new mongodb_connection_string_url_1.default(uri);\n  const {\n    hosts,\n    isSRV\n  } = url;\n  const mongoOptions = Object.create(null); // Feature flags\n\n  for (const flag of Object.getOwnPropertySymbols(options)) {\n    if (exports.FEATURE_FLAGS.has(flag)) {\n      mongoOptions[flag] = options[flag];\n    }\n  }\n\n  mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n  const urlOptions = new CaseInsensitiveMap();\n\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n\n  if (url.username !== '') {\n    const auth = {\n      username: decodeURIComponent(url.username)\n    };\n\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n\n    urlOptions.set('auth', [auth]);\n  }\n\n  for (const key of url.searchParams.keys()) {\n    const values = [...url.searchParams.getAll(key)];\n\n    if (values.includes('')) {\n      throw new error_1.MongoAPIError('URI cannot contain options with no value');\n    }\n\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n\n  const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(_ref2 => {\n    let [, v] = _ref2;\n    return v != null;\n  })); // Validate options that can only be provided by one of uri or object\n\n  if (urlOptions.has('serverApi')) {\n    throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n  }\n\n  if (objectOptions.has('loadBalanced')) {\n    throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n  } // All option collection\n\n\n  const allOptions = new CaseInsensitiveMap();\n  const allKeys = new Set([...urlOptions.keys(), ...objectOptions.keys(), ...exports.DEFAULT_OPTIONS.keys()]);\n\n  for (const key of allKeys) {\n    const values = [];\n    const objectOptionValue = objectOptions.get(key);\n\n    if (objectOptionValue != null) {\n      values.push(objectOptionValue);\n    }\n\n    const urlValue = urlOptions.get(key);\n\n    if (urlValue != null) {\n      values.push(...urlValue);\n    }\n\n    const defaultOptionsValue = exports.DEFAULT_OPTIONS.get(key);\n\n    if (defaultOptionsValue != null) {\n      values.push(defaultOptionsValue);\n    }\n\n    allOptions.set(key, values);\n  }\n\n  if (allOptions.has('tlsCertificateKeyFile') && !allOptions.has('tlsCertificateFile')) {\n    allOptions.set('tlsCertificateFile', allOptions.get('tlsCertificateKeyFile'));\n  }\n\n  if (allOptions.has('tls') || allOptions.has('ssl')) {\n    const tlsAndSslOpts = (allOptions.get('tls') || []).concat(allOptions.get('ssl') || []).map(getBoolean.bind(null, 'tls/ssl'));\n\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n\n  const unsupportedOptions = (0, utils_1.setDifference)(allKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n  } // Option parsing and setting\n\n\n  for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n    const values = allOptions.get(key);\n    if (!values || values.length === 0) continue;\n    setOption(mongoOptions, key, descriptor, values);\n  }\n\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n\n    if ((isGssapi || isX509) && allOptions.has('authSource') && mongoOptions.credentials.source !== '$external') {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new error_1.MongoParseError(`${mongoOptions.credentials} can only have authSource set to '$external'`);\n    }\n\n    if (!(isGssapi || isX509 || isAws) && mongoOptions.dbName && !allOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n\n    mongoOptions.credentials.validate(); // Check if the only auth related option provided was authSource, if so we can remove credentials\n\n    if (mongoOptions.credentials.password === '' && mongoOptions.credentials.username === '' && mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n      delete mongoOptions.credentials;\n    }\n  }\n\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n\n  checkTLSOptions(mongoOptions);\n  if (options.promiseLibrary) promise_provider_1.PromiseProvider.set(options.promiseLibrary);\n  const lbError = validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n\n  if (lbError) {\n    throw lbError;\n  }\n\n  if (mongoClient && mongoOptions.autoEncryption) {\n    encrypter_1.Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  } // Potential SRV Overrides and SRV connection string validations\n\n\n  mongoOptions.userSpecifiedAuthSource = objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet = objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n\n    if (mongoOptions.directConnection) {\n      throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n    }\n\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    } // SRV turns on TLS by default, but users can override and turn it off\n\n\n    const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    const userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') || objectOptions.has('srvMaxHosts') || urlOptions.has('srvServiceName') || objectOptions.has('srvServiceName');\n\n    if (userSpecifiedSrvOptions) {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n    }\n  }\n\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n    throw new error_1.MongoParseError('directConnection option requires exactly one host');\n  }\n\n  if (!mongoOptions.proxyHost && (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n    throw new error_1.MongoParseError('Must specify proxyHost if other proxy options are passed');\n  }\n\n  if (mongoOptions.proxyUsername && !mongoOptions.proxyPassword || !mongoOptions.proxyUsername && mongoOptions.proxyPassword) {\n    throw new error_1.MongoParseError('Can only specify both of proxy username/password or neither');\n  }\n\n  const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(key => {\n    var _a;\n\n    return (_a = urlOptions.get(key)) !== null && _a !== void 0 ? _a : [];\n  });\n\n  if (proxyOptions.some(options => options.length > 1)) {\n    throw new error_1.MongoParseError('Proxy options cannot be specified multiple times in the connection string');\n  }\n\n  return mongoOptions;\n}\n\nexports.parseOptions = parseOptions;\n\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      return new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n\n    if (mongoOptions.replicaSet) {\n      return new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n\n    if (mongoOptions.directConnection) {\n      return new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      return new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n\n  return;\n}\n\nfunction setOption(mongoOptions, key, descriptor, values) {\n  const {\n    target,\n    type,\n    transform,\n    deprecated\n  } = descriptor;\n  const name = target !== null && target !== void 0 ? target : key;\n\n  if (deprecated) {\n    const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n    (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n  }\n\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n\n    case 'int':\n      mongoOptions[name] = getInt(name, values[0]);\n      break;\n\n    case 'uint':\n      mongoOptions[name] = getUint(name, values[0]);\n      break;\n\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n\n      mongoOptions[name] = String(values[0]);\n      break;\n\n    case 'record':\n      if (!(0, utils_1.isRecord)(values[0])) {\n        throw new error_1.MongoParseError(`${name} must be an object`);\n      }\n\n      mongoOptions[name] = values[0];\n      break;\n\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n\n    default:\n      {\n        if (!transform) {\n          throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n        }\n\n        const transformValue = transform({\n          name,\n          options: mongoOptions,\n          values\n        });\n        mongoOptions[name] = transformValue;\n        break;\n      }\n  }\n}\n\nexports.OPTIONS = {\n  appName: {\n    target: 'metadata',\n\n    transform(_ref3) {\n      let {\n        options,\n        values: [value]\n      } = _ref3;\n      return (0, utils_1.makeClientMetadata)({ ...options.driverInfo,\n        appName: String(value)\n      });\n    }\n\n  },\n  auth: {\n    target: 'credentials',\n\n    transform(_ref4) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref4;\n\n      if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n        throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n      }\n\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n\n  },\n  authMechanism: {\n    target: 'credentials',\n\n    transform(_ref5) {\n      let {\n        options,\n        values: [value]\n      } = _ref5;\n\n      var _a, _b;\n\n      const mechanisms = Object.values(providers_1.AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n\n      if (!mechanism) {\n        throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n\n      let source = (_a = options.credentials) === null || _a === void 0 ? void 0 : _a.source;\n\n      if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n\n      let password = (_b = options.credentials) === null || _b === void 0 ? void 0 : _b.password;\n\n      if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n\n    transform(_ref6) {\n      let {\n        options,\n        values: [optionValue]\n      } = _ref6;\n\n      if (typeof optionValue === 'string') {\n        const mechanismProperties = Object.create(null);\n\n        for (const [key, value] of entriesFromString(optionValue)) {\n          try {\n            mechanismProperties[key] = getBoolean(key, value);\n          } catch {\n            mechanismProperties[key] = value;\n          }\n        }\n\n        return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n          mechanismProperties\n        });\n      }\n\n      if (!(0, utils_1.isRecord)(optionValue)) {\n        throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n      }\n\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanismProperties: optionValue\n      });\n    }\n\n  },\n  authSource: {\n    target: 'credentials',\n\n    transform(_ref7) {\n      let {\n        options,\n        values: [value]\n      } = _ref7;\n      const source = String(value);\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        source\n      });\n    }\n\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n\n    transform(_ref8) {\n      let {\n        values: [version]\n      } = _ref8;\n      const serverApiToValidate = typeof version === 'string' ? {\n        version\n      } : version;\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n\n      if (!versionToValidate) {\n        throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n\n      if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n\n      return serverApiToValidate;\n    }\n\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n\n    transform(_ref9) {\n      let {\n        values\n      } = _ref9;\n      const compressionList = new Set();\n\n      for (const compVal of values) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n\n        if (!Array.isArray(compValArray)) {\n          throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n        }\n\n        for (const c of compValArray) {\n          if (Object.keys(compression_1.Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n          }\n        }\n      }\n\n      return [...compressionList];\n    }\n\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    target: 'metadata',\n    default: (0, utils_1.makeClientMetadata)(),\n\n    transform(_ref10) {\n      let {\n        options,\n        values: [value]\n      } = _ref10;\n\n      var _a, _b;\n\n      if (!(0, utils_1.isRecord)(value)) throw new error_1.MongoParseError('DriverInfo must be an object');\n      return (0, utils_1.makeClientMetadata)({\n        driverInfo: value,\n        appName: (_b = (_a = options.metadata) === null || _a === void 0 ? void 0 : _a.application) === null || _b === void 0 ? void 0 : _b.name\n      });\n    }\n\n  },\n  enableUtf8Validation: {\n    type: 'boolean',\n    default: true\n  },\n  family: {\n    transform(_ref11) {\n      let {\n        name,\n        values: [value]\n      } = _ref11;\n      const transformValue = getInt(name, value);\n\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n\n      throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n\n    transform(_ref12) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref12;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n\n  },\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n\n    transform(_ref13) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref13;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n\n  },\n  journal: {\n    target: 'writeConcern',\n\n    transform(_ref14) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref14;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint'\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  logger: {\n    default: new logger_1.Logger('MongoClient'),\n\n    transform(_ref15) {\n      let {\n        values: [value]\n      } = _ref15;\n\n      if (value instanceof logger_1.Logger) {\n        return value;\n      }\n\n      (0, utils_1.emitWarning)('Alternative loggers might not be supported'); // TODO: make Logger an interface that others can implement, make usage consistent in driver\n      // DRIVERS-1204\n\n      return;\n    }\n\n  },\n  loggerLevel: {\n    target: 'logger',\n\n    transform(_ref16) {\n      let {\n        values: [value]\n      } = _ref16;\n      return new logger_1.Logger('MongoClient', {\n        loggerLevel: value\n      });\n    }\n\n  },\n  maxConnecting: {\n    default: 2,\n\n    transform(_ref17) {\n      let {\n        name,\n        values: [value]\n      } = _ref17;\n      const maxConnecting = getUint(name, value);\n\n      if (maxConnecting === 0) {\n        throw new error_1.MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n      }\n\n      return maxConnecting;\n    }\n\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n\n    transform(_ref18) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref18;\n      const maxStalenessSeconds = getUint(name, value);\n\n      if (options.readPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference,\n            maxStalenessSeconds\n          }\n        });\n      } else {\n        return new read_preference_1.ReadPreference('secondary', undefined, {\n          maxStalenessSeconds\n        });\n      }\n    }\n\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n\n    transform(_ref19) {\n      let {\n        values: [value],\n        options\n      } = _ref19;\n      return { ...options.driverInfo,\n        name: String(value)\n      };\n    }\n\n  },\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: utils_1.DEFAULT_PK_FACTORY,\n\n    transform(_ref20) {\n      let {\n        values: [value]\n      } = _ref20;\n\n      if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n        return value;\n      }\n\n      throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n    }\n\n  },\n  promiseLibrary: {\n    deprecated: true,\n    type: 'any'\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  proxyHost: {\n    type: 'string'\n  },\n  proxyPassword: {\n    type: 'string'\n  },\n  proxyPort: {\n    type: 'uint'\n  },\n  proxyUsername: {\n    type: 'string'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform(_ref21) {\n      let {\n        values: [value],\n        options\n      } = _ref21;\n\n      if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n        return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern,\n          ...value\n        });\n      }\n\n      throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n\n    transform(_ref22) {\n      let {\n        values: [level],\n        options\n      } = _ref22;\n      return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern,\n        level: level\n      });\n    }\n\n  },\n  readPreference: {\n    default: read_preference_1.ReadPreference.primary,\n\n    transform(_ref23) {\n      let {\n        values: [value],\n        options\n      } = _ref23;\n\n      var _a, _b, _c;\n\n      if (value instanceof read_preference_1.ReadPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n      }\n\n      if ((0, utils_1.isRecord)(value, ['mode'])) {\n        const rp = read_preference_1.ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n        if (rp) return rp;else throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: (_a = options.readPreference) === null || _a === void 0 ? void 0 : _a.hedge,\n          maxStalenessSeconds: (_b = options.readPreference) === null || _b === void 0 ? void 0 : _b.maxStalenessSeconds\n        };\n        return new read_preference_1.ReadPreference(value, (_c = options.readPreference) === null || _c === void 0 ? void 0 : _c.tags, rpOpts);\n      }\n\n      throw new error_1.MongoParseError(`Unknown ReadPreference value: ${value}`);\n    }\n\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n\n    transform(_ref24) {\n      let {\n        values,\n        options\n      } = _ref24;\n      const tags = Array.isArray(values[0]) ? values[0] : values;\n      const readPreferenceTags = [];\n\n      for (const tag of tags) {\n        const readPreferenceTag = Object.create(null);\n\n        if (typeof tag === 'string') {\n          for (const [k, v] of entriesFromString(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n\n        if ((0, utils_1.isRecord)(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n\n        readPreferenceTags.push(readPreferenceTag);\n      }\n\n      return read_preference_1.ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    target: 'ca',\n\n    transform(_ref25) {\n      let {\n        values: [value]\n      } = _ref25;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslCRL: {\n    target: 'crl',\n\n    transform(_ref26) {\n      let {\n        values: [value]\n      } = _ref26;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslCert: {\n    target: 'cert',\n\n    transform(_ref27) {\n      let {\n        values: [value]\n      } = _ref27;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslKey: {\n    target: 'key',\n\n    transform(_ref28) {\n      let {\n        values: [value]\n      } = _ref28;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslPass: {\n    deprecated: true,\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n\n    transform(_ref29) {\n      let {\n        name,\n        values: [value]\n      } = _ref29;\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n\n    transform(_ref30) {\n      let {\n        name,\n        values: [value]\n      } = _ref30;\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n\n  },\n  tlsCAFile: {\n    target: 'ca',\n\n    transform(_ref31) {\n      let {\n        values: [value]\n      } = _ref31;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  tlsCertificateFile: {\n    target: 'cert',\n\n    transform(_ref32) {\n      let {\n        values: [value]\n      } = _ref32;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n\n    transform(_ref33) {\n      let {\n        values: [value]\n      } = _ref33;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform(_ref34) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref34;\n      const tlsInsecure = getBoolean(name, value);\n\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames ? () => undefined : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n\n      return tlsInsecure;\n    }\n\n  },\n  w: {\n    target: 'writeConcern',\n\n    transform(_ref35) {\n      let {\n        values: [value],\n        options\n      } = _ref35;\n      return write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          w: value\n        }\n      });\n    }\n\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n\n    transform(_ref36) {\n      let {\n        values: [value],\n        options\n      } = _ref36;\n\n      if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: { ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: { ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n\n      throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n\n    transform(_ref37) {\n      let {\n        values: [value],\n        options\n      } = _ref37;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          wtimeout: getUint('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n\n  },\n  wtimeoutMS: {\n    target: 'writeConcern',\n\n    transform(_ref38) {\n      let {\n        values: [value],\n        options\n      } = _ref38;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          wtimeoutMS: getUint('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: {\n    type: 'any'\n  },\n  srvPoller: {\n    type: 'any'\n  },\n  // Accepted NodeJS Options\n  minDHSize: {\n    type: 'any'\n  },\n  pskCallback: {\n    type: 'any'\n  },\n  secureContext: {\n    type: 'any'\n  },\n  enableTrace: {\n    type: 'any'\n  },\n  requestCert: {\n    type: 'any'\n  },\n  rejectUnauthorized: {\n    type: 'any'\n  },\n  checkServerIdentity: {\n    type: 'any'\n  },\n  ALPNProtocols: {\n    type: 'any'\n  },\n  SNICallback: {\n    type: 'any'\n  },\n  session: {\n    type: 'any'\n  },\n  requestOCSP: {\n    type: 'any'\n  },\n  localAddress: {\n    type: 'any'\n  },\n  localPort: {\n    type: 'any'\n  },\n  hints: {\n    type: 'any'\n  },\n  lookup: {\n    type: 'any'\n  },\n  ca: {\n    type: 'any'\n  },\n  cert: {\n    type: 'any'\n  },\n  ciphers: {\n    type: 'any'\n  },\n  crl: {\n    type: 'any'\n  },\n  ecdhCurve: {\n    type: 'any'\n  },\n  key: {\n    type: 'any'\n  },\n  passphrase: {\n    type: 'any'\n  },\n  pfx: {\n    type: 'any'\n  },\n  secureProtocol: {\n    type: 'any'\n  },\n  index: {\n    type: 'any'\n  },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: {\n    type: 'boolean'\n  },\n  useUnifiedTopology: {\n    type: 'boolean'\n  }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS).filter(_ref39 => {\n  let [, descriptor] = _ref39;\n  return descriptor.default != null;\n}).map(_ref40 => {\n  let [k, d] = _ref40;\n  return [k, d.default];\n}));\n/**\n * Set of permitted feature flags\n * @internal\n */\n\nexports.FEATURE_FLAGS = new Set([Symbol.for('@@mdb.skipPingOnConnect')]);","map":{"version":3,"sources":["../src/connection_string.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,GAAA,GAAA,OAAA,CAAA,KAAA,CAAA;;AACA,MAAA,EAAA,GAAA,OAAA,CAAA,IAAA,CAAA;;AACA,MAAA,+BAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AACA,MAAA,KAAA,GAAA,OAAA,CAAA,KAAA,CAAA;;AAGA,MAAA,mBAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,MAAA,aAAA,GAAA,OAAA,CAAA,kCAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AASA,MAAA,kBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,MAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAWA,MAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAEA,MAAM,iBAAiB,GAAG,CAAC,YAAD,EAAe,YAAf,EAA6B,cAA7B,CAA1B;AAEA,MAAM,oBAAoB,GAAG,kEAA7B;AACA,MAAM,oBAAoB,GAAG,4DAA7B;AACA,MAAM,0BAA0B,GAC9B,qEADF;AAGA;;;;;;;AAOG;;AACH,SAAS,mBAAT,CAA6B,UAA7B,EAAiD,YAAjD,EAAqE;EACnE,MAAM,KAAK,GAAG,QAAd;EACA,MAAM,GAAG,GAAG,IAAI,UAAU,CAAC,OAAX,CAAmB,KAAnB,EAA0B,EAA1B,CAA6B,EAA7C;EACA,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC,OAAb,CAAqB,KAArB,EAA4B,EAA5B,CAA+B,EAAlD;EACA,OAAO,GAAG,CAAC,QAAJ,CAAa,MAAb,CAAP;AACD;AAED;;;;;;AAMG;;;AACH,SAAgB,gBAAhB,CAAiC,OAAjC,EAAwD,QAAxD,EAAyF;EACvF,IAAI,OAAO,OAAO,CAAC,OAAf,KAA2B,QAA/B,EAAyC;IACvC,OAAO,QAAQ,CAAC,IAAI,OAAA,CAAA,aAAJ,CAAkB,oCAAlB,CAAD,CAAf;EACD;;EAED,IAAI,OAAO,CAAC,OAAR,CAAgB,KAAhB,CAAsB,GAAtB,EAA2B,MAA3B,GAAoC,CAAxC,EAA2C;IACzC;IACA,OAAO,QAAQ,CAAC,IAAI,OAAA,CAAA,aAAJ,CAAkB,iDAAlB,CAAD,CAAf;EACD,CARsF,CAUvF;;;EACA,MAAM,aAAa,GAAG,OAAO,CAAC,OAA9B;EACA,GAAG,CAAC,UAAJ,CAAe,IAAI,OAAO,CAAC,cAAc,SAAS,aAAa,EAA/D,EAAmE,CAAC,GAAD,EAAM,SAAN,KAAmB;IACpF,IAAI,GAAJ,EAAS,OAAO,QAAQ,CAAC,GAAD,CAAf;;IAET,IAAI,SAAS,CAAC,MAAV,KAAqB,CAAzB,EAA4B;MAC1B,OAAO,QAAQ,CAAC,IAAI,OAAA,CAAA,aAAJ,CAAkB,4BAAlB,CAAD,CAAf;IACD;;IAED,KAAK,MAAM;MAAE;IAAF,CAAX,IAAuB,SAAvB,EAAkC;MAChC,IAAI,CAAC,mBAAmB,CAAC,IAAD,EAAO,aAAP,CAAxB,EAA+C;QAC7C,OAAO,QAAQ,CAAC,IAAI,OAAA,CAAA,aAAJ,CAAkB,uDAAlB,CAAD,CAAf;MACD;IACF;;IAED,MAAM,aAAa,GAAG,SAAS,CAAC,GAAV,CAAc,CAAC,IAAG;MAAA,IAAA,EAAA;;MACtC,OAAA,OAAA,CAAA,WAAA,CAAY,UAAZ,CAAuB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAA,EAAA,GAAA,CAAC,CAAC,IAAF,MAAM,IAAN,IAAM,EAAA,KAAA,KAAA,CAAN,GAAM,EAAN,GAAU,KAAK,EAAnD,CAAA;IAAsD,CADlC,CAAtB;IAIA,MAAM,OAAO,GAAG,2BAA2B,CAAC,aAAD,EAAgB,OAAhB,EAAyB,IAAzB,CAA3C;;IACA,IAAI,OAAJ,EAAa;MACX,OAAO,QAAQ,CAAC,OAAD,CAAf;IACD,CApBmF,CAsBpF;;;IACA,GAAG,CAAC,UAAJ,CAAe,aAAf,EAA8B,CAAC,GAAD,EAAM,MAAN,KAAgB;;;MAC5C,IAAI,GAAJ,EAAS;QACP,IAAI,GAAG,CAAC,IAAJ,KAAa,SAAb,IAA0B,GAAG,CAAC,IAAJ,KAAa,WAA3C,EAAwD;UACtD,OAAO,QAAQ,CAAC,GAAD,CAAf;QACD;MACF,CAJD,MAIO;QACL,IAAI,MAAM,CAAC,MAAP,GAAgB,CAApB,EAAuB;UACrB,OAAO,QAAQ,CAAC,IAAI,OAAA,CAAA,eAAJ,CAAoB,mCAApB,CAAD,CAAf;QACD;;QAED,MAAM,gBAAgB,GAAG,IAAI,KAAA,CAAA,eAAJ,CAAoB,MAAM,CAAC,CAAD,CAAN,CAAU,IAAV,CAAe,EAAf,CAApB,CAAzB;QACA,MAAM,mBAAmB,GAAG,CAAC,GAAG,gBAAgB,CAAC,IAAjB,EAAJ,CAA5B;;QACA,IAAI,mBAAmB,CAAC,IAApB,CAAyB,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAlB,CAA2B,GAA3B,CAAjC,CAAJ,EAAuE;UACrE,OAAO,QAAQ,CACb,IAAI,OAAA,CAAA,eAAJ,CAAoB,oCAAoC,iBAAiB,CAAC,IAAlB,CAAuB,IAAvB,CAA4B,EAApF,CADa,CAAf;QAGD;;QAED,IAAI,iBAAiB,CAAC,IAAlB,CAAuB,MAAM,IAAI,gBAAgB,CAAC,GAAjB,CAAqB,MAArB,MAAiC,EAAlE,CAAJ,EAA2E;UACzE,OAAO,QAAQ,CAAC,IAAI,OAAA,CAAA,eAAJ,CAAoB,gDAApB,CAAD,CAAf;QACD;;QAED,MAAM,MAAM,GAAG,CAAA,EAAA,GAAA,gBAAgB,CAAC,GAAjB,CAAqB,YAArB,CAAA,MAAkC,IAAlC,IAAkC,EAAA,KAAA,KAAA,CAAlC,GAAkC,EAAlC,GAAsC,SAArD;QACA,MAAM,UAAU,GAAG,CAAA,EAAA,GAAA,gBAAgB,CAAC,GAAjB,CAAqB,YAArB,CAAA,MAAkC,IAAlC,IAAkC,EAAA,KAAA,KAAA,CAAlC,GAAkC,EAAlC,GAAsC,SAAzD;QACA,MAAM,YAAY,GAAG,CAAA,EAAA,GAAA,gBAAgB,CAAC,GAAjB,CAAqB,cAArB,CAAA,MAAoC,IAApC,IAAoC,EAAA,KAAA,KAAA,CAApC,GAAoC,EAApC,GAAwC,SAA7D;;QAEA,IACE,CAAC,OAAO,CAAC,uBAAT,IACA,MADA,IAEA,OAAO,CAAC,WAFR,IAGA,CAAC,WAAA,CAAA,4BAAA,CAA6B,GAA7B,CAAiC,OAAO,CAAC,WAAR,CAAoB,SAArD,CAJH,EAKE;UACA,OAAO,CAAC,WAAR,GAAsB,mBAAA,CAAA,gBAAA,CAAiB,KAAjB,CAAuB,OAAO,CAAC,WAA/B,EAA4C;YAAE;UAAF,CAA5C,CAAtB;QACD;;QAED,IAAI,CAAC,OAAO,CAAC,uBAAT,IAAoC,UAAxC,EAAoD;UAClD,OAAO,CAAC,UAAR,GAAqB,UAArB;QACD;;QAED,IAAI,YAAY,KAAK,MAArB,EAA6B;UAC3B,OAAO,CAAC,YAAR,GAAuB,IAAvB;QACD;;QAED,IAAI,OAAO,CAAC,UAAR,IAAsB,OAAO,CAAC,WAAR,GAAsB,CAAhD,EAAmD;UACjD,OAAO,QAAQ,CAAC,IAAI,OAAA,CAAA,eAAJ,CAAoB,mDAApB,CAAD,CAAf;QACD;;QAED,MAAM,OAAO,GAAG,2BAA2B,CAAC,aAAD,EAAgB,OAAhB,EAAyB,IAAzB,CAA3C;;QACA,IAAI,OAAJ,EAAa;UACX,OAAO,QAAQ,CAAC,OAAD,CAAf;QACD;MACF;;MAED,QAAQ,CAAC,SAAD,EAAY,aAAZ,CAAR;IACD,CAtDD;EAuDD,CA9ED;AA+ED;;AA3FD,OAAA,CAAA,gBAAA,GAAA,gBAAA;AA6FA;;;;;AAKG;;AACH,SAAgB,eAAhB,CAAgC,OAAhC,EAAmD;EACjD,IAAI,CAAC,OAAL,EAAc;;EACd,MAAM,KAAK,GAAG,CAAC,CAAD,EAAY,CAAZ,KAAyB;IACrC,IAAI,OAAO,CAAC,GAAR,CAAY,OAAZ,EAAqB,CAArB,KAA2B,OAAO,CAAC,GAAR,CAAY,OAAZ,EAAqB,CAArB,CAA/B,EAAwD;MACtD,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,QAAQ,CAAC,iCAAiC,CAAC,GAA/D,CAAN;IACD;EACF,CAJD;;EAKA,KAAK,CAAC,aAAD,EAAgB,6BAAhB,CAAL;EACA,KAAK,CAAC,aAAD,EAAgB,0BAAhB,CAAL;EACA,KAAK,CAAC,aAAD,EAAgB,sCAAhB,CAAL;EACA,KAAK,CAAC,aAAD,EAAgB,6BAAhB,CAAL;EACA,KAAK,CAAC,6BAAD,EAAgC,sCAAhC,CAAL;EACA,KAAK,CAAC,6BAAD,EAAgC,6BAAhC,CAAL;EACA,KAAK,CAAC,sCAAD,EAAyC,6BAAzC,CAAL;AACD;;AAdD,OAAA,CAAA,eAAA,GAAA,eAAA;AAgBA,MAAM,MAAM,GAAG,IAAI,GAAJ,CAAQ,CAAC,MAAD,EAAS,GAAT,EAAc,GAAd,EAAmB,GAAnB,EAAwB,KAAxB,CAAR,CAAf;AACA,MAAM,UAAU,GAAG,IAAI,GAAJ,CAAQ,CAAC,OAAD,EAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB,EAA+B,IAA/B,CAAR,CAAnB;;AACA,SAAS,UAAT,CAAoB,IAApB,EAAkC,KAAlC,EAAgD;EAC9C,IAAI,OAAO,KAAP,KAAiB,SAArB,EAAgC,OAAO,KAAP;EAChC,MAAM,WAAW,GAAG,MAAM,CAAC,KAAD,CAAN,CAAc,WAAd,EAApB;;EACA,IAAI,MAAM,CAAC,GAAP,CAAW,WAAX,CAAJ,EAA6B;IAC3B,IAAI,WAAW,KAAK,MAApB,EAA4B;MAC1B,CAAA,GAAA,OAAA,CAAA,eAAA,EACE,wBAAwB,IAAI,MAAM,WAAW,uBAAuB,IAAI,iBAD1E;IAGD;;IACD,OAAO,IAAP;EACD;;EACD,IAAI,UAAU,CAAC,GAAX,CAAe,WAAf,CAAJ,EAAiC;IAC/B,IAAI,WAAW,KAAK,OAApB,EAA6B;MAC3B,CAAA,GAAA,OAAA,CAAA,eAAA,EACE,wBAAwB,IAAI,MAAM,WAAW,uBAAuB,IAAI,kBAD1E;IAGD;;IACD,OAAO,KAAP;EACD;;EACD,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,YAAY,IAAI,0CAA0C,KAAK,EAAnF,CAAN;AACD;;AAED,SAAS,MAAT,CAAgB,IAAhB,EAA8B,KAA9B,EAA4C;EAC1C,IAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B,OAAO,IAAI,CAAC,KAAL,CAAW,KAAX,CAAP;EAC/B,MAAM,WAAW,GAAG,MAAM,CAAC,QAAP,CAAgB,MAAM,CAAC,KAAD,CAAtB,EAA+B,EAA/B,CAApB;EACA,IAAI,CAAC,MAAM,CAAC,KAAP,CAAa,WAAb,CAAL,EAAgC,OAAO,WAAP;EAChC,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,YAAY,IAAI,sCAAsC,KAAK,EAA/E,CAAN;AACD;;AAED,SAAS,OAAT,CAAiB,IAAjB,EAA+B,KAA/B,EAA6C;EAC3C,MAAM,WAAW,GAAG,MAAM,CAAC,IAAD,EAAO,KAAP,CAA1B;;EACA,IAAI,WAAW,GAAG,CAAlB,EAAqB;IACnB,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,GAAG,IAAI,2CAA2C,KAAK,EAA3E,CAAN;EACD;;EACD,OAAO,WAAP;AACD;;AAED,UAAU,iBAAV,CAA4B,KAA5B,EAAyC;EACvC,MAAM,aAAa,GAAG,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAtB;;EACA,KAAK,MAAM,QAAX,IAAuB,aAAvB,EAAsC;IACpC,MAAM,CAAC,GAAD,EAAM,KAAN,IAAe,QAAQ,CAAC,KAAT,CAAe,GAAf,CAArB;;IACA,IAAI,KAAK,IAAI,IAAb,EAAmB;MACjB,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,iDAApB,CAAN;IACD;;IAED,MAAM,CAAC,GAAD,EAAM,KAAN,CAAN;EACD;AACF;;AAED,MAAM,kBAAN,SAA8C,GAA9C,CAAgE;EAC9D,WAAA,GAA8C;IAAA,IAAlC,OAAkC,uEAAF,EAAE;IAC5C,MAAM,OAAO,CAAC,GAAR,CAAY;MAAA,IAAC,CAAC,CAAD,EAAI,CAAJ,CAAD;MAAA,OAAY,CAAC,CAAC,CAAC,WAAF,EAAD,EAAkB,CAAlB,CAAZ;IAAA,CAAZ,CAAN;EACD;;EACQ,GAAG,CAAC,CAAD,EAAU;IACpB,OAAO,MAAM,GAAN,CAAU,CAAC,CAAC,WAAF,EAAV,CAAP;EACD;;EACQ,GAAG,CAAC,CAAD,EAAU;IACpB,OAAO,MAAM,GAAN,CAAU,CAAC,CAAC,WAAF,EAAV,CAAP;EACD;;EACQ,GAAG,CAAC,CAAD,EAAY,CAAZ,EAAkB;IAC5B,OAAO,MAAM,GAAN,CAAU,CAAC,CAAC,WAAF,EAAV,EAA2B,CAA3B,CAAP;EACD;;EACQ,MAAM,CAAC,CAAD,EAAU;IACvB,OAAO,MAAM,MAAN,CAAa,CAAC,CAAC,WAAF,EAAb,CAAP;EACD;;AAf6D;;AAkBhE,SAAgB,YAAhB,CACE,GADF,EAGkC;EAAA,IADhC,WACgC,uEAD4B,SAC5B;EAAA,IAAhC,OAAgC,uEAAF,EAAE;;EAEhC,IAAI,WAAW,IAAI,IAAf,IAAuB,EAAE,WAAW,YAAY,cAAA,CAAA,WAAzB,CAA3B,EAAkE;IAChE,OAAO,GAAG,WAAV;IACA,WAAW,GAAG,SAAd;EACD;;EAED,MAAM,GAAG,GAAG,IAAI,+BAAA,CAAA,OAAJ,CAAqB,GAArB,CAAZ;EACA,MAAM;IAAE,KAAF;IAAS;EAAT,IAAmB,GAAzB;EAEA,MAAM,YAAY,GAAG,MAAM,CAAC,MAAP,CAAc,IAAd,CAArB,CAVgC,CAYhC;;EACA,KAAK,MAAM,IAAX,IAAmB,MAAM,CAAC,qBAAP,CAA6B,OAA7B,CAAnB,EAA0D;IACxD,IAAI,OAAA,CAAA,aAAA,CAAc,GAAd,CAAkB,IAAlB,CAAJ,EAA6B;MAC3B,YAAY,CAAC,IAAD,CAAZ,GAAqB,OAAO,CAAC,IAAD,CAA5B;IACD;EACF;;EAED,YAAY,CAAC,KAAb,GAAqB,KAAK,GAAG,EAAH,GAAQ,KAAK,CAAC,GAAN,CAAU,OAAA,CAAA,WAAA,CAAY,UAAtB,CAAlC;EAEA,MAAM,UAAU,GAAG,IAAI,kBAAJ,EAAnB;;EAEA,IAAI,GAAG,CAAC,QAAJ,KAAiB,GAAjB,IAAwB,GAAG,CAAC,QAAJ,KAAiB,EAA7C,EAAiD;IAC/C,MAAM,MAAM,GAAG,kBAAkB,CAC/B,GAAG,CAAC,QAAJ,CAAa,CAAb,MAAoB,GAApB,GAA0B,GAAG,CAAC,QAAJ,CAAa,KAAb,CAAmB,CAAnB,CAA1B,GAAkD,GAAG,CAAC,QADvB,CAAjC;;IAGA,IAAI,MAAJ,EAAY;MACV,UAAU,CAAC,GAAX,CAAe,QAAf,EAAyB,CAAC,MAAD,CAAzB;IACD;EACF;;EAED,IAAI,GAAG,CAAC,QAAJ,KAAiB,EAArB,EAAyB;IACvB,MAAM,IAAI,GAAa;MACrB,QAAQ,EAAE,kBAAkB,CAAC,GAAG,CAAC,QAAL;IADP,CAAvB;;IAIA,IAAI,OAAO,GAAG,CAAC,QAAX,KAAwB,QAA5B,EAAsC;MACpC,IAAI,CAAC,QAAL,GAAgB,kBAAkB,CAAC,GAAG,CAAC,QAAL,CAAlC;IACD;;IAED,UAAU,CAAC,GAAX,CAAe,MAAf,EAAuB,CAAC,IAAD,CAAvB;EACD;;EAED,KAAK,MAAM,GAAX,IAAkB,GAAG,CAAC,YAAJ,CAAiB,IAAjB,EAAlB,EAA2C;IACzC,MAAM,MAAM,GAAG,CAAC,GAAG,GAAG,CAAC,YAAJ,CAAiB,MAAjB,CAAwB,GAAxB,CAAJ,CAAf;;IAEA,IAAI,MAAM,CAAC,QAAP,CAAgB,EAAhB,CAAJ,EAAyB;MACvB,MAAM,IAAI,OAAA,CAAA,aAAJ,CAAkB,0CAAlB,CAAN;IACD;;IAED,IAAI,CAAC,UAAU,CAAC,GAAX,CAAe,GAAf,CAAL,EAA0B;MACxB,UAAU,CAAC,GAAX,CAAe,GAAf,EAAoB,MAApB;IACD;EACF;;EAED,MAAM,aAAa,GAAG,IAAI,kBAAJ,CACpB,MAAM,CAAC,OAAP,CAAe,OAAf,EAAwB,MAAxB,CAA+B;IAAA,IAAC,GAAG,CAAH,CAAD;IAAA,OAAW,CAAC,IAAI,IAAhB;EAAA,CAA/B,CADoB,CAAtB,CAxDgC,CA4DhC;;EAEA,IAAI,UAAU,CAAC,GAAX,CAAe,WAAf,CAAJ,EAAiC;IAC/B,MAAM,IAAI,OAAA,CAAA,eAAJ,CACJ,qEADI,CAAN;EAGD;;EAED,IAAI,aAAa,CAAC,GAAd,CAAkB,cAAlB,CAAJ,EAAuC;IACrC,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,gDAApB,CAAN;EACD,CAtE+B,CAwEhC;;;EAEA,MAAM,UAAU,GAAG,IAAI,kBAAJ,EAAnB;EAEA,MAAM,OAAO,GAAG,IAAI,GAAJ,CAAgB,CAC9B,GAAG,UAAU,CAAC,IAAX,EAD2B,EAE9B,GAAG,aAAa,CAAC,IAAd,EAF2B,EAG9B,GAAG,OAAA,CAAA,eAAA,CAAgB,IAAhB,EAH2B,CAAhB,CAAhB;;EAMA,KAAK,MAAM,GAAX,IAAkB,OAAlB,EAA2B;IACzB,MAAM,MAAM,GAAG,EAAf;IACA,MAAM,iBAAiB,GAAG,aAAa,CAAC,GAAd,CAAkB,GAAlB,CAA1B;;IACA,IAAI,iBAAiB,IAAI,IAAzB,EAA+B;MAC7B,MAAM,CAAC,IAAP,CAAY,iBAAZ;IACD;;IACD,MAAM,QAAQ,GAAG,UAAU,CAAC,GAAX,CAAe,GAAf,CAAjB;;IACA,IAAI,QAAQ,IAAI,IAAhB,EAAsB;MACpB,MAAM,CAAC,IAAP,CAAY,GAAG,QAAf;IACD;;IACD,MAAM,mBAAmB,GAAG,OAAA,CAAA,eAAA,CAAgB,GAAhB,CAAoB,GAApB,CAA5B;;IACA,IAAI,mBAAmB,IAAI,IAA3B,EAAiC;MAC/B,MAAM,CAAC,IAAP,CAAY,mBAAZ;IACD;;IACD,UAAU,CAAC,GAAX,CAAe,GAAf,EAAoB,MAApB;EACD;;EAED,IAAI,UAAU,CAAC,GAAX,CAAe,uBAAf,KAA2C,CAAC,UAAU,CAAC,GAAX,CAAe,oBAAf,CAAhD,EAAsF;IACpF,UAAU,CAAC,GAAX,CAAe,oBAAf,EAAqC,UAAU,CAAC,GAAX,CAAe,uBAAf,CAArC;EACD;;EAED,IAAI,UAAU,CAAC,GAAX,CAAe,KAAf,KAAyB,UAAU,CAAC,GAAX,CAAe,KAAf,CAA7B,EAAoD;IAClD,MAAM,aAAa,GAAG,CAAC,UAAU,CAAC,GAAX,CAAe,KAAf,KAAyB,EAA1B,EACnB,MADmB,CACZ,UAAU,CAAC,GAAX,CAAe,KAAf,KAAyB,EADb,EAEnB,GAFmB,CAEf,UAAU,CAAC,IAAX,CAAgB,IAAhB,EAAsB,SAAtB,CAFe,CAAtB;;IAGA,IAAI,IAAI,GAAJ,CAAQ,aAAR,EAAuB,IAAvB,KAAgC,CAApC,EAAuC;MACrC,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,yCAApB,CAAN;IACD;EACF;;EAED,MAAM,kBAAkB,GAAG,CAAA,GAAA,OAAA,CAAA,aAAA,EACzB,OADyB,EAEzB,KAAK,CAAC,IAAN,CAAW,MAAM,CAAC,IAAP,CAAY,OAAA,CAAA,OAAZ,CAAX,EAAiC,GAAjC,CAAqC,CAAC,IAAI,CAAC,CAAC,WAAF,EAA1C,CAFyB,CAA3B;;EAIA,IAAI,kBAAkB,CAAC,IAAnB,KAA4B,CAAhC,EAAmC;IACjC,MAAM,UAAU,GAAG,kBAAkB,CAAC,IAAnB,GAA0B,CAA1B,GAA8B,SAA9B,GAA0C,QAA7D;IACA,MAAM,OAAO,GAAG,kBAAkB,CAAC,IAAnB,GAA0B,CAA1B,GAA8B,KAA9B,GAAsC,IAAtD;IACA,MAAM,IAAI,OAAA,CAAA,eAAJ,CACJ,GAAG,UAAU,IAAI,KAAK,CAAC,IAAN,CAAW,kBAAX,EAA+B,IAA/B,CAAoC,IAApC,CAAyC,IAAI,OAAO,gBADjE,CAAN;EAGD,CA1H+B,CA4HhC;;;EAEA,KAAK,MAAM,CAAC,GAAD,EAAM,UAAN,CAAX,IAAgC,MAAM,CAAC,OAAP,CAAe,OAAA,CAAA,OAAf,CAAhC,EAAyD;IACvD,MAAM,MAAM,GAAG,UAAU,CAAC,GAAX,CAAe,GAAf,CAAf;IACA,IAAI,CAAC,MAAD,IAAW,MAAM,CAAC,MAAP,KAAkB,CAAjC,EAAoC;IACpC,SAAS,CAAC,YAAD,EAAe,GAAf,EAAoB,UAApB,EAAgC,MAAhC,CAAT;EACD;;EAED,IAAI,YAAY,CAAC,WAAjB,EAA8B;IAC5B,MAAM,QAAQ,GAAG,YAAY,CAAC,WAAb,CAAyB,SAAzB,KAAuC,WAAA,CAAA,aAAA,CAAc,cAAtE;IACA,MAAM,MAAM,GAAG,YAAY,CAAC,WAAb,CAAyB,SAAzB,KAAuC,WAAA,CAAA,aAAA,CAAc,YAApE;IACA,MAAM,KAAK,GAAG,YAAY,CAAC,WAAb,CAAyB,SAAzB,KAAuC,WAAA,CAAA,aAAA,CAAc,WAAnE;;IACA,IACE,CAAC,QAAQ,IAAI,MAAb,KACA,UAAU,CAAC,GAAX,CAAe,YAAf,CADA,IAEA,YAAY,CAAC,WAAb,CAAyB,MAAzB,KAAoC,WAHtC,EAIE;MACA;MACA,MAAM,IAAI,OAAA,CAAA,eAAJ,CACJ,GAAG,YAAY,CAAC,WAAW,8CADvB,CAAN;IAGD;;IAED,IAAI,EAAE,QAAQ,IAAI,MAAZ,IAAsB,KAAxB,KAAkC,YAAY,CAAC,MAA/C,IAAyD,CAAC,UAAU,CAAC,GAAX,CAAe,YAAf,CAA9D,EAA4F;MAC1F;MACA;MACA,YAAY,CAAC,WAAb,GAA2B,mBAAA,CAAA,gBAAA,CAAiB,KAAjB,CAAuB,YAAY,CAAC,WAApC,EAAiD;QAC1E,MAAM,EAAE,YAAY,CAAC;MADqD,CAAjD,CAA3B;IAGD;;IAED,YAAY,CAAC,WAAb,CAAyB,QAAzB,GAvB4B,CAyB5B;;IACA,IACE,YAAY,CAAC,WAAb,CAAyB,QAAzB,KAAsC,EAAtC,IACA,YAAY,CAAC,WAAb,CAAyB,QAAzB,KAAsC,EADtC,IAEA,YAAY,CAAC,WAAb,CAAyB,SAAzB,KAAuC,WAAA,CAAA,aAAA,CAAc,eAFrD,IAGA,MAAM,CAAC,IAAP,CAAY,YAAY,CAAC,WAAb,CAAyB,mBAArC,EAA0D,MAA1D,KAAqE,CAJvE,EAKE;MACA,OAAO,YAAY,CAAC,WAApB;IACD;EACF;;EAED,IAAI,CAAC,YAAY,CAAC,MAAlB,EAA0B;IACxB;IACA,YAAY,CAAC,MAAb,GAAsB,MAAtB;EACD;;EAED,eAAe,CAAC,YAAD,CAAf;EAEA,IAAI,OAAO,CAAC,cAAZ,EAA4B,kBAAA,CAAA,eAAA,CAAgB,GAAhB,CAAoB,OAAO,CAAC,cAA5B;EAE5B,MAAM,OAAO,GAAG,2BAA2B,CAAC,KAAD,EAAQ,YAAR,EAAsB,KAAtB,CAA3C;;EACA,IAAI,OAAJ,EAAa;IACX,MAAM,OAAN;EACD;;EACD,IAAI,WAAW,IAAI,YAAY,CAAC,cAAhC,EAAgD;IAC9C,WAAA,CAAA,SAAA,CAAU,kBAAV;IACA,YAAY,CAAC,SAAb,GAAyB,IAAI,WAAA,CAAA,SAAJ,CAAc,WAAd,EAA2B,GAA3B,EAAgC,OAAhC,CAAzB;IACA,YAAY,CAAC,aAAb,GAA6B,YAAY,CAAC,SAAb,CAAuB,aAApD;EACD,CAzL+B,CA2LhC;;;EAEA,YAAY,CAAC,uBAAb,GACE,aAAa,CAAC,GAAd,CAAkB,YAAlB,KAAmC,UAAU,CAAC,GAAX,CAAe,YAAf,CADrC;EAEA,YAAY,CAAC,uBAAb,GACE,aAAa,CAAC,GAAd,CAAkB,YAAlB,KAAmC,UAAU,CAAC,GAAX,CAAe,YAAf,CADrC;;EAGA,IAAI,KAAJ,EAAW;IACT;IACA,YAAY,CAAC,OAAb,GAAuB,KAAK,CAAC,CAAD,CAA5B;;IAEA,IAAI,YAAY,CAAC,gBAAjB,EAAmC;MACjC,MAAM,IAAI,OAAA,CAAA,aAAJ,CAAkB,2CAAlB,CAAN;IACD;;IAED,IAAI,YAAY,CAAC,WAAb,GAA2B,CAA3B,IAAgC,OAAO,YAAY,CAAC,UAApB,KAAmC,QAAvE,EAAiF;MAC/E,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,+CAApB,CAAN;IACD,CAVQ,CAYT;;;IACA,MAAM,kBAAkB,GAAG,CAAC,aAAa,CAAC,GAAd,CAAkB,KAAlB,CAAD,IAA6B,CAAC,UAAU,CAAC,GAAX,CAAe,KAAf,CAAzD;IACA,MAAM,kBAAkB,GAAG,CAAC,aAAa,CAAC,GAAd,CAAkB,KAAlB,CAAD,IAA6B,CAAC,UAAU,CAAC,GAAX,CAAe,KAAf,CAAzD;;IACA,IAAI,kBAAkB,IAAI,kBAA1B,EAA8C;MAC5C,YAAY,CAAC,GAAb,GAAmB,IAAnB;IACD;EACF,CAlBD,MAkBO;IACL,MAAM,uBAAuB,GAC3B,UAAU,CAAC,GAAX,CAAe,aAAf,KACA,aAAa,CAAC,GAAd,CAAkB,aAAlB,CADA,IAEA,UAAU,CAAC,GAAX,CAAe,gBAAf,CAFA,IAGA,aAAa,CAAC,GAAd,CAAkB,gBAAlB,CAJF;;IAMA,IAAI,uBAAJ,EAA6B;MAC3B,MAAM,IAAI,OAAA,CAAA,eAAJ,CACJ,2EADI,CAAN;IAGD;EACF;;EAED,IAAI,YAAY,CAAC,gBAAb,IAAiC,YAAY,CAAC,KAAb,CAAmB,MAAnB,KAA8B,CAAnE,EAAsE;IACpE,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,mDAApB,CAAN;EACD;;EAED,IACE,CAAC,YAAY,CAAC,SAAd,KACC,YAAY,CAAC,SAAb,IAA0B,YAAY,CAAC,aAAvC,IAAwD,YAAY,CAAC,aADtE,CADF,EAGE;IACA,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,0DAApB,CAAN;EACD;;EAED,IACG,YAAY,CAAC,aAAb,IAA8B,CAAC,YAAY,CAAC,aAA7C,IACC,CAAC,YAAY,CAAC,aAAd,IAA+B,YAAY,CAAC,aAF/C,EAGE;IACA,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,6DAApB,CAAN;EACD;;EAED,MAAM,YAAY,GAAG,CAAC,WAAD,EAAc,WAAd,EAA2B,eAA3B,EAA4C,eAA5C,EAA6D,GAA7D,CACnB,GAAG,IAAG;IAAA,IAAA,EAAA;;IAAC,OAAA,CAAA,EAAA,GAAA,UAAU,CAAC,GAAX,CAAe,GAAf,CAAA,MAAmB,IAAnB,IAAmB,EAAA,KAAA,KAAA,CAAnB,GAAmB,EAAnB,GAAuB,EAAvB;EAAyB,CADb,CAArB;;EAIA,IAAI,YAAY,CAAC,IAAb,CAAkB,OAAO,IAAI,OAAO,CAAC,MAAR,GAAiB,CAA9C,CAAJ,EAAsD;IACpD,MAAM,IAAI,OAAA,CAAA,eAAJ,CACJ,2EADI,CAAN;EAGD;;EAED,OAAO,YAAP;AACD;;AAlQD,OAAA,CAAA,YAAA,GAAA,YAAA;;AAoQA,SAAS,2BAAT,CACE,KADF,EAEE,YAFF,EAGE,KAHF,EAGgB;EAEd,IAAI,YAAY,CAAC,YAAjB,EAA+B;IAC7B,IAAI,KAAK,CAAC,MAAN,GAAe,CAAnB,EAAsB;MACpB,OAAO,IAAI,OAAA,CAAA,eAAJ,CAAoB,oBAApB,CAAP;IACD;;IACD,IAAI,YAAY,CAAC,UAAjB,EAA6B;MAC3B,OAAO,IAAI,OAAA,CAAA,eAAJ,CAAoB,oBAApB,CAAP;IACD;;IACD,IAAI,YAAY,CAAC,gBAAjB,EAAmC;MACjC,OAAO,IAAI,OAAA,CAAA,eAAJ,CAAoB,0BAApB,CAAP;IACD;;IAED,IAAI,KAAK,IAAI,YAAY,CAAC,WAAb,GAA2B,CAAxC,EAA2C;MACzC,OAAO,IAAI,OAAA,CAAA,eAAJ,CAAoB,kDAApB,CAAP;IACD;EACF;;EACD;AACD;;AAED,SAAS,SAAT,CACE,YADF,EAEE,GAFF,EAGE,UAHF,EAIE,MAJF,EAImB;EAEjB,MAAM;IAAE,MAAF;IAAU,IAAV;IAAgB,SAAhB;IAA2B;EAA3B,IAA0C,UAAhD;EACA,MAAM,IAAI,GAAG,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAA,MAAA,GAAU,GAAvB;;EAEA,IAAI,UAAJ,EAAgB;IACd,MAAM,aAAa,GAAG,OAAO,UAAP,KAAsB,QAAtB,GAAiC,KAAK,UAAU,EAAhD,GAAqD,EAA3E;IACA,CAAA,GAAA,OAAA,CAAA,WAAA,EAAY,GAAG,GAAG,0BAA0B,aAAa,EAAzD;EACD;;EAED,QAAQ,IAAR;IACE,KAAK,SAAL;MACE,YAAY,CAAC,IAAD,CAAZ,GAAqB,UAAU,CAAC,IAAD,EAAO,MAAM,CAAC,CAAD,CAAb,CAA/B;MACA;;IACF,KAAK,KAAL;MACE,YAAY,CAAC,IAAD,CAAZ,GAAqB,MAAM,CAAC,IAAD,EAAO,MAAM,CAAC,CAAD,CAAb,CAA3B;MACA;;IACF,KAAK,MAAL;MACE,YAAY,CAAC,IAAD,CAAZ,GAAqB,OAAO,CAAC,IAAD,EAAO,MAAM,CAAC,CAAD,CAAb,CAA5B;MACA;;IACF,KAAK,QAAL;MACE,IAAI,MAAM,CAAC,CAAD,CAAN,IAAa,IAAjB,EAAuB;QACrB;MACD;;MACD,YAAY,CAAC,IAAD,CAAZ,GAAqB,MAAM,CAAC,MAAM,CAAC,CAAD,CAAP,CAA3B;MACA;;IACF,KAAK,QAAL;MACE,IAAI,CAAC,CAAA,GAAA,OAAA,CAAA,QAAA,EAAS,MAAM,CAAC,CAAD,CAAf,CAAL,EAA0B;QACxB,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,GAAG,IAAI,oBAA3B,CAAN;MACD;;MACD,YAAY,CAAC,IAAD,CAAZ,GAAqB,MAAM,CAAC,CAAD,CAA3B;MACA;;IACF,KAAK,KAAL;MACE,YAAY,CAAC,IAAD,CAAZ,GAAqB,MAAM,CAAC,CAAD,CAA3B;MACA;;IACF;MAAS;QACP,IAAI,CAAC,SAAL,EAAgB;UACd,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,oDAApB,CAAN;QACD;;QACD,MAAM,cAAc,GAAG,SAAS,CAAC;UAAE,IAAF;UAAQ,OAAO,EAAE,YAAjB;UAA+B;QAA/B,CAAD,CAAhC;QACA,YAAY,CAAC,IAAD,CAAZ,GAAqB,cAArB;QACA;MACD;EAhCH;AAkCD;;AAgBY,OAAA,CAAA,OAAA,GAAU;EACrB,OAAO,EAAE;IACP,MAAM,EAAE,UADD;;IAEP,SAAS,QAA6B;MAAA,IAA5B;QAAE,OAAF;QAAW,MAAM,EAAE,CAAC,KAAD;MAAnB,CAA4B;MACpC,OAAO,CAAA,GAAA,OAAA,CAAA,kBAAA,EAAmB,EAAE,GAAG,OAAO,CAAC,UAAb;QAAyB,OAAO,EAAE,MAAM,CAAC,KAAD;MAAxC,CAAnB,CAAP;IACD;;EAJM,CADY;EAOrB,IAAI,EAAE;IACJ,MAAM,EAAE,aADJ;;IAEJ,SAAS,QAAmC;MAAA,IAAlC;QAAE,IAAF;QAAQ,OAAR;QAAiB,MAAM,EAAE,CAAC,KAAD;MAAzB,CAAkC;;MAC1C,IAAI,CAAC,CAAA,GAAA,OAAA,CAAA,QAAA,EAAS,KAAT,EAAgB,CAAC,UAAD,EAAa,UAAb,CAAhB,CAAL,EAAyD;QACvD,MAAM,IAAI,OAAA,CAAA,eAAJ,CACJ,GAAG,IAAI,8DADH,CAAN;MAGD;;MACD,OAAO,mBAAA,CAAA,gBAAA,CAAiB,KAAjB,CAAuB,OAAO,CAAC,WAA/B,EAA4C;QACjD,QAAQ,EAAE,KAAK,CAAC,QADiC;QAEjD,QAAQ,EAAE,KAAK,CAAC;MAFiC,CAA5C,CAAP;IAID;;EAZG,CAPe;EAqBrB,aAAa,EAAE;IACb,MAAM,EAAE,aADK;;IAEb,SAAS,QAA6B;MAAA,IAA5B;QAAE,OAAF;QAAW,MAAM,EAAE,CAAC,KAAD;MAAnB,CAA4B;;;;MACpC,MAAM,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,WAAA,CAAA,aAAd,CAAnB;MACA,MAAM,CAAC,SAAD,IAAc,UAAU,CAAC,MAAX,CAAkB,CAAC,IAAI,CAAC,CAAC,KAAF,CAAQ,MAAM,CAAC,MAAM,CAAC,GAAG,KAAK,KAAK,IAArB,EAA2B,GAA3B,CAAd,CAAvB,CAApB;;MACA,IAAI,CAAC,SAAL,EAAgB;QACd,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,wBAAwB,UAAU,SAAS,KAAK,EAApE,CAAN;MACD;;MACD,IAAI,MAAM,GAAG,CAAA,EAAA,GAAA,OAAO,CAAC,WAAR,MAAmB,IAAnB,IAAmB,EAAA,KAAA,KAAA,CAAnB,GAAmB,KAAA,CAAnB,GAAmB,EAAA,CAAE,MAAlC;;MACA,IACE,SAAS,KAAK,WAAA,CAAA,aAAA,CAAc,aAA5B,IACA,WAAA,CAAA,4BAAA,CAA6B,GAA7B,CAAiC,SAAjC,CAFF,EAGE;QACA;QACA,MAAM,GAAG,WAAT;MACD;;MAED,IAAI,QAAQ,GAAG,CAAA,EAAA,GAAA,OAAO,CAAC,WAAR,MAAmB,IAAnB,IAAmB,EAAA,KAAA,KAAA,CAAnB,GAAmB,KAAA,CAAnB,GAAmB,EAAA,CAAE,QAApC;;MACA,IAAI,SAAS,KAAK,WAAA,CAAA,aAAA,CAAc,YAA5B,IAA4C,QAAQ,KAAK,EAA7D,EAAiE;QAC/D,QAAQ,GAAG,SAAX;MACD;;MACD,OAAO,mBAAA,CAAA,gBAAA,CAAiB,KAAjB,CAAuB,OAAO,CAAC,WAA/B,EAA4C;QACjD,SADiD;QAEjD,MAFiD;QAGjD;MAHiD,CAA5C,CAAP;IAKD;;EA1BY,CArBM;EAiDrB,uBAAuB,EAAE;IACvB,MAAM,EAAE,aADe;;IAEvB,SAAS,QAAmC;MAAA,IAAlC;QAAE,OAAF;QAAW,MAAM,EAAE,CAAC,WAAD;MAAnB,CAAkC;;MAC1C,IAAI,OAAO,WAAP,KAAuB,QAA3B,EAAqC;QACnC,MAAM,mBAAmB,GAAG,MAAM,CAAC,MAAP,CAAc,IAAd,CAA5B;;QAEA,KAAK,MAAM,CAAC,GAAD,EAAM,KAAN,CAAX,IAA2B,iBAAiB,CAAC,WAAD,CAA5C,EAA2D;UACzD,IAAI;YACF,mBAAmB,CAAC,GAAD,CAAnB,GAA2B,UAAU,CAAC,GAAD,EAAM,KAAN,CAArC;UACD,CAFD,CAEE,MAAM;YACN,mBAAmB,CAAC,GAAD,CAAnB,GAA2B,KAA3B;UACD;QACF;;QAED,OAAO,mBAAA,CAAA,gBAAA,CAAiB,KAAjB,CAAuB,OAAO,CAAC,WAA/B,EAA4C;UACjD;QADiD,CAA5C,CAAP;MAGD;;MACD,IAAI,CAAC,CAAA,GAAA,OAAA,CAAA,QAAA,EAAS,WAAT,CAAL,EAA4B;QAC1B,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,2CAApB,CAAN;MACD;;MACD,OAAO,mBAAA,CAAA,gBAAA,CAAiB,KAAjB,CAAuB,OAAO,CAAC,WAA/B,EAA4C;QAAE,mBAAmB,EAAE;MAAvB,CAA5C,CAAP;IACD;;EAtBsB,CAjDJ;EAyErB,UAAU,EAAE;IACV,MAAM,EAAE,aADE;;IAEV,SAAS,QAA6B;MAAA,IAA5B;QAAE,OAAF;QAAW,MAAM,EAAE,CAAC,KAAD;MAAnB,CAA4B;MACpC,MAAM,MAAM,GAAG,MAAM,CAAC,KAAD,CAArB;MACA,OAAO,mBAAA,CAAA,gBAAA,CAAiB,KAAjB,CAAuB,OAAO,CAAC,WAA/B,EAA4C;QAAE;MAAF,CAA5C,CAAP;IACD;;EALS,CAzES;EAgFrB,cAAc,EAAE;IACd,IAAI,EAAE;EADQ,CAhFK;EAmFrB,UAAU,EAAE;IACV,IAAI,EAAE;EADI,CAnFS;EAsFrB,SAAS,EAAE;IACT,MAAM,EAAE,WADC;;IAET,SAAS,QAAsB;MAAA,IAArB;QAAE,MAAM,EAAE,CAAC,OAAD;MAAV,CAAqB;MAC7B,MAAM,mBAAmB,GACvB,OAAO,OAAP,KAAmB,QAAnB,GAA+B;QAAE;MAAF,CAA/B,GAA4D,OAD9D;MAEA,MAAM,iBAAiB,GAAG,mBAAmB,IAAI,mBAAmB,CAAC,OAArE;;MACA,IAAI,CAAC,iBAAL,EAAwB;QACtB,MAAM,IAAI,OAAA,CAAA,eAAJ,CACJ,qFAAqF,MAAM,CAAC,MAAP,CACnF,cAAA,CAAA,gBADmF,EAEnF,IAFmF,CAE9E,MAF8E,CAEvE,IAHV,CAAN;MAKD;;MACD,IAAI,CAAC,MAAM,CAAC,MAAP,CAAc,cAAA,CAAA,gBAAd,EAAgC,IAAhC,CAAqC,CAAC,IAAI,CAAC,KAAK,iBAAhD,CAAL,EAAyE;QACvE,MAAM,IAAI,OAAA,CAAA,eAAJ,CACJ,8BAA8B,iBAAiB,sCAAsC,MAAM,CAAC,MAAP,CACnF,cAAA,CAAA,gBADmF,EAEnF,IAFmF,CAE9E,MAF8E,CAEvE,IAHV,CAAN;MAKD;;MACD,OAAO,mBAAP;IACD;;EArBQ,CAtFU;EA6GrB,SAAS,EAAE;IACT,IAAI,EAAE;EADG,CA7GU;EAgHrB,WAAW,EAAE;IACX,OAAO,EAAE,MADE;IAEX,MAAM,EAAE,aAFG;;IAGX,SAAS,QAAW;MAAA,IAAV;QAAE;MAAF,CAAU;MAClB,MAAM,eAAe,GAAG,IAAI,GAAJ,EAAxB;;MACA,KAAK,MAAM,OAAX,IAAsB,MAAtB,EAA+D;QAC7D,MAAM,YAAY,GAAG,OAAO,OAAP,KAAmB,QAAnB,GAA8B,OAAO,CAAC,KAAR,CAAc,GAAd,CAA9B,GAAmD,OAAxE;;QACA,IAAI,CAAC,KAAK,CAAC,OAAN,CAAc,YAAd,CAAL,EAAkC;UAChC,MAAM,IAAI,OAAA,CAAA,yBAAJ,CACJ,mEADI,CAAN;QAGD;;QACD,KAAK,MAAM,CAAX,IAAgB,YAAhB,EAA8B;UAC5B,IAAI,MAAM,CAAC,IAAP,CAAY,aAAA,CAAA,UAAZ,EAAwB,QAAxB,CAAiC,MAAM,CAAC,CAAD,CAAvC,CAAJ,EAAiD;YAC/C,eAAe,CAAC,GAAhB,CAAoB,MAAM,CAAC,CAAD,CAA1B;UACD,CAFD,MAEO;YACL,MAAM,IAAI,OAAA,CAAA,yBAAJ,CACJ,GAAG,CAAC,0DAA0D,MAAM,CAAC,IAAP,CAC5D,aAAA,CAAA,UAD4D,CAE7D,GAHG,CAAN;UAKD;QACF;MACF;;MACD,OAAO,CAAC,GAAG,eAAJ,CAAP;IACD;;EAzBU,CAhHQ;EA2IrB,gBAAgB,EAAE;IAChB,OAAO,EAAE,KADO;IAEhB,IAAI,EAAE;EAFU,CA3IG;EA+IrB,MAAM,EAAE;IACN,IAAI,EAAE;EADA,CA/Ia;EAkJrB,gBAAgB,EAAE;IAChB,OAAO,EAAE,KADO;IAEhB,IAAI,EAAE;EAFU,CAlJG;EAsJrB,UAAU,EAAE;IACV,MAAM,EAAE,UADE;IAEV,OAAO,EAAE,CAAA,GAAA,OAAA,CAAA,kBAAA,GAFC;;IAGV,SAAS,SAA6B;MAAA,IAA5B;QAAE,OAAF;QAAW,MAAM,EAAE,CAAC,KAAD;MAAnB,CAA4B;;;;MACpC,IAAI,CAAC,CAAA,GAAA,OAAA,CAAA,QAAA,EAAS,KAAT,CAAL,EAAsB,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,8BAApB,CAAN;MACtB,OAAO,CAAA,GAAA,OAAA,CAAA,kBAAA,EAAmB;QACxB,UAAU,EAAE,KADY;QAExB,OAAO,EAAE,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,OAAO,CAAC,QAAR,MAAgB,IAAhB,IAAgB,EAAA,KAAA,KAAA,CAAhB,GAAgB,KAAA,CAAhB,GAAgB,EAAA,CAAE,WAAlB,MAA6B,IAA7B,IAA6B,EAAA,KAAA,KAAA,CAA7B,GAA6B,KAAA,CAA7B,GAA6B,EAAA,CAAE;MAFhB,CAAnB,CAAP;IAID;;EATS,CAtJS;EAiKrB,oBAAoB,EAAE;IAAE,IAAI,EAAE,SAAR;IAAmB,OAAO,EAAE;EAA5B,CAjKD;EAkKrB,MAAM,EAAE;IACN,SAAS,SAA0B;MAAA,IAAzB;QAAE,IAAF;QAAQ,MAAM,EAAE,CAAC,KAAD;MAAhB,CAAyB;MACjC,MAAM,cAAc,GAAG,MAAM,CAAC,IAAD,EAAO,KAAP,CAA7B;;MACA,IAAI,cAAc,KAAK,CAAnB,IAAwB,cAAc,KAAK,CAA/C,EAAkD;QAChD,OAAO,cAAP;MACD;;MACD,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,sCAAsC,cAAc,GAAxE,CAAN;IACD;;EAPK,CAlKa;EA2KrB,WAAW,EAAE;IACX,IAAI,EAAE;EADK,CA3KQ;EA8KrB,mBAAmB,EAAE;IACnB,OAAO,EAAE,KADU;IAEnB,IAAI,EAAE;EAFa,CA9KA;EAkLrB,KAAK,EAAE;IACL,UAAU,EAAE,4BADP;IAEL,MAAM,EAAE,cAFH;;IAGL,SAAS,SAAmC;MAAA,IAAlC;QAAE,IAAF;QAAQ,OAAR;QAAiB,MAAM,EAAE,CAAC,KAAD;MAAzB,CAAkC;MAC1C,MAAM,EAAE,GAAG,eAAA,CAAA,YAAA,CAAa,WAAb,CAAyB;QAClC,YAAY,EAAE,EACZ,GAAG,OAAO,CAAC,YADC;UAEZ,KAAK,EAAE,UAAU,CAAC,IAAD,EAAO,KAAP;QAFL;MADoB,CAAzB,CAAX;MAMA,IAAI,CAAC,EAAL,EAAS,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,4CAA4C,KAAK,EAArE,CAAN;MACT,OAAO,EAAP;IACD;;EAZI,CAlLc;EAgMrB,oBAAoB,EAAE;IACpB,OAAO,EAAE,KADW;IAEpB,IAAI,EAAE;EAFc,CAhMD;EAoMrB,eAAe,EAAE;IACf,IAAI,EAAE;EADS,CApMI;EAuMrB,CAAC,EAAE;IACD,UAAU,EAAE,4BADX;IAED,MAAM,EAAE,cAFP;;IAGD,SAAS,SAAmC;MAAA,IAAlC;QAAE,IAAF;QAAQ,OAAR;QAAiB,MAAM,EAAE,CAAC,KAAD;MAAzB,CAAkC;MAC1C,MAAM,EAAE,GAAG,eAAA,CAAA,YAAA,CAAa,WAAb,CAAyB;QAClC,YAAY,EAAE,EACZ,GAAG,OAAO,CAAC,YADC;UAEZ,OAAO,EAAE,UAAU,CAAC,IAAD,EAAO,KAAP;QAFP;MADoB,CAAzB,CAAX;MAMA,IAAI,CAAC,EAAL,EAAS,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,8CAA8C,KAAK,EAAvE,CAAN;MACT,OAAO,EAAP;IACD;;EAZA,CAvMkB;EAqNrB,OAAO,EAAE;IACP,MAAM,EAAE,cADD;;IAEP,SAAS,SAAmC;MAAA,IAAlC;QAAE,IAAF;QAAQ,OAAR;QAAiB,MAAM,EAAE,CAAC,KAAD;MAAzB,CAAkC;MAC1C,MAAM,EAAE,GAAG,eAAA,CAAA,YAAA,CAAa,WAAb,CAAyB;QAClC,YAAY,EAAE,EACZ,GAAG,OAAO,CAAC,YADC;UAEZ,OAAO,EAAE,UAAU,CAAC,IAAD,EAAO,KAAP;QAFP;MADoB,CAAzB,CAAX;MAMA,IAAI,CAAC,EAAL,EAAS,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,8CAA8C,KAAK,EAAvE,CAAN;MACT,OAAO,EAAP;IACD;;EAXM,CArNY;EAkOrB,SAAS,EAAE;IACT,OAAO,EAAE,IADA;IAET,IAAI,EAAE;EAFG,CAlOU;EAsOrB,qBAAqB,EAAE;IACrB,OAAO,EAAE,MADY;IAErB,IAAI,EAAE;EAFe,CAtOF;EA0OrB,YAAY,EAAE;IACZ,OAAO,EAAE,KADG;IAEZ,IAAI,EAAE;EAFM,CA1OO;EA8OrB,gBAAgB,EAAE;IAChB,OAAO,EAAE,EADO;IAEhB,IAAI,EAAE;EAFU,CA9OG;EAkPrB,MAAM,EAAE;IACN,OAAO,EAAE,IAAI,QAAA,CAAA,MAAJ,CAAW,aAAX,CADH;;IAEN,SAAS,SAAoB;MAAA,IAAnB;QAAE,MAAM,EAAE,CAAC,KAAD;MAAV,CAAmB;;MAC3B,IAAI,KAAK,YAAY,QAAA,CAAA,MAArB,EAA6B;QAC3B,OAAO,KAAP;MACD;;MACD,CAAA,GAAA,OAAA,CAAA,WAAA,EAAY,4CAAZ,EAJ2B,CAK3B;MACA;;MACA;IACD;;EAVK,CAlPa;EA8PrB,WAAW,EAAE;IACX,MAAM,EAAE,QADG;;IAEX,SAAS,SAAoB;MAAA,IAAnB;QAAE,MAAM,EAAE,CAAC,KAAD;MAAV,CAAmB;MAC3B,OAAO,IAAI,QAAA,CAAA,MAAJ,CAAW,aAAX,EAA0B;QAAE,WAAW,EAAE;MAAf,CAA1B,CAAP;IACD;;EAJU,CA9PQ;EAoQrB,aAAa,EAAE;IACb,OAAO,EAAE,CADI;;IAEb,SAAS,SAA0B;MAAA,IAAzB;QAAE,IAAF;QAAQ,MAAM,EAAE,CAAC,KAAD;MAAhB,CAAyB;MACjC,MAAM,aAAa,GAAG,OAAO,CAAC,IAAD,EAAO,KAAP,CAA7B;;MACA,IAAI,aAAa,KAAK,CAAtB,EAAyB;QACvB,MAAM,IAAI,OAAA,CAAA,yBAAJ,CAA8B,wCAA9B,CAAN;MACD;;MACD,OAAO,aAAP;IACD;;EARY,CApQM;EA8QrB,aAAa,EAAE;IACb,OAAO,EAAE,CADI;IAEb,IAAI,EAAE;EAFO,CA9QM;EAkRrB,WAAW,EAAE;IACX,OAAO,EAAE,GADE;IAEX,IAAI,EAAE;EAFK,CAlRQ;EAsRrB,mBAAmB,EAAE;IACnB,MAAM,EAAE,gBADW;;IAEnB,SAAS,SAAmC;MAAA,IAAlC;QAAE,IAAF;QAAQ,OAAR;QAAiB,MAAM,EAAE,CAAC,KAAD;MAAzB,CAAkC;MAC1C,MAAM,mBAAmB,GAAG,OAAO,CAAC,IAAD,EAAO,KAAP,CAAnC;;MACA,IAAI,OAAO,CAAC,cAAZ,EAA4B;QAC1B,OAAO,iBAAA,CAAA,cAAA,CAAe,WAAf,CAA2B;UAChC,cAAc,EAAE,EAAE,GAAG,OAAO,CAAC,cAAb;YAA6B;UAA7B;QADgB,CAA3B,CAAP;MAGD,CAJD,MAIO;QACL,OAAO,IAAI,iBAAA,CAAA,cAAJ,CAAmB,WAAnB,EAAgC,SAAhC,EAA2C;UAAE;QAAF,CAA3C,CAAP;MACD;IACF;;EAXkB,CAtRA;EAmSrB,qBAAqB,EAAE;IACrB,IAAI,EAAE;EADe,CAnSF;EAsSrB,WAAW,EAAE;IACX,OAAO,EAAE,CADE;IAEX,IAAI,EAAE;EAFK,CAtSQ;EA0SrB,uBAAuB,EAAE;IACvB,OAAO,EAAE,GADc;IAEvB,IAAI,EAAE;EAFiB,CA1SJ;EA8SrB,eAAe,EAAE;IACf,OAAO,EAAE,KADM;IAEf,IAAI,EAAE;EAFS,CA9SI;EAkTrB,IAAI,EAAE;IACJ,MAAM,EAAE,YADJ;;IAEJ,SAAS,SAA6B;MAAA,IAA5B;QAAE,MAAM,EAAE,CAAC,KAAD,CAAV;QAAmB;MAAnB,CAA4B;MACpC,OAAO,EAAE,GAAG,OAAO,CAAC,UAAb;QAAyB,IAAI,EAAE,MAAM,CAAC,KAAD;MAArC,CAAP;IACD;;EAJG,CAlTe;EAwTrB,OAAO,EAAE;IACP,OAAO,EAAE,IADF;IAEP,IAAI,EAAE;EAFC,CAxTY;EA4TrB,SAAS,EAAE;IACT,OAAO,EAAE,OAAA,CAAA,kBADA;;IAET,SAAS,SAAoB;MAAA,IAAnB;QAAE,MAAM,EAAE,CAAC,KAAD;MAAV,CAAmB;;MAC3B,IAAI,CAAA,GAAA,OAAA,CAAA,QAAA,EAAS,KAAT,EAAgB,CAAC,UAAD,CAAhB,KAA0C,OAAO,KAAK,CAAC,QAAb,KAA0B,UAAxE,EAAoF;QAClF,OAAO,KAAP;MACD;;MACD,MAAM,IAAI,OAAA,CAAA,eAAJ,CACJ,oEAAoE,KAAK,EADrE,CAAN;IAGD;;EATQ,CA5TU;EAuUrB,cAAc,EAAE;IACd,UAAU,EAAE,IADE;IAEd,IAAI,EAAE;EAFQ,CAvUK;EA2UrB,cAAc,EAAE;IACd,IAAI,EAAE;EADQ,CA3UK;EA8UrB,YAAY,EAAE;IACZ,IAAI,EAAE;EADM,CA9UO;EAiVrB,aAAa,EAAE;IACb,IAAI,EAAE;EADO,CAjVM;EAoVrB,SAAS,EAAE;IACT,IAAI,EAAE;EADG,CApVU;EAuVrB,aAAa,EAAE;IACb,IAAI,EAAE;EADO,CAvVM;EA0VrB,SAAS,EAAE;IACT,IAAI,EAAE;EADG,CA1VU;EA6VrB,aAAa,EAAE;IACb,IAAI,EAAE;EADO,CA7VM;EAgWrB,GAAG,EAAE;IACH,OAAO,EAAE,KADN;IAEH,IAAI,EAAE;EAFH,CAhWgB;EAoWrB,WAAW,EAAE;IACX,SAAS,SAA6B;MAAA,IAA5B;QAAE,MAAM,EAAE,CAAC,KAAD,CAAV;QAAmB;MAAnB,CAA4B;;MACpC,IAAI,KAAK,YAAY,cAAA,CAAA,WAAjB,IAAgC,CAAA,GAAA,OAAA,CAAA,QAAA,EAAS,KAAT,EAAgB,CAAC,OAAD,CAAhB,CAApC,EAAyE;QACvE,OAAO,cAAA,CAAA,WAAA,CAAY,WAAZ,CAAwB,EAAE,GAAG,OAAO,CAAC,WAAb;UAA0B,GAAG;QAA7B,CAAxB,CAAP;MACD;;MACD,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,sCAAsC,IAAI,CAAC,SAAL,CAAe,KAAf,CAAqB,EAA/E,CAAN;IACD;;EANU,CApWQ;EA4WrB,gBAAgB,EAAE;IAChB,MAAM,EAAE,aADQ;;IAEhB,SAAS,SAA6B;MAAA,IAA5B;QAAE,MAAM,EAAE,CAAC,KAAD,CAAV;QAAmB;MAAnB,CAA4B;MACpC,OAAO,cAAA,CAAA,WAAA,CAAY,WAAZ,CAAwB,EAC7B,GAAG,OAAO,CAAC,WADkB;QAE7B,KAAK,EAAE;MAFsB,CAAxB,CAAP;IAID;;EAPe,CA5WG;EAqXrB,cAAc,EAAE;IACd,OAAO,EAAE,iBAAA,CAAA,cAAA,CAAe,OADV;;IAEd,SAAS,SAA6B;MAAA,IAA5B;QAAE,MAAM,EAAE,CAAC,KAAD,CAAV;QAAmB;MAAnB,CAA4B;;;;MACpC,IAAI,KAAK,YAAY,iBAAA,CAAA,cAArB,EAAqC;QACnC,OAAO,iBAAA,CAAA,cAAA,CAAe,WAAf,CAA2B;UAChC,cAAc,EAAE,EAAE,GAAG,OAAO,CAAC,cAAb;YAA6B,GAAG;UAAhC,CADgB;UAEhC,GAAG;QAF6B,CAA3B,CAAP;MAID;;MACD,IAAI,CAAA,GAAA,OAAA,CAAA,QAAA,EAAS,KAAT,EAAgB,CAAC,MAAD,CAAhB,CAAJ,EAAwC;QACtC,MAAM,EAAE,GAAG,iBAAA,CAAA,cAAA,CAAe,WAAf,CAA2B;UACpC,cAAc,EAAE,EAAE,GAAG,OAAO,CAAC,cAAb;YAA6B,GAAG;UAAhC,CADoB;UAEpC,GAAG;QAFiC,CAA3B,CAAX;QAIA,IAAI,EAAJ,EAAQ,OAAO,EAAP,CAAR,KACK,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,oCAAoC,IAAI,CAAC,SAAL,CAAe,KAAf,CAAqB,EAA7E,CAAN;MACN;;MACD,IAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;QAC7B,MAAM,MAAM,GAAG;UACb,KAAK,EAAE,CAAA,EAAA,GAAA,OAAO,CAAC,cAAR,MAAsB,IAAtB,IAAsB,EAAA,KAAA,KAAA,CAAtB,GAAsB,KAAA,CAAtB,GAAsB,EAAA,CAAE,KADlB;UAEb,mBAAmB,EAAE,CAAA,EAAA,GAAA,OAAO,CAAC,cAAR,MAAsB,IAAtB,IAAsB,EAAA,KAAA,KAAA,CAAtB,GAAsB,KAAA,CAAtB,GAAsB,EAAA,CAAE;QAFhC,CAAf;QAIA,OAAO,IAAI,iBAAA,CAAA,cAAJ,CACL,KADK,EAEL,CAAA,EAAA,GAAA,OAAO,CAAC,cAAR,MAAsB,IAAtB,IAAsB,EAAA,KAAA,KAAA,CAAtB,GAAsB,KAAA,CAAtB,GAAsB,EAAA,CAAE,IAFnB,EAGL,MAHK,CAAP;MAKD;;MACD,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,iCAAiC,KAAK,EAA1D,CAAN;IACD;;EA7Ba,CArXK;EAoZrB,kBAAkB,EAAE;IAClB,MAAM,EAAE,gBADU;;IAElB,SAAS,SAMR;MAAA,IANS;QACR,MADQ;QAER;MAFQ,CAMT;MACC,MAAM,IAAI,GAA2C,KAAK,CAAC,OAAN,CAAc,MAAM,CAAC,CAAD,CAApB,IACjD,MAAM,CAAC,CAAD,CAD2C,GAEhD,MAFL;MAGA,MAAM,kBAAkB,GAAG,EAA3B;;MACA,KAAK,MAAM,GAAX,IAAkB,IAAlB,EAAwB;QACtB,MAAM,iBAAiB,GAAW,MAAM,CAAC,MAAP,CAAc,IAAd,CAAlC;;QACA,IAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;UAC3B,KAAK,MAAM,CAAC,CAAD,EAAI,CAAJ,CAAX,IAAqB,iBAAiB,CAAC,GAAD,CAAtC,EAA6C;YAC3C,iBAAiB,CAAC,CAAD,CAAjB,GAAuB,CAAvB;UACD;QACF;;QACD,IAAI,CAAA,GAAA,OAAA,CAAA,QAAA,EAAS,GAAT,CAAJ,EAAmB;UACjB,KAAK,MAAM,CAAC,CAAD,EAAI,CAAJ,CAAX,IAAqB,MAAM,CAAC,OAAP,CAAe,GAAf,CAArB,EAA0C;YACxC,iBAAiB,CAAC,CAAD,CAAjB,GAAuB,CAAvB;UACD;QACF;;QACD,kBAAkB,CAAC,IAAnB,CAAwB,iBAAxB;MACD;;MACD,OAAO,iBAAA,CAAA,cAAA,CAAe,WAAf,CAA2B;QAChC,cAAc,EAAE,OAAO,CAAC,cADQ;QAEhC;MAFgC,CAA3B,CAAP;IAID;;EA/BiB,CApZC;EAqbrB,UAAU,EAAE;IACV,IAAI,EAAE;EADI,CArbS;EAwbrB,UAAU,EAAE;IACV,OAAO,EAAE,IADC;IAEV,IAAI,EAAE;EAFI,CAxbS;EA4brB,WAAW,EAAE;IACX,OAAO,EAAE,IADE;IAEX,IAAI,EAAE;EAFK,CA5bQ;EAgcrB,kBAAkB,EAAE;IAClB,IAAI,EAAE;EADY,CAhcC;EAmcrB,wBAAwB,EAAE;IACxB,OAAO,EAAE,KADe;IAExB,IAAI,EAAE;EAFkB,CAncL;EAucrB,UAAU,EAAE;IACV,IAAI,EAAE;EADI,CAvcS;EA0crB,eAAe,EAAE;IACf,OAAO,EAAE,CADM;IAEf,IAAI,EAAE;EAFS,CA1cI;EA8crB,WAAW,EAAE;IACX,IAAI,EAAE,MADK;IAEX,OAAO,EAAE;EAFE,CA9cQ;EAkdrB,cAAc,EAAE;IACd,IAAI,EAAE,QADQ;IAEd,OAAO,EAAE;EAFK,CAldK;EAsdrB,GAAG,EAAE;IACH,MAAM,EAAE,KADL;IAEH,IAAI,EAAE;EAFH,CAtdgB;EA0drB,KAAK,EAAE;IACL,MAAM,EAAE,IADH;;IAEL,SAAS,SAAoB;MAAA,IAAnB;QAAE,MAAM,EAAE,CAAC,KAAD;MAAV,CAAmB;MAC3B,OAAO,EAAE,CAAC,YAAH,CAAgB,MAAM,CAAC,KAAD,CAAtB,EAA+B;QAAE,QAAQ,EAAE;MAAZ,CAA/B,CAAP;IACD;;EAJI,CA1dc;EAgerB,MAAM,EAAE;IACN,MAAM,EAAE,KADF;;IAEN,SAAS,SAAoB;MAAA,IAAnB;QAAE,MAAM,EAAE,CAAC,KAAD;MAAV,CAAmB;MAC3B,OAAO,EAAE,CAAC,YAAH,CAAgB,MAAM,CAAC,KAAD,CAAtB,EAA+B;QAAE,QAAQ,EAAE;MAAZ,CAA/B,CAAP;IACD;;EAJK,CAhea;EAserB,OAAO,EAAE;IACP,MAAM,EAAE,MADD;;IAEP,SAAS,SAAoB;MAAA,IAAnB;QAAE,MAAM,EAAE,CAAC,KAAD;MAAV,CAAmB;MAC3B,OAAO,EAAE,CAAC,YAAH,CAAgB,MAAM,CAAC,KAAD,CAAtB,EAA+B;QAAE,QAAQ,EAAE;MAAZ,CAA/B,CAAP;IACD;;EAJM,CAteY;EA4erB,MAAM,EAAE;IACN,MAAM,EAAE,KADF;;IAEN,SAAS,SAAoB;MAAA,IAAnB;QAAE,MAAM,EAAE,CAAC,KAAD;MAAV,CAAmB;MAC3B,OAAO,EAAE,CAAC,YAAH,CAAgB,MAAM,CAAC,KAAD,CAAtB,EAA+B;QAAE,QAAQ,EAAE;MAAZ,CAA/B,CAAP;IACD;;EAJK,CA5ea;EAkfrB,OAAO,EAAE;IACP,UAAU,EAAE,IADL;IAEP,MAAM,EAAE,YAFD;IAGP,IAAI,EAAE;EAHC,CAlfY;EAufrB,WAAW,EAAE;IACX,MAAM,EAAE,oBADG;IAEX,IAAI,EAAE;EAFK,CAvfQ;EA2frB,GAAG,EAAE;IACH,IAAI,EAAE;EADH,CA3fgB;EA8frB,2BAA2B,EAAE;IAC3B,MAAM,EAAE,oBADmB;;IAE3B,SAAS,SAA0B;MAAA,IAAzB;QAAE,IAAF;QAAQ,MAAM,EAAE,CAAC,KAAD;MAAhB,CAAyB;MACjC;MACA,OAAO,CAAC,UAAU,CAAC,IAAD,EAAO,KAAP,CAAlB;IACD;;EAL0B,CA9fR;EAqgBrB,wBAAwB,EAAE;IACxB,MAAM,EAAE,qBADgB;;IAExB,SAAS,SAA0B;MAAA,IAAzB;QAAE,IAAF;QAAQ,MAAM,EAAE,CAAC,KAAD;MAAhB,CAAyB;MACjC;MACA,OAAO,UAAU,CAAC,IAAD,EAAO,KAAP,CAAV,GAA0B,MAAM,SAAhC,GAA4C,SAAnD;IACD;;EALuB,CArgBL;EA4gBrB,SAAS,EAAE;IACT,MAAM,EAAE,IADC;;IAET,SAAS,SAAoB;MAAA,IAAnB;QAAE,MAAM,EAAE,CAAC,KAAD;MAAV,CAAmB;MAC3B,OAAO,EAAE,CAAC,YAAH,CAAgB,MAAM,CAAC,KAAD,CAAtB,EAA+B;QAAE,QAAQ,EAAE;MAAZ,CAA/B,CAAP;IACD;;EAJQ,CA5gBU;EAkhBrB,kBAAkB,EAAE;IAClB,MAAM,EAAE,MADU;;IAElB,SAAS,SAAoB;MAAA,IAAnB;QAAE,MAAM,EAAE,CAAC,KAAD;MAAV,CAAmB;MAC3B,OAAO,EAAE,CAAC,YAAH,CAAgB,MAAM,CAAC,KAAD,CAAtB,EAA+B;QAAE,QAAQ,EAAE;MAAZ,CAA/B,CAAP;IACD;;EAJiB,CAlhBC;EAwhBrB,qBAAqB,EAAE;IACrB,MAAM,EAAE,KADa;;IAErB,SAAS,SAAoB;MAAA,IAAnB;QAAE,MAAM,EAAE,CAAC,KAAD;MAAV,CAAmB;MAC3B,OAAO,EAAE,CAAC,YAAH,CAAgB,MAAM,CAAC,KAAD,CAAtB,EAA+B;QAAE,QAAQ,EAAE;MAAZ,CAA/B,CAAP;IACD;;EAJoB,CAxhBF;EA8hBrB,6BAA6B,EAAE;IAC7B,MAAM,EAAE,YADqB;IAE7B,IAAI,EAAE;EAFuB,CA9hBV;EAkiBrB,WAAW,EAAE;IACX,SAAS,SAAmC;MAAA,IAAlC;QAAE,IAAF;QAAQ,OAAR;QAAiB,MAAM,EAAE,CAAC,KAAD;MAAzB,CAAkC;MAC1C,MAAM,WAAW,GAAG,UAAU,CAAC,IAAD,EAAO,KAAP,CAA9B;;MACA,IAAI,WAAJ,EAAiB;QACf,OAAO,CAAC,mBAAR,GAA8B,MAAM,SAApC;;QACA,OAAO,CAAC,kBAAR,GAA6B,KAA7B;MACD,CAHD,MAGO;QACL,OAAO,CAAC,mBAAR,GAA8B,OAAO,CAAC,wBAAR,GAC1B,MAAM,SADoB,GAE1B,SAFJ;QAGA,OAAO,CAAC,kBAAR,GAA6B,OAAO,CAAC,2BAAR,GAAsC,KAAtC,GAA8C,IAA3E;MACD;;MACD,OAAO,WAAP;IACD;;EAbU,CAliBQ;EAijBrB,CAAC,EAAE;IACD,MAAM,EAAE,cADP;;IAED,SAAS,SAA6B;MAAA,IAA5B;QAAE,MAAM,EAAE,CAAC,KAAD,CAAV;QAAmB;MAAnB,CAA4B;MACpC,OAAO,eAAA,CAAA,YAAA,CAAa,WAAb,CAAyB;QAAE,YAAY,EAAE,EAAE,GAAG,OAAO,CAAC,YAAb;UAA2B,CAAC,EAAE;QAA9B;MAAhB,CAAzB,CAAP;IACD;;EAJA,CAjjBkB;EAujBrB,kBAAkB,EAAE;IAClB,OAAO,EAAE,CADS;IAElB,IAAI,EAAE;EAFY,CAvjBC;EA2jBrB,YAAY,EAAE;IACZ,MAAM,EAAE,cADI;;IAEZ,SAAS,SAA6B;MAAA,IAA5B;QAAE,MAAM,EAAE,CAAC,KAAD,CAAV;QAAmB;MAAnB,CAA4B;;MACpC,IAAI,CAAA,GAAA,OAAA,CAAA,QAAA,EAAS,KAAT,KAAmB,KAAK,YAAY,eAAA,CAAA,YAAxC,EAAsD;QACpD,OAAO,eAAA,CAAA,YAAA,CAAa,WAAb,CAAyB;UAC9B,YAAY,EAAE,EACZ,GAAG,OAAO,CAAC,YADC;YAEZ,GAAG;UAFS;QADgB,CAAzB,CAAP;MAMD,CAPD,MAOO,IAAI,KAAK,KAAK,UAAV,IAAwB,OAAO,KAAP,KAAiB,QAA7C,EAAuD;QAC5D,OAAO,eAAA,CAAA,YAAA,CAAa,WAAb,CAAyB;UAC9B,YAAY,EAAE,EACZ,GAAG,OAAO,CAAC,YADC;YAEZ,CAAC,EAAE;UAFS;QADgB,CAAzB,CAAP;MAMD;;MAED,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,sCAAsC,IAAI,CAAC,SAAL,CAAe,KAAf,CAAqB,EAA/E,CAAN;IACD;;EApBW,CA3jBO;EAilBrB,QAAQ,EAAE;IACR,UAAU,EAAE,+BADJ;IAER,MAAM,EAAE,cAFA;;IAGR,SAAS,SAA6B;MAAA,IAA5B;QAAE,MAAM,EAAE,CAAC,KAAD,CAAV;QAAmB;MAAnB,CAA4B;MACpC,MAAM,EAAE,GAAG,eAAA,CAAA,YAAA,CAAa,WAAb,CAAyB;QAClC,YAAY,EAAE,EACZ,GAAG,OAAO,CAAC,YADC;UAEZ,QAAQ,EAAE,OAAO,CAAC,UAAD,EAAa,KAAb;QAFL;MADoB,CAAzB,CAAX;MAMA,IAAI,EAAJ,EAAQ,OAAO,EAAP;MACR,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,wCAApB,CAAN;IACD;;EAZO,CAjlBW;EA+lBrB,UAAU,EAAE;IACV,MAAM,EAAE,cADE;;IAEV,SAAS,SAA6B;MAAA,IAA5B;QAAE,MAAM,EAAE,CAAC,KAAD,CAAV;QAAmB;MAAnB,CAA4B;MACpC,MAAM,EAAE,GAAG,eAAA,CAAA,YAAA,CAAa,WAAb,CAAyB;QAClC,YAAY,EAAE,EACZ,GAAG,OAAO,CAAC,YADC;UAEZ,UAAU,EAAE,OAAO,CAAC,YAAD,EAAe,KAAf;QAFP;MADoB,CAAzB,CAAX;MAMA,IAAI,EAAJ,EAAQ,OAAO,EAAP;MACR,MAAM,IAAI,OAAA,CAAA,eAAJ,CAAoB,wCAApB,CAAN;IACD;;EAXS,CA/lBS;EA4mBrB,oBAAoB,EAAE;IACpB,OAAO,EAAE,CADW;IAEpB,IAAI,EAAE;EAFc,CA5mBD;EAgnBrB;EACA,cAAc,EAAE;IAAE,IAAI,EAAE;EAAR,CAjnBK;EAknBrB,SAAS,EAAE;IAAE,IAAI,EAAE;EAAR,CAlnBU;EAmnBrB;EACA,SAAS,EAAE;IAAE,IAAI,EAAE;EAAR,CApnBU;EAqnBrB,WAAW,EAAE;IAAE,IAAI,EAAE;EAAR,CArnBQ;EAsnBrB,aAAa,EAAE;IAAE,IAAI,EAAE;EAAR,CAtnBM;EAunBrB,WAAW,EAAE;IAAE,IAAI,EAAE;EAAR,CAvnBQ;EAwnBrB,WAAW,EAAE;IAAE,IAAI,EAAE;EAAR,CAxnBQ;EAynBrB,kBAAkB,EAAE;IAAE,IAAI,EAAE;EAAR,CAznBC;EA0nBrB,mBAAmB,EAAE;IAAE,IAAI,EAAE;EAAR,CA1nBA;EA2nBrB,aAAa,EAAE;IAAE,IAAI,EAAE;EAAR,CA3nBM;EA4nBrB,WAAW,EAAE;IAAE,IAAI,EAAE;EAAR,CA5nBQ;EA6nBrB,OAAO,EAAE;IAAE,IAAI,EAAE;EAAR,CA7nBY;EA8nBrB,WAAW,EAAE;IAAE,IAAI,EAAE;EAAR,CA9nBQ;EA+nBrB,YAAY,EAAE;IAAE,IAAI,EAAE;EAAR,CA/nBO;EAgoBrB,SAAS,EAAE;IAAE,IAAI,EAAE;EAAR,CAhoBU;EAioBrB,KAAK,EAAE;IAAE,IAAI,EAAE;EAAR,CAjoBc;EAkoBrB,MAAM,EAAE;IAAE,IAAI,EAAE;EAAR,CAloBa;EAmoBrB,EAAE,EAAE;IAAE,IAAI,EAAE;EAAR,CAnoBiB;EAooBrB,IAAI,EAAE;IAAE,IAAI,EAAE;EAAR,CApoBe;EAqoBrB,OAAO,EAAE;IAAE,IAAI,EAAE;EAAR,CAroBY;EAsoBrB,GAAG,EAAE;IAAE,IAAI,EAAE;EAAR,CAtoBgB;EAuoBrB,SAAS,EAAE;IAAE,IAAI,EAAE;EAAR,CAvoBU;EAwoBrB,GAAG,EAAE;IAAE,IAAI,EAAE;EAAR,CAxoBgB;EAyoBrB,UAAU,EAAE;IAAE,IAAI,EAAE;EAAR,CAzoBS;EA0oBrB,GAAG,EAAE;IAAE,IAAI,EAAE;EAAR,CA1oBgB;EA2oBrB,cAAc,EAAE;IAAE,IAAI,EAAE;EAAR,CA3oBK;EA4oBrB,KAAK,EAAE;IAAE,IAAI,EAAE;EAAR,CA5oBc;EA6oBrB;EACA,eAAe,EAAE;IAAE,IAAI,EAAE;EAAR,CA9oBI;EA+oBrB,kBAAkB,EAAE;IAAE,IAAI,EAAE;EAAR;AA/oBC,CAAV;AAkpBA,OAAA,CAAA,eAAA,GAAkB,IAAI,kBAAJ,CAC7B,MAAM,CAAC,OAAP,CAAe,OAAA,CAAA,OAAf,EACG,MADH,CACU;EAAA,IAAC,GAAG,UAAH,CAAD;EAAA,OAAoB,UAAU,CAAC,OAAX,IAAsB,IAA1C;AAAA,CADV,EAEG,GAFH,CAEO;EAAA,IAAC,CAAC,CAAD,EAAI,CAAJ,CAAD;EAAA,OAAY,CAAC,CAAD,EAAI,CAAC,CAAC,OAAN,CAAZ;AAAA,CAFP,CAD6B,CAAlB;AAMb;;;AAGG;;AACU,OAAA,CAAA,aAAA,GAAgB,IAAI,GAAJ,CAAQ,CAAC,MAAM,CAAC,GAAP,CAAW,yBAAX,CAAD,CAAR,CAAhB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FEATURE_FLAGS = exports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.checkTLSOptions = exports.resolveSRVRecord = void 0;\nconst dns = require(\"dns\");\nconst fs = require(\"fs\");\nconst mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\nconst url_1 = require(\"url\");\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\nconst providers_1 = require(\"./cmap/auth/providers\");\nconst compression_1 = require(\"./cmap/wire_protocol/compression\");\nconst encrypter_1 = require(\"./encrypter\");\nconst error_1 = require(\"./error\");\nconst logger_1 = require(\"./logger\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst promise_provider_1 = require(\"./promise_provider\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n    const regex = /^.*?\\./;\n    const srv = `.${srvAddress.replace(regex, '')}`;\n    const parent = `.${parentDomain.replace(regex, '')}`;\n    return srv.endsWith(parent);\n}\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nfunction resolveSRVRecord(options, callback) {\n    if (typeof options.srvHost !== 'string') {\n        return callback(new error_1.MongoAPIError('Option \"srvHost\" must not be empty'));\n    }\n    if (options.srvHost.split('.').length < 3) {\n        // TODO(NODE-3484): Replace with MongoConnectionStringError\n        return callback(new error_1.MongoAPIError('URI must include hostname, domain name, and tld'));\n    }\n    // Resolve the SRV record and use the result as the list of hosts to connect to.\n    const lookupAddress = options.srvHost;\n    dns.resolveSrv(`_${options.srvServiceName}._tcp.${lookupAddress}`, (err, addresses) => {\n        if (err)\n            return callback(err);\n        if (addresses.length === 0) {\n            return callback(new error_1.MongoAPIError('No addresses found at host'));\n        }\n        for (const { name } of addresses) {\n            if (!matchesParentDomain(name, lookupAddress)) {\n                return callback(new error_1.MongoAPIError('Server record does not share hostname with parent URI'));\n            }\n        }\n        const hostAddresses = addresses.map(r => { var _a; return utils_1.HostAddress.fromString(`${r.name}:${(_a = r.port) !== null && _a !== void 0 ? _a : 27017}`); });\n        const lbError = validateLoadBalancedOptions(hostAddresses, options, true);\n        if (lbError) {\n            return callback(lbError);\n        }\n        // Resolve TXT record and add options from there if they exist.\n        dns.resolveTxt(lookupAddress, (err, record) => {\n            var _a, _b, _c;\n            if (err) {\n                if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\n                    return callback(err);\n                }\n            }\n            else {\n                if (record.length > 1) {\n                    return callback(new error_1.MongoParseError('Multiple text records not allowed'));\n                }\n                const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n                const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n                if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n                    return callback(new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`));\n                }\n                if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n                    return callback(new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record'));\n                }\n                const source = (_a = txtRecordOptions.get('authSource')) !== null && _a !== void 0 ? _a : undefined;\n                const replicaSet = (_b = txtRecordOptions.get('replicaSet')) !== null && _b !== void 0 ? _b : undefined;\n                const loadBalanced = (_c = txtRecordOptions.get('loadBalanced')) !== null && _c !== void 0 ? _c : undefined;\n                if (!options.userSpecifiedAuthSource &&\n                    source &&\n                    options.credentials &&\n                    !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n                    options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, { source });\n                }\n                if (!options.userSpecifiedReplicaSet && replicaSet) {\n                    options.replicaSet = replicaSet;\n                }\n                if (loadBalanced === 'true') {\n                    options.loadBalanced = true;\n                }\n                if (options.replicaSet && options.srvMaxHosts > 0) {\n                    return callback(new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts'));\n                }\n                const lbError = validateLoadBalancedOptions(hostAddresses, options, true);\n                if (lbError) {\n                    return callback(lbError);\n                }\n            }\n            callback(undefined, hostAddresses);\n        });\n    });\n}\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param options - The options used for options parsing\n * @throws MongoParseError if TLS options are invalid\n */\nfunction checkTLSOptions(options) {\n    if (!options)\n        return;\n    const check = (a, b) => {\n        if (Reflect.has(options, a) && Reflect.has(options, b)) {\n            throw new error_1.MongoParseError(`The '${a}' option cannot be used with '${b}'`);\n        }\n    };\n    check('tlsInsecure', 'tlsAllowInvalidCertificates');\n    check('tlsInsecure', 'tlsAllowInvalidHostnames');\n    check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n    check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n    check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n    check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n    check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nexports.checkTLSOptions = checkTLSOptions;\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\nfunction getBoolean(name, value) {\n    if (typeof value === 'boolean')\n        return value;\n    const valueString = String(value).toLowerCase();\n    if (TRUTHS.has(valueString)) {\n        if (valueString !== 'true') {\n            (0, utils_1.emitWarningOnce)(`deprecated value for ${name} : ${valueString} - please update to ${name} : true instead`);\n        }\n        return true;\n    }\n    if (FALSEHOODS.has(valueString)) {\n        if (valueString !== 'false') {\n            (0, utils_1.emitWarningOnce)(`deprecated value for ${name} : ${valueString} - please update to ${name} : false instead`);\n        }\n        return false;\n    }\n    throw new error_1.MongoParseError(`Expected ${name} to be stringified boolean value, got: ${value}`);\n}\nfunction getInt(name, value) {\n    if (typeof value === 'number')\n        return Math.trunc(value);\n    const parsedValue = Number.parseInt(String(value), 10);\n    if (!Number.isNaN(parsedValue))\n        return parsedValue;\n    throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\nfunction getUint(name, value) {\n    const parsedValue = getInt(name, value);\n    if (parsedValue < 0) {\n        throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n    }\n    return parsedValue;\n}\nfunction* entriesFromString(value) {\n    const keyValuePairs = value.split(',');\n    for (const keyValue of keyValuePairs) {\n        const [key, value] = keyValue.split(':');\n        if (value == null) {\n            throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n        }\n        yield [key, value];\n    }\n}\nclass CaseInsensitiveMap extends Map {\n    constructor(entries = []) {\n        super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n    }\n    has(k) {\n        return super.has(k.toLowerCase());\n    }\n    get(k) {\n        return super.get(k.toLowerCase());\n    }\n    set(k, v) {\n        return super.set(k.toLowerCase(), v);\n    }\n    delete(k) {\n        return super.delete(k.toLowerCase());\n    }\n}\nfunction parseOptions(uri, mongoClient = undefined, options = {}) {\n    if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n        options = mongoClient;\n        mongoClient = undefined;\n    }\n    const url = new mongodb_connection_string_url_1.default(uri);\n    const { hosts, isSRV } = url;\n    const mongoOptions = Object.create(null);\n    // Feature flags\n    for (const flag of Object.getOwnPropertySymbols(options)) {\n        if (exports.FEATURE_FLAGS.has(flag)) {\n            mongoOptions[flag] = options[flag];\n        }\n    }\n    mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n    const urlOptions = new CaseInsensitiveMap();\n    if (url.pathname !== '/' && url.pathname !== '') {\n        const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n        if (dbName) {\n            urlOptions.set('dbName', [dbName]);\n        }\n    }\n    if (url.username !== '') {\n        const auth = {\n            username: decodeURIComponent(url.username)\n        };\n        if (typeof url.password === 'string') {\n            auth.password = decodeURIComponent(url.password);\n        }\n        urlOptions.set('auth', [auth]);\n    }\n    for (const key of url.searchParams.keys()) {\n        const values = [...url.searchParams.getAll(key)];\n        if (values.includes('')) {\n            throw new error_1.MongoAPIError('URI cannot contain options with no value');\n        }\n        if (!urlOptions.has(key)) {\n            urlOptions.set(key, values);\n        }\n    }\n    const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(([, v]) => v != null));\n    // Validate options that can only be provided by one of uri or object\n    if (urlOptions.has('serverApi')) {\n        throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n    }\n    if (objectOptions.has('loadBalanced')) {\n        throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n    }\n    // All option collection\n    const allOptions = new CaseInsensitiveMap();\n    const allKeys = new Set([\n        ...urlOptions.keys(),\n        ...objectOptions.keys(),\n        ...exports.DEFAULT_OPTIONS.keys()\n    ]);\n    for (const key of allKeys) {\n        const values = [];\n        const objectOptionValue = objectOptions.get(key);\n        if (objectOptionValue != null) {\n            values.push(objectOptionValue);\n        }\n        const urlValue = urlOptions.get(key);\n        if (urlValue != null) {\n            values.push(...urlValue);\n        }\n        const defaultOptionsValue = exports.DEFAULT_OPTIONS.get(key);\n        if (defaultOptionsValue != null) {\n            values.push(defaultOptionsValue);\n        }\n        allOptions.set(key, values);\n    }\n    if (allOptions.has('tlsCertificateKeyFile') && !allOptions.has('tlsCertificateFile')) {\n        allOptions.set('tlsCertificateFile', allOptions.get('tlsCertificateKeyFile'));\n    }\n    if (allOptions.has('tls') || allOptions.has('ssl')) {\n        const tlsAndSslOpts = (allOptions.get('tls') || [])\n            .concat(allOptions.get('ssl') || [])\n            .map(getBoolean.bind(null, 'tls/ssl'));\n        if (new Set(tlsAndSslOpts).size !== 1) {\n            throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n        }\n    }\n    const unsupportedOptions = (0, utils_1.setDifference)(allKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n    if (unsupportedOptions.size !== 0) {\n        const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n        const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n        throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n    }\n    // Option parsing and setting\n    for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n        const values = allOptions.get(key);\n        if (!values || values.length === 0)\n            continue;\n        setOption(mongoOptions, key, descriptor, values);\n    }\n    if (mongoOptions.credentials) {\n        const isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n        const isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n        const isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n        if ((isGssapi || isX509) &&\n            allOptions.has('authSource') &&\n            mongoOptions.credentials.source !== '$external') {\n            // If authSource was explicitly given and its incorrect, we error\n            throw new error_1.MongoParseError(`${mongoOptions.credentials} can only have authSource set to '$external'`);\n        }\n        if (!(isGssapi || isX509 || isAws) && mongoOptions.dbName && !allOptions.has('authSource')) {\n            // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n            // and there was no specific authSource given\n            mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n                source: mongoOptions.dbName\n            });\n        }\n        mongoOptions.credentials.validate();\n        // Check if the only auth related option provided was authSource, if so we can remove credentials\n        if (mongoOptions.credentials.password === '' &&\n            mongoOptions.credentials.username === '' &&\n            mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT &&\n            Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n            delete mongoOptions.credentials;\n        }\n    }\n    if (!mongoOptions.dbName) {\n        // dbName default is applied here because of the credential validation above\n        mongoOptions.dbName = 'test';\n    }\n    checkTLSOptions(mongoOptions);\n    if (options.promiseLibrary)\n        promise_provider_1.PromiseProvider.set(options.promiseLibrary);\n    const lbError = validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n    if (lbError) {\n        throw lbError;\n    }\n    if (mongoClient && mongoOptions.autoEncryption) {\n        encrypter_1.Encrypter.checkForMongoCrypt();\n        mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n        mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n    }\n    // Potential SRV Overrides and SRV connection string validations\n    mongoOptions.userSpecifiedAuthSource =\n        objectOptions.has('authSource') || urlOptions.has('authSource');\n    mongoOptions.userSpecifiedReplicaSet =\n        objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n    if (isSRV) {\n        // SRV Record is resolved upon connecting\n        mongoOptions.srvHost = hosts[0];\n        if (mongoOptions.directConnection) {\n            throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n        }\n        if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n            throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n        }\n        // SRV turns on TLS by default, but users can override and turn it off\n        const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n        const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n        if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n            mongoOptions.tls = true;\n        }\n    }\n    else {\n        const userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') ||\n            objectOptions.has('srvMaxHosts') ||\n            urlOptions.has('srvServiceName') ||\n            objectOptions.has('srvServiceName');\n        if (userSpecifiedSrvOptions) {\n            throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n        }\n    }\n    if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n        throw new error_1.MongoParseError('directConnection option requires exactly one host');\n    }\n    if (!mongoOptions.proxyHost &&\n        (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n        throw new error_1.MongoParseError('Must specify proxyHost if other proxy options are passed');\n    }\n    if ((mongoOptions.proxyUsername && !mongoOptions.proxyPassword) ||\n        (!mongoOptions.proxyUsername && mongoOptions.proxyPassword)) {\n        throw new error_1.MongoParseError('Can only specify both of proxy username/password or neither');\n    }\n    const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(key => { var _a; return (_a = urlOptions.get(key)) !== null && _a !== void 0 ? _a : []; });\n    if (proxyOptions.some(options => options.length > 1)) {\n        throw new error_1.MongoParseError('Proxy options cannot be specified multiple times in the connection string');\n    }\n    return mongoOptions;\n}\nexports.parseOptions = parseOptions;\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n    if (mongoOptions.loadBalanced) {\n        if (hosts.length > 1) {\n            return new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n        }\n        if (mongoOptions.replicaSet) {\n            return new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n        }\n        if (mongoOptions.directConnection) {\n            return new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n        }\n        if (isSrv && mongoOptions.srvMaxHosts > 0) {\n            return new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n        }\n    }\n    return;\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n    const { target, type, transform, deprecated } = descriptor;\n    const name = target !== null && target !== void 0 ? target : key;\n    if (deprecated) {\n        const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n        (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n    }\n    switch (type) {\n        case 'boolean':\n            mongoOptions[name] = getBoolean(name, values[0]);\n            break;\n        case 'int':\n            mongoOptions[name] = getInt(name, values[0]);\n            break;\n        case 'uint':\n            mongoOptions[name] = getUint(name, values[0]);\n            break;\n        case 'string':\n            if (values[0] == null) {\n                break;\n            }\n            mongoOptions[name] = String(values[0]);\n            break;\n        case 'record':\n            if (!(0, utils_1.isRecord)(values[0])) {\n                throw new error_1.MongoParseError(`${name} must be an object`);\n            }\n            mongoOptions[name] = values[0];\n            break;\n        case 'any':\n            mongoOptions[name] = values[0];\n            break;\n        default: {\n            if (!transform) {\n                throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n            }\n            const transformValue = transform({ name, options: mongoOptions, values });\n            mongoOptions[name] = transformValue;\n            break;\n        }\n    }\n}\nexports.OPTIONS = {\n    appName: {\n        target: 'metadata',\n        transform({ options, values: [value] }) {\n            return (0, utils_1.makeClientMetadata)({ ...options.driverInfo, appName: String(value) });\n        }\n    },\n    auth: {\n        target: 'credentials',\n        transform({ name, options, values: [value] }) {\n            if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n                throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                username: value.username,\n                password: value.password\n            });\n        }\n    },\n    authMechanism: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            var _a, _b;\n            const mechanisms = Object.values(providers_1.AuthMechanism);\n            const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw `\\b${value}\\b`, 'i')));\n            if (!mechanism) {\n                throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n            }\n            let source = (_a = options.credentials) === null || _a === void 0 ? void 0 : _a.source;\n            if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN ||\n                providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n                // some mechanisms have '$external' as the Auth Source\n                source = '$external';\n            }\n            let password = (_b = options.credentials) === null || _b === void 0 ? void 0 : _b.password;\n            if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === '') {\n                password = undefined;\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanism,\n                source,\n                password\n            });\n        }\n    },\n    authMechanismProperties: {\n        target: 'credentials',\n        transform({ options, values: [optionValue] }) {\n            if (typeof optionValue === 'string') {\n                const mechanismProperties = Object.create(null);\n                for (const [key, value] of entriesFromString(optionValue)) {\n                    try {\n                        mechanismProperties[key] = getBoolean(key, value);\n                    }\n                    catch {\n                        mechanismProperties[key] = value;\n                    }\n                }\n                return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                    mechanismProperties\n                });\n            }\n            if (!(0, utils_1.isRecord)(optionValue)) {\n                throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, { mechanismProperties: optionValue });\n        }\n    },\n    authSource: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            const source = String(value);\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, { source });\n        }\n    },\n    autoEncryption: {\n        type: 'record'\n    },\n    bsonRegExp: {\n        type: 'boolean'\n    },\n    serverApi: {\n        target: 'serverApi',\n        transform({ values: [version] }) {\n            const serverApiToValidate = typeof version === 'string' ? { version } : version;\n            const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n            if (!versionToValidate) {\n                throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n                throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            return serverApiToValidate;\n        }\n    },\n    checkKeys: {\n        type: 'boolean'\n    },\n    compressors: {\n        default: 'none',\n        target: 'compressors',\n        transform({ values }) {\n            const compressionList = new Set();\n            for (const compVal of values) {\n                const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n                if (!Array.isArray(compValArray)) {\n                    throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n                }\n                for (const c of compValArray) {\n                    if (Object.keys(compression_1.Compressor).includes(String(c))) {\n                        compressionList.add(String(c));\n                    }\n                    else {\n                        throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n                    }\n                }\n            }\n            return [...compressionList];\n        }\n    },\n    connectTimeoutMS: {\n        default: 30000,\n        type: 'uint'\n    },\n    dbName: {\n        type: 'string'\n    },\n    directConnection: {\n        default: false,\n        type: 'boolean'\n    },\n    driverInfo: {\n        target: 'metadata',\n        default: (0, utils_1.makeClientMetadata)(),\n        transform({ options, values: [value] }) {\n            var _a, _b;\n            if (!(0, utils_1.isRecord)(value))\n                throw new error_1.MongoParseError('DriverInfo must be an object');\n            return (0, utils_1.makeClientMetadata)({\n                driverInfo: value,\n                appName: (_b = (_a = options.metadata) === null || _a === void 0 ? void 0 : _a.application) === null || _b === void 0 ? void 0 : _b.name\n            });\n        }\n    },\n    enableUtf8Validation: { type: 'boolean', default: true },\n    family: {\n        transform({ name, values: [value] }) {\n            const transformValue = getInt(name, value);\n            if (transformValue === 4 || transformValue === 6) {\n                return transformValue;\n            }\n            throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n        }\n    },\n    fieldsAsRaw: {\n        type: 'record'\n    },\n    forceServerObjectId: {\n        default: false,\n        type: 'boolean'\n    },\n    fsync: {\n        deprecated: 'Please use journal instead',\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    fsync: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n            return wc;\n        }\n    },\n    heartbeatFrequencyMS: {\n        default: 10000,\n        type: 'uint'\n    },\n    ignoreUndefined: {\n        type: 'boolean'\n    },\n    j: {\n        deprecated: 'Please use journal instead',\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    journal: {\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    keepAlive: {\n        default: true,\n        type: 'boolean'\n    },\n    keepAliveInitialDelay: {\n        default: 120000,\n        type: 'uint'\n    },\n    loadBalanced: {\n        default: false,\n        type: 'boolean'\n    },\n    localThresholdMS: {\n        default: 15,\n        type: 'uint'\n    },\n    logger: {\n        default: new logger_1.Logger('MongoClient'),\n        transform({ values: [value] }) {\n            if (value instanceof logger_1.Logger) {\n                return value;\n            }\n            (0, utils_1.emitWarning)('Alternative loggers might not be supported');\n            // TODO: make Logger an interface that others can implement, make usage consistent in driver\n            // DRIVERS-1204\n            return;\n        }\n    },\n    loggerLevel: {\n        target: 'logger',\n        transform({ values: [value] }) {\n            return new logger_1.Logger('MongoClient', { loggerLevel: value });\n        }\n    },\n    maxConnecting: {\n        default: 2,\n        transform({ name, values: [value] }) {\n            const maxConnecting = getUint(name, value);\n            if (maxConnecting === 0) {\n                throw new error_1.MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n            }\n            return maxConnecting;\n        }\n    },\n    maxIdleTimeMS: {\n        default: 0,\n        type: 'uint'\n    },\n    maxPoolSize: {\n        default: 100,\n        type: 'uint'\n    },\n    maxStalenessSeconds: {\n        target: 'readPreference',\n        transform({ name, options, values: [value] }) {\n            const maxStalenessSeconds = getUint(name, value);\n            if (options.readPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, maxStalenessSeconds }\n                });\n            }\n            else {\n                return new read_preference_1.ReadPreference('secondary', undefined, { maxStalenessSeconds });\n            }\n        }\n    },\n    minInternalBufferSize: {\n        type: 'uint'\n    },\n    minPoolSize: {\n        default: 0,\n        type: 'uint'\n    },\n    minHeartbeatFrequencyMS: {\n        default: 500,\n        type: 'uint'\n    },\n    monitorCommands: {\n        default: false,\n        type: 'boolean'\n    },\n    name: {\n        target: 'driverInfo',\n        transform({ values: [value], options }) {\n            return { ...options.driverInfo, name: String(value) };\n        }\n    },\n    noDelay: {\n        default: true,\n        type: 'boolean'\n    },\n    pkFactory: {\n        default: utils_1.DEFAULT_PK_FACTORY,\n        transform({ values: [value] }) {\n            if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n                return value;\n            }\n            throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n        }\n    },\n    promiseLibrary: {\n        deprecated: true,\n        type: 'any'\n    },\n    promoteBuffers: {\n        type: 'boolean'\n    },\n    promoteLongs: {\n        type: 'boolean'\n    },\n    promoteValues: {\n        type: 'boolean'\n    },\n    proxyHost: {\n        type: 'string'\n    },\n    proxyPassword: {\n        type: 'string'\n    },\n    proxyPort: {\n        type: 'uint'\n    },\n    proxyUsername: {\n        type: 'string'\n    },\n    raw: {\n        default: false,\n        type: 'boolean'\n    },\n    readConcern: {\n        transform({ values: [value], options }) {\n            if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n                return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern, ...value });\n            }\n            throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n        }\n    },\n    readConcernLevel: {\n        target: 'readConcern',\n        transform({ values: [level], options }) {\n            return read_concern_1.ReadConcern.fromOptions({\n                ...options.readConcern,\n                level: level\n            });\n        }\n    },\n    readPreference: {\n        default: read_preference_1.ReadPreference.primary,\n        transform({ values: [value], options }) {\n            var _a, _b, _c;\n            if (value instanceof read_preference_1.ReadPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, ...value },\n                    ...value\n                });\n            }\n            if ((0, utils_1.isRecord)(value, ['mode'])) {\n                const rp = read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, ...value },\n                    ...value\n                });\n                if (rp)\n                    return rp;\n                else\n                    throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n            }\n            if (typeof value === 'string') {\n                const rpOpts = {\n                    hedge: (_a = options.readPreference) === null || _a === void 0 ? void 0 : _a.hedge,\n                    maxStalenessSeconds: (_b = options.readPreference) === null || _b === void 0 ? void 0 : _b.maxStalenessSeconds\n                };\n                return new read_preference_1.ReadPreference(value, (_c = options.readPreference) === null || _c === void 0 ? void 0 : _c.tags, rpOpts);\n            }\n            throw new error_1.MongoParseError(`Unknown ReadPreference value: ${value}`);\n        }\n    },\n    readPreferenceTags: {\n        target: 'readPreference',\n        transform({ values, options }) {\n            const tags = Array.isArray(values[0])\n                ? values[0]\n                : values;\n            const readPreferenceTags = [];\n            for (const tag of tags) {\n                const readPreferenceTag = Object.create(null);\n                if (typeof tag === 'string') {\n                    for (const [k, v] of entriesFromString(tag)) {\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                if ((0, utils_1.isRecord)(tag)) {\n                    for (const [k, v] of Object.entries(tag)) {\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                readPreferenceTags.push(readPreferenceTag);\n            }\n            return read_preference_1.ReadPreference.fromOptions({\n                readPreference: options.readPreference,\n                readPreferenceTags\n            });\n        }\n    },\n    replicaSet: {\n        type: 'string'\n    },\n    retryReads: {\n        default: true,\n        type: 'boolean'\n    },\n    retryWrites: {\n        default: true,\n        type: 'boolean'\n    },\n    serializeFunctions: {\n        type: 'boolean'\n    },\n    serverSelectionTimeoutMS: {\n        default: 30000,\n        type: 'uint'\n    },\n    servername: {\n        type: 'string'\n    },\n    socketTimeoutMS: {\n        default: 0,\n        type: 'uint'\n    },\n    srvMaxHosts: {\n        type: 'uint',\n        default: 0\n    },\n    srvServiceName: {\n        type: 'string',\n        default: 'mongodb'\n    },\n    ssl: {\n        target: 'tls',\n        type: 'boolean'\n    },\n    sslCA: {\n        target: 'ca',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    sslCRL: {\n        target: 'crl',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    sslCert: {\n        target: 'cert',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    sslKey: {\n        target: 'key',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    sslPass: {\n        deprecated: true,\n        target: 'passphrase',\n        type: 'string'\n    },\n    sslValidate: {\n        target: 'rejectUnauthorized',\n        type: 'boolean'\n    },\n    tls: {\n        type: 'boolean'\n    },\n    tlsAllowInvalidCertificates: {\n        target: 'rejectUnauthorized',\n        transform({ name, values: [value] }) {\n            // allowInvalidCertificates is the inverse of rejectUnauthorized\n            return !getBoolean(name, value);\n        }\n    },\n    tlsAllowInvalidHostnames: {\n        target: 'checkServerIdentity',\n        transform({ name, values: [value] }) {\n            // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n            return getBoolean(name, value) ? () => undefined : undefined;\n        }\n    },\n    tlsCAFile: {\n        target: 'ca',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    tlsCertificateFile: {\n        target: 'cert',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    tlsCertificateKeyFile: {\n        target: 'key',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    tlsCertificateKeyFilePassword: {\n        target: 'passphrase',\n        type: 'any'\n    },\n    tlsInsecure: {\n        transform({ name, options, values: [value] }) {\n            const tlsInsecure = getBoolean(name, value);\n            if (tlsInsecure) {\n                options.checkServerIdentity = () => undefined;\n                options.rejectUnauthorized = false;\n            }\n            else {\n                options.checkServerIdentity = options.tlsAllowInvalidHostnames\n                    ? () => undefined\n                    : undefined;\n                options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n            }\n            return tlsInsecure;\n        }\n    },\n    w: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            return write_concern_1.WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value } });\n        }\n    },\n    waitQueueTimeoutMS: {\n        default: 0,\n        type: 'uint'\n    },\n    writeConcern: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        ...value\n                    }\n                });\n            }\n            else if (value === 'majority' || typeof value === 'number') {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        w: value\n                    }\n                });\n            }\n            throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n        }\n    },\n    wtimeout: {\n        deprecated: 'Please use wtimeoutMS instead',\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeout: getUint('wtimeout', value)\n                }\n            });\n            if (wc)\n                return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    wtimeoutMS: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeoutMS: getUint('wtimeoutMS', value)\n                }\n            });\n            if (wc)\n                return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    zlibCompressionLevel: {\n        default: 0,\n        type: 'int'\n    },\n    // Custom types for modifying core behavior\n    connectionType: { type: 'any' },\n    srvPoller: { type: 'any' },\n    // Accepted NodeJS Options\n    minDHSize: { type: 'any' },\n    pskCallback: { type: 'any' },\n    secureContext: { type: 'any' },\n    enableTrace: { type: 'any' },\n    requestCert: { type: 'any' },\n    rejectUnauthorized: { type: 'any' },\n    checkServerIdentity: { type: 'any' },\n    ALPNProtocols: { type: 'any' },\n    SNICallback: { type: 'any' },\n    session: { type: 'any' },\n    requestOCSP: { type: 'any' },\n    localAddress: { type: 'any' },\n    localPort: { type: 'any' },\n    hints: { type: 'any' },\n    lookup: { type: 'any' },\n    ca: { type: 'any' },\n    cert: { type: 'any' },\n    ciphers: { type: 'any' },\n    crl: { type: 'any' },\n    ecdhCurve: { type: 'any' },\n    key: { type: 'any' },\n    passphrase: { type: 'any' },\n    pfx: { type: 'any' },\n    secureProtocol: { type: 'any' },\n    index: { type: 'any' },\n    // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n    useNewUrlParser: { type: 'boolean' },\n    useUnifiedTopology: { type: 'boolean' }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS)\n    .filter(([, descriptor]) => descriptor.default != null)\n    .map(([k, d]) => [k, d.default]));\n/**\n * Set of permitted feature flags\n * @internal\n */\nexports.FEATURE_FLAGS = new Set([Symbol.for('@@mdb.skipPingOnConnect')]);\n//# sourceMappingURL=connection_string.js.map"]},"metadata":{},"sourceType":"script"}