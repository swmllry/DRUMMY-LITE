{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Logger = exports.LoggerLevel = void 0;\n\nconst util_1 = require(\"util\");\n\nconst error_1 = require(\"./error\");\n\nconst utils_1 = require(\"./utils\"); // Filters for classes\n\n\nconst classFilters = {};\nlet filteredClasses = {};\nlet level; // Save the process id\n\nconst pid = process.pid; // current logger\n// eslint-disable-next-line no-console\n\nlet currentLogger = console.warn;\n/** @public */\n\nexports.LoggerLevel = Object.freeze({\n  ERROR: 'error',\n  WARN: 'warn',\n  INFO: 'info',\n  DEBUG: 'debug',\n  error: 'error',\n  warn: 'warn',\n  info: 'info',\n  debug: 'debug'\n});\n/**\n * @public\n */\n\nclass Logger {\n  /**\n   * Creates a new Logger instance\n   *\n   * @param className - The Class name associated with the logging instance\n   * @param options - Optional logging settings\n   */\n  constructor(className, options) {\n    options = options !== null && options !== void 0 ? options : {}; // Current reference\n\n    this.className = className; // Current logger\n\n    if (!(options.logger instanceof Logger) && typeof options.logger === 'function') {\n      currentLogger = options.logger;\n    } // Set level of logging, default is error\n\n\n    if (options.loggerLevel) {\n      level = options.loggerLevel || exports.LoggerLevel.ERROR;\n    } // Add all class names\n\n\n    if (filteredClasses[this.className] == null) {\n      classFilters[this.className] = true;\n    }\n  }\n  /**\n   * Log a message at the debug level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n\n\n  debug(message, object) {\n    if (this.isDebug() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n      const dateTime = new Date().getTime();\n      const msg = (0, util_1.format)('[%s-%s:%s] %s %s', 'DEBUG', this.className, pid, dateTime, message);\n      const state = {\n        type: exports.LoggerLevel.DEBUG,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n  /**\n   * Log a message at the warn level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n\n\n  warn(message, object) {\n    if (this.isWarn() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n      const dateTime = new Date().getTime();\n      const msg = (0, util_1.format)('[%s-%s:%s] %s %s', 'WARN', this.className, pid, dateTime, message);\n      const state = {\n        type: exports.LoggerLevel.WARN,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n  /**\n   * Log a message at the info level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n\n\n  info(message, object) {\n    if (this.isInfo() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n      const dateTime = new Date().getTime();\n      const msg = (0, util_1.format)('[%s-%s:%s] %s %s', 'INFO', this.className, pid, dateTime, message);\n      const state = {\n        type: exports.LoggerLevel.INFO,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n  /**\n   * Log a message at the error level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n\n\n  error(message, object) {\n    if (this.isError() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n      const dateTime = new Date().getTime();\n      const msg = (0, util_1.format)('[%s-%s:%s] %s %s', 'ERROR', this.className, pid, dateTime, message);\n      const state = {\n        type: exports.LoggerLevel.ERROR,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n  /** Is the logger set at info level */\n\n\n  isInfo() {\n    return level === exports.LoggerLevel.INFO || level === exports.LoggerLevel.DEBUG;\n  }\n  /** Is the logger set at error level */\n\n\n  isError() {\n    return level === exports.LoggerLevel.ERROR || level === exports.LoggerLevel.INFO || level === exports.LoggerLevel.DEBUG;\n  }\n  /** Is the logger set at error level */\n\n\n  isWarn() {\n    return level === exports.LoggerLevel.ERROR || level === exports.LoggerLevel.WARN || level === exports.LoggerLevel.INFO || level === exports.LoggerLevel.DEBUG;\n  }\n  /** Is the logger set at debug level */\n\n\n  isDebug() {\n    return level === exports.LoggerLevel.DEBUG;\n  }\n  /** Resets the logger to default settings, error and no filtered classes */\n\n\n  static reset() {\n    level = exports.LoggerLevel.ERROR;\n    filteredClasses = {};\n  }\n  /** Get the current logger function */\n\n\n  static currentLogger() {\n    return currentLogger;\n  }\n  /**\n   * Set the current logger function\n   *\n   * @param logger - Custom logging function\n   */\n\n\n  static setCurrentLogger(logger) {\n    if (typeof logger !== 'function') {\n      throw new error_1.MongoInvalidArgumentError('Current logger must be a function');\n    }\n\n    currentLogger = logger;\n  }\n  /**\n   * Filter log messages for a particular class\n   *\n   * @param type - The type of filter (currently only class)\n   * @param values - The filters to apply\n   */\n\n\n  static filter(type, values) {\n    if (type === 'class' && Array.isArray(values)) {\n      filteredClasses = {};\n      values.forEach(x => filteredClasses[x] = true);\n    }\n  }\n  /**\n   * Set the current log level\n   *\n   * @param newLevel - Set current log level (debug, warn, info, error)\n   */\n\n\n  static setLevel(newLevel) {\n    if (newLevel !== exports.LoggerLevel.INFO && newLevel !== exports.LoggerLevel.ERROR && newLevel !== exports.LoggerLevel.DEBUG && newLevel !== exports.LoggerLevel.WARN) {\n      throw new error_1.MongoInvalidArgumentError(`Argument \"newLevel\" should be one of ${(0, utils_1.enumToString)(exports.LoggerLevel)}`);\n    }\n\n    level = newLevel;\n  }\n\n}\n\nexports.Logger = Logger;","map":{"version":3,"sources":["../src/logger.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Logger = exports.LoggerLevel = void 0;\nconst util_1 = require(\"util\");\nconst error_1 = require(\"./error\");\nconst utils_1 = require(\"./utils\");\n// Filters for classes\nconst classFilters = {};\nlet filteredClasses = {};\nlet level;\n// Save the process id\nconst pid = process.pid;\n// current logger\n// eslint-disable-next-line no-console\nlet currentLogger = console.warn;\n/** @public */\nexports.LoggerLevel = Object.freeze({\n    ERROR: 'error',\n    WARN: 'warn',\n    INFO: 'info',\n    DEBUG: 'debug',\n    error: 'error',\n    warn: 'warn',\n    info: 'info',\n    debug: 'debug'\n});\n/**\n * @public\n */\nclass Logger {\n    /**\n     * Creates a new Logger instance\n     *\n     * @param className - The Class name associated with the logging instance\n     * @param options - Optional logging settings\n     */\n    constructor(className, options) {\n        options = options !== null && options !== void 0 ? options : {};\n        // Current reference\n        this.className = className;\n        // Current logger\n        if (!(options.logger instanceof Logger) && typeof options.logger === 'function') {\n            currentLogger = options.logger;\n        }\n        // Set level of logging, default is error\n        if (options.loggerLevel) {\n            level = options.loggerLevel || exports.LoggerLevel.ERROR;\n        }\n        // Add all class names\n        if (filteredClasses[this.className] == null) {\n            classFilters[this.className] = true;\n        }\n    }\n    /**\n     * Log a message at the debug level\n     *\n     * @param message - The message to log\n     * @param object - Additional meta data to log\n     */\n    debug(message, object) {\n        if (this.isDebug() &&\n            ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n                (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))) {\n            const dateTime = new Date().getTime();\n            const msg = (0, util_1.format)('[%s-%s:%s] %s %s', 'DEBUG', this.className, pid, dateTime, message);\n            const state = {\n                type: exports.LoggerLevel.DEBUG,\n                message,\n                className: this.className,\n                pid,\n                date: dateTime\n            };\n            if (object)\n                state.meta = object;\n            currentLogger(msg, state);\n        }\n    }\n    /**\n     * Log a message at the warn level\n     *\n     * @param message - The message to log\n     * @param object - Additional meta data to log\n     */\n    warn(message, object) {\n        if (this.isWarn() &&\n            ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n                (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))) {\n            const dateTime = new Date().getTime();\n            const msg = (0, util_1.format)('[%s-%s:%s] %s %s', 'WARN', this.className, pid, dateTime, message);\n            const state = {\n                type: exports.LoggerLevel.WARN,\n                message,\n                className: this.className,\n                pid,\n                date: dateTime\n            };\n            if (object)\n                state.meta = object;\n            currentLogger(msg, state);\n        }\n    }\n    /**\n     * Log a message at the info level\n     *\n     * @param message - The message to log\n     * @param object - Additional meta data to log\n     */\n    info(message, object) {\n        if (this.isInfo() &&\n            ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n                (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))) {\n            const dateTime = new Date().getTime();\n            const msg = (0, util_1.format)('[%s-%s:%s] %s %s', 'INFO', this.className, pid, dateTime, message);\n            const state = {\n                type: exports.LoggerLevel.INFO,\n                message,\n                className: this.className,\n                pid,\n                date: dateTime\n            };\n            if (object)\n                state.meta = object;\n            currentLogger(msg, state);\n        }\n    }\n    /**\n     * Log a message at the error level\n     *\n     * @param message - The message to log\n     * @param object - Additional meta data to log\n     */\n    error(message, object) {\n        if (this.isError() &&\n            ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n                (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))) {\n            const dateTime = new Date().getTime();\n            const msg = (0, util_1.format)('[%s-%s:%s] %s %s', 'ERROR', this.className, pid, dateTime, message);\n            const state = {\n                type: exports.LoggerLevel.ERROR,\n                message,\n                className: this.className,\n                pid,\n                date: dateTime\n            };\n            if (object)\n                state.meta = object;\n            currentLogger(msg, state);\n        }\n    }\n    /** Is the logger set at info level */\n    isInfo() {\n        return level === exports.LoggerLevel.INFO || level === exports.LoggerLevel.DEBUG;\n    }\n    /** Is the logger set at error level */\n    isError() {\n        return level === exports.LoggerLevel.ERROR || level === exports.LoggerLevel.INFO || level === exports.LoggerLevel.DEBUG;\n    }\n    /** Is the logger set at error level */\n    isWarn() {\n        return (level === exports.LoggerLevel.ERROR ||\n            level === exports.LoggerLevel.WARN ||\n            level === exports.LoggerLevel.INFO ||\n            level === exports.LoggerLevel.DEBUG);\n    }\n    /** Is the logger set at debug level */\n    isDebug() {\n        return level === exports.LoggerLevel.DEBUG;\n    }\n    /** Resets the logger to default settings, error and no filtered classes */\n    static reset() {\n        level = exports.LoggerLevel.ERROR;\n        filteredClasses = {};\n    }\n    /** Get the current logger function */\n    static currentLogger() {\n        return currentLogger;\n    }\n    /**\n     * Set the current logger function\n     *\n     * @param logger - Custom logging function\n     */\n    static setCurrentLogger(logger) {\n        if (typeof logger !== 'function') {\n            throw new error_1.MongoInvalidArgumentError('Current logger must be a function');\n        }\n        currentLogger = logger;\n    }\n    /**\n     * Filter log messages for a particular class\n     *\n     * @param type - The type of filter (currently only class)\n     * @param values - The filters to apply\n     */\n    static filter(type, values) {\n        if (type === 'class' && Array.isArray(values)) {\n            filteredClasses = {};\n            values.forEach(x => (filteredClasses[x] = true));\n        }\n    }\n    /**\n     * Set the current log level\n     *\n     * @param newLevel - Set current log level (debug, warn, info, error)\n     */\n    static setLevel(newLevel) {\n        if (newLevel !== exports.LoggerLevel.INFO &&\n            newLevel !== exports.LoggerLevel.ERROR &&\n            newLevel !== exports.LoggerLevel.DEBUG &&\n            newLevel !== exports.LoggerLevel.WARN) {\n            throw new error_1.MongoInvalidArgumentError(`Argument \"newLevel\" should be one of ${(0, utils_1.enumToString)(exports.LoggerLevel)}`);\n        }\n        level = newLevel;\n    }\n}\nexports.Logger = Logger;\n//# sourceMappingURL=logger.js.map"]},"metadata":{},"sourceType":"script"}