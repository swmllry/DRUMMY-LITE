{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveCname = exports.performGSSAPICanonicalizeHostName = exports.GSSAPI = exports.GSSAPICanonicalizationValue = void 0;\n\nconst dns = require(\"dns\");\n\nconst deps_1 = require(\"../../deps\");\n\nconst error_1 = require(\"../../error\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst auth_provider_1 = require(\"./auth_provider\");\n/** @public */\n\n\nexports.GSSAPICanonicalizationValue = Object.freeze({\n  on: true,\n  off: false,\n  none: 'none',\n  forward: 'forward',\n  forwardAndReverse: 'forwardAndReverse'\n});\n\nclass GSSAPI extends auth_provider_1.AuthProvider {\n  auth(authContext, callback) {\n    const {\n      connection,\n      credentials\n    } = authContext;\n    if (credentials == null) return callback(new error_1.MongoMissingCredentialsError('Credentials required for GSSAPI authentication'));\n    const {\n      username\n    } = credentials;\n\n    function externalCommand(command, cb) {\n      return connection.command((0, utils_1.ns)('$external.$cmd'), command, undefined, cb);\n    }\n\n    makeKerberosClient(authContext, (err, client) => {\n      if (err) return callback(err);\n      if (client == null) return callback(new error_1.MongoMissingDependencyError('GSSAPI client missing'));\n      client.step('', (err, payload) => {\n        if (err) return callback(err);\n        externalCommand(saslStart(payload), (err, result) => {\n          if (err) return callback(err);\n          if (result == null) return callback();\n          negotiate(client, 10, result.payload, (err, payload) => {\n            if (err) return callback(err);\n            externalCommand(saslContinue(payload, result.conversationId), (err, result) => {\n              if (err) return callback(err);\n              if (result == null) return callback();\n              finalize(client, username, result.payload, (err, payload) => {\n                if (err) return callback(err);\n                externalCommand({\n                  saslContinue: 1,\n                  conversationId: result.conversationId,\n                  payload\n                }, (err, result) => {\n                  if (err) return callback(err);\n                  callback(undefined, result);\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n\n}\n\nexports.GSSAPI = GSSAPI;\n\nfunction makeKerberosClient(authContext, callback) {\n  var _a;\n\n  const {\n    hostAddress\n  } = authContext.options;\n  const {\n    credentials\n  } = authContext;\n\n  if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {\n    return callback(new error_1.MongoInvalidArgumentError('Connection must have host and port and credentials defined.'));\n  }\n\n  if ('kModuleError' in deps_1.Kerberos) {\n    return callback(deps_1.Kerberos['kModuleError']);\n  }\n\n  const {\n    initializeClient\n  } = deps_1.Kerberos;\n  const {\n    username,\n    password\n  } = credentials;\n  const mechanismProperties = credentials.mechanismProperties;\n  const serviceName = (_a = mechanismProperties.SERVICE_NAME) !== null && _a !== void 0 ? _a : 'mongodb';\n  performGSSAPICanonicalizeHostName(hostAddress.host, mechanismProperties, (err, host) => {\n    var _a;\n\n    if (err) return callback(err);\n    const initOptions = {};\n\n    if (password != null) {\n      Object.assign(initOptions, {\n        user: username,\n        password: password\n      });\n    }\n\n    const spnHost = (_a = mechanismProperties.SERVICE_HOST) !== null && _a !== void 0 ? _a : host;\n    let spn = `${serviceName}${process.platform === 'win32' ? '/' : '@'}${spnHost}`;\n\n    if ('SERVICE_REALM' in mechanismProperties) {\n      spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n    }\n\n    initializeClient(spn, initOptions, (err, client) => {\n      // TODO(NODE-3483)\n      if (err) return callback(new error_1.MongoRuntimeError(err));\n      callback(undefined, client);\n    });\n  });\n}\n\nfunction saslStart(payload) {\n  return {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload,\n    autoAuthorize: 1\n  };\n}\n\nfunction saslContinue(payload, conversationId) {\n  return {\n    saslContinue: 1,\n    conversationId,\n    payload\n  };\n}\n\nfunction negotiate(client, retries, payload, callback) {\n  client.step(payload, (err, response) => {\n    // Retries exhausted, raise error\n    if (err && retries === 0) return callback(err); // Adjust number of retries and call step again\n\n    if (err) return negotiate(client, retries - 1, payload, callback); // Return the payload\n\n    callback(undefined, response || '');\n  });\n}\n\nfunction finalize(client, user, payload, callback) {\n  // GSS Client Unwrap\n  client.unwrap(payload, (err, response) => {\n    if (err) return callback(err); // Wrap the response\n\n    client.wrap(response || '', {\n      user\n    }, (err, wrapped) => {\n      if (err) return callback(err); // Return the payload\n\n      callback(undefined, wrapped);\n    });\n  });\n}\n\nfunction performGSSAPICanonicalizeHostName(host, mechanismProperties, callback) {\n  const mode = mechanismProperties.CANONICALIZE_HOST_NAME;\n\n  if (!mode || mode === exports.GSSAPICanonicalizationValue.none) {\n    return callback(undefined, host);\n  } // If forward and reverse or true\n\n\n  if (mode === exports.GSSAPICanonicalizationValue.on || mode === exports.GSSAPICanonicalizationValue.forwardAndReverse) {\n    // Perform the lookup of the ip address.\n    dns.lookup(host, (error, address) => {\n      // No ip found, return the error.\n      if (error) return callback(error); // Perform a reverse ptr lookup on the ip address.\n\n      dns.resolvePtr(address, (err, results) => {\n        // This can error as ptr records may not exist for all ips. In this case\n        // fallback to a cname lookup as dns.lookup() does not return the\n        // cname.\n        if (err) {\n          return resolveCname(host, callback);\n        } // If the ptr did not error but had no results, return the host.\n\n\n        callback(undefined, results.length > 0 ? results[0] : host);\n      });\n    });\n  } else {\n    // The case for forward is just to resolve the cname as dns.lookup()\n    // will not return it.\n    resolveCname(host, callback);\n  }\n}\n\nexports.performGSSAPICanonicalizeHostName = performGSSAPICanonicalizeHostName;\n\nfunction resolveCname(host, callback) {\n  // Attempt to resolve the host name\n  dns.resolveCname(host, (err, r) => {\n    if (err) return callback(undefined, host); // Get the first resolve host id\n\n    if (r.length > 0) {\n      return callback(undefined, r[0]);\n    }\n\n    callback(undefined, host);\n  });\n}\n\nexports.resolveCname = resolveCname;","map":{"version":3,"sources":["../../../src/cmap/auth/gssapi.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveCname = exports.performGSSAPICanonicalizeHostName = exports.GSSAPI = exports.GSSAPICanonicalizationValue = void 0;\nconst dns = require(\"dns\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\n/** @public */\nexports.GSSAPICanonicalizationValue = Object.freeze({\n    on: true,\n    off: false,\n    none: 'none',\n    forward: 'forward',\n    forwardAndReverse: 'forwardAndReverse'\n});\nclass GSSAPI extends auth_provider_1.AuthProvider {\n    auth(authContext, callback) {\n        const { connection, credentials } = authContext;\n        if (credentials == null)\n            return callback(new error_1.MongoMissingCredentialsError('Credentials required for GSSAPI authentication'));\n        const { username } = credentials;\n        function externalCommand(command, cb) {\n            return connection.command((0, utils_1.ns)('$external.$cmd'), command, undefined, cb);\n        }\n        makeKerberosClient(authContext, (err, client) => {\n            if (err)\n                return callback(err);\n            if (client == null)\n                return callback(new error_1.MongoMissingDependencyError('GSSAPI client missing'));\n            client.step('', (err, payload) => {\n                if (err)\n                    return callback(err);\n                externalCommand(saslStart(payload), (err, result) => {\n                    if (err)\n                        return callback(err);\n                    if (result == null)\n                        return callback();\n                    negotiate(client, 10, result.payload, (err, payload) => {\n                        if (err)\n                            return callback(err);\n                        externalCommand(saslContinue(payload, result.conversationId), (err, result) => {\n                            if (err)\n                                return callback(err);\n                            if (result == null)\n                                return callback();\n                            finalize(client, username, result.payload, (err, payload) => {\n                                if (err)\n                                    return callback(err);\n                                externalCommand({\n                                    saslContinue: 1,\n                                    conversationId: result.conversationId,\n                                    payload\n                                }, (err, result) => {\n                                    if (err)\n                                        return callback(err);\n                                    callback(undefined, result);\n                                });\n                            });\n                        });\n                    });\n                });\n            });\n        });\n    }\n}\nexports.GSSAPI = GSSAPI;\nfunction makeKerberosClient(authContext, callback) {\n    var _a;\n    const { hostAddress } = authContext.options;\n    const { credentials } = authContext;\n    if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {\n        return callback(new error_1.MongoInvalidArgumentError('Connection must have host and port and credentials defined.'));\n    }\n    if ('kModuleError' in deps_1.Kerberos) {\n        return callback(deps_1.Kerberos['kModuleError']);\n    }\n    const { initializeClient } = deps_1.Kerberos;\n    const { username, password } = credentials;\n    const mechanismProperties = credentials.mechanismProperties;\n    const serviceName = (_a = mechanismProperties.SERVICE_NAME) !== null && _a !== void 0 ? _a : 'mongodb';\n    performGSSAPICanonicalizeHostName(hostAddress.host, mechanismProperties, (err, host) => {\n        var _a;\n        if (err)\n            return callback(err);\n        const initOptions = {};\n        if (password != null) {\n            Object.assign(initOptions, { user: username, password: password });\n        }\n        const spnHost = (_a = mechanismProperties.SERVICE_HOST) !== null && _a !== void 0 ? _a : host;\n        let spn = `${serviceName}${process.platform === 'win32' ? '/' : '@'}${spnHost}`;\n        if ('SERVICE_REALM' in mechanismProperties) {\n            spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n        }\n        initializeClient(spn, initOptions, (err, client) => {\n            // TODO(NODE-3483)\n            if (err)\n                return callback(new error_1.MongoRuntimeError(err));\n            callback(undefined, client);\n        });\n    });\n}\nfunction saslStart(payload) {\n    return {\n        saslStart: 1,\n        mechanism: 'GSSAPI',\n        payload,\n        autoAuthorize: 1\n    };\n}\nfunction saslContinue(payload, conversationId) {\n    return {\n        saslContinue: 1,\n        conversationId,\n        payload\n    };\n}\nfunction negotiate(client, retries, payload, callback) {\n    client.step(payload, (err, response) => {\n        // Retries exhausted, raise error\n        if (err && retries === 0)\n            return callback(err);\n        // Adjust number of retries and call step again\n        if (err)\n            return negotiate(client, retries - 1, payload, callback);\n        // Return the payload\n        callback(undefined, response || '');\n    });\n}\nfunction finalize(client, user, payload, callback) {\n    // GSS Client Unwrap\n    client.unwrap(payload, (err, response) => {\n        if (err)\n            return callback(err);\n        // Wrap the response\n        client.wrap(response || '', { user }, (err, wrapped) => {\n            if (err)\n                return callback(err);\n            // Return the payload\n            callback(undefined, wrapped);\n        });\n    });\n}\nfunction performGSSAPICanonicalizeHostName(host, mechanismProperties, callback) {\n    const mode = mechanismProperties.CANONICALIZE_HOST_NAME;\n    if (!mode || mode === exports.GSSAPICanonicalizationValue.none) {\n        return callback(undefined, host);\n    }\n    // If forward and reverse or true\n    if (mode === exports.GSSAPICanonicalizationValue.on ||\n        mode === exports.GSSAPICanonicalizationValue.forwardAndReverse) {\n        // Perform the lookup of the ip address.\n        dns.lookup(host, (error, address) => {\n            // No ip found, return the error.\n            if (error)\n                return callback(error);\n            // Perform a reverse ptr lookup on the ip address.\n            dns.resolvePtr(address, (err, results) => {\n                // This can error as ptr records may not exist for all ips. In this case\n                // fallback to a cname lookup as dns.lookup() does not return the\n                // cname.\n                if (err) {\n                    return resolveCname(host, callback);\n                }\n                // If the ptr did not error but had no results, return the host.\n                callback(undefined, results.length > 0 ? results[0] : host);\n            });\n        });\n    }\n    else {\n        // The case for forward is just to resolve the cname as dns.lookup()\n        // will not return it.\n        resolveCname(host, callback);\n    }\n}\nexports.performGSSAPICanonicalizeHostName = performGSSAPICanonicalizeHostName;\nfunction resolveCname(host, callback) {\n    // Attempt to resolve the host name\n    dns.resolveCname(host, (err, r) => {\n        if (err)\n            return callback(undefined, host);\n        // Get the first resolve host id\n        if (r.length > 0) {\n            return callback(undefined, r[0]);\n        }\n        callback(undefined, host);\n    });\n}\nexports.resolveCname = resolveCname;\n//# sourceMappingURL=gssapi.js.map"]},"metadata":{},"sourceType":"script"}