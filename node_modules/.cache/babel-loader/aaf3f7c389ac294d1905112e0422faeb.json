{"ast":null,"code":"'use strict';\n/**\n * Custom implementation of a double ended queue.\n */\n\nfunction Denque(array, options) {\n  var options = options || {};\n  this._capacity = options.capacity;\n  this._head = 0;\n  this._tail = 0;\n\n  if (Array.isArray(array)) {\n    this._fromArray(array);\n  } else {\n    this._capacityMask = 0x3;\n    this._list = new Array(4);\n  }\n}\n/**\n * --------------\n *  PUBLIC API\n * -------------\n */\n\n/**\n * Returns the item at the specified index from the list.\n * 0 is the first element, 1 is the second, and so on...\n * Elements at negative values are that many from the end: -1 is one before the end\n * (the last element), -2 is two before the end (one before last), etc.\n * @param index\n * @returns {*}\n */\n\n\nDenque.prototype.peekAt = function peekAt(index) {\n  var i = index; // expect a number or return undefined\n\n  if (i !== (i | 0)) {\n    return void 0;\n  }\n\n  var len = this.size();\n  if (i >= len || i < -len) return undefined;\n  if (i < 0) i += len;\n  i = this._head + i & this._capacityMask;\n  return this._list[i];\n};\n/**\n * Alias for peekAt()\n * @param i\n * @returns {*}\n */\n\n\nDenque.prototype.get = function get(i) {\n  return this.peekAt(i);\n};\n/**\n * Returns the first item in the list without removing it.\n * @returns {*}\n */\n\n\nDenque.prototype.peek = function peek() {\n  if (this._head === this._tail) return undefined;\n  return this._list[this._head];\n};\n/**\n * Alias for peek()\n * @returns {*}\n */\n\n\nDenque.prototype.peekFront = function peekFront() {\n  return this.peek();\n};\n/**\n * Returns the item that is at the back of the queue without removing it.\n * Uses peekAt(-1)\n */\n\n\nDenque.prototype.peekBack = function peekBack() {\n  return this.peekAt(-1);\n};\n/**\n * Returns the current length of the queue\n * @return {Number}\n */\n\n\nObject.defineProperty(Denque.prototype, 'length', {\n  get: function length() {\n    return this.size();\n  }\n});\n/**\n * Return the number of items on the list, or 0 if empty.\n * @returns {number}\n */\n\nDenque.prototype.size = function size() {\n  if (this._head === this._tail) return 0;\n  if (this._head < this._tail) return this._tail - this._head;else return this._capacityMask + 1 - (this._head - this._tail);\n};\n/**\n * Add an item at the beginning of the list.\n * @param item\n */\n\n\nDenque.prototype.unshift = function unshift(item) {\n  if (arguments.length === 0) return this.size();\n  var len = this._list.length;\n  this._head = this._head - 1 + len & this._capacityMask;\n  this._list[this._head] = item;\n  if (this._tail === this._head) this._growArray();\n  if (this._capacity && this.size() > this._capacity) this.pop();\n  if (this._head < this._tail) return this._tail - this._head;else return this._capacityMask + 1 - (this._head - this._tail);\n};\n/**\n * Remove and return the first item on the list,\n * Returns undefined if the list is empty.\n * @returns {*}\n */\n\n\nDenque.prototype.shift = function shift() {\n  var head = this._head;\n  if (head === this._tail) return undefined;\n  var item = this._list[head];\n  this._list[head] = undefined;\n  this._head = head + 1 & this._capacityMask;\n  if (head < 2 && this._tail > 10000 && this._tail <= this._list.length >>> 2) this._shrinkArray();\n  return item;\n};\n/**\n * Add an item to the bottom of the list.\n * @param item\n */\n\n\nDenque.prototype.push = function push(item) {\n  if (arguments.length === 0) return this.size();\n  var tail = this._tail;\n  this._list[tail] = item;\n  this._tail = tail + 1 & this._capacityMask;\n\n  if (this._tail === this._head) {\n    this._growArray();\n  }\n\n  if (this._capacity && this.size() > this._capacity) {\n    this.shift();\n  }\n\n  if (this._head < this._tail) return this._tail - this._head;else return this._capacityMask + 1 - (this._head - this._tail);\n};\n/**\n * Remove and return the last item on the list.\n * Returns undefined if the list is empty.\n * @returns {*}\n */\n\n\nDenque.prototype.pop = function pop() {\n  var tail = this._tail;\n  if (tail === this._head) return undefined;\n  var len = this._list.length;\n  this._tail = tail - 1 + len & this._capacityMask;\n  var item = this._list[this._tail];\n  this._list[this._tail] = undefined;\n  if (this._head < 2 && tail > 10000 && tail <= len >>> 2) this._shrinkArray();\n  return item;\n};\n/**\n * Remove and return the item at the specified index from the list.\n * Returns undefined if the list is empty.\n * @param index\n * @returns {*}\n */\n\n\nDenque.prototype.removeOne = function removeOne(index) {\n  var i = index; // expect a number or return undefined\n\n  if (i !== (i | 0)) {\n    return void 0;\n  }\n\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size) return void 0;\n  if (i < 0) i += size;\n  i = this._head + i & this._capacityMask;\n  var item = this._list[i];\n  var k;\n\n  if (index < size / 2) {\n    for (k = index; k > 0; k--) {\n      this._list[i] = this._list[i = i - 1 + len & this._capacityMask];\n    }\n\n    this._list[i] = void 0;\n    this._head = this._head + 1 + len & this._capacityMask;\n  } else {\n    for (k = size - 1 - index; k > 0; k--) {\n      this._list[i] = this._list[i = i + 1 + len & this._capacityMask];\n    }\n\n    this._list[i] = void 0;\n    this._tail = this._tail - 1 + len & this._capacityMask;\n  }\n\n  return item;\n};\n/**\n * Remove number of items from the specified index from the list.\n * Returns array of removed items.\n * Returns undefined if the list is empty.\n * @param index\n * @param count\n * @returns {array}\n */\n\n\nDenque.prototype.remove = function remove(index, count) {\n  var i = index;\n  var removed;\n  var del_count = count; // expect a number or return undefined\n\n  if (i !== (i | 0)) {\n    return void 0;\n  }\n\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size || count < 1) return void 0;\n  if (i < 0) i += size;\n\n  if (count === 1 || !count) {\n    removed = new Array(1);\n    removed[0] = this.removeOne(i);\n    return removed;\n  }\n\n  if (i === 0 && i + count >= size) {\n    removed = this.toArray();\n    this.clear();\n    return removed;\n  }\n\n  if (i + count > size) count = size - i;\n  var k;\n  removed = new Array(count);\n\n  for (k = 0; k < count; k++) {\n    removed[k] = this._list[this._head + i + k & this._capacityMask];\n  }\n\n  i = this._head + i & this._capacityMask;\n\n  if (index + count === size) {\n    this._tail = this._tail - count + len & this._capacityMask;\n\n    for (k = count; k > 0; k--) {\n      this._list[i = i + 1 + len & this._capacityMask] = void 0;\n    }\n\n    return removed;\n  }\n\n  if (index === 0) {\n    this._head = this._head + count + len & this._capacityMask;\n\n    for (k = count - 1; k > 0; k--) {\n      this._list[i = i + 1 + len & this._capacityMask] = void 0;\n    }\n\n    return removed;\n  }\n\n  if (i < size / 2) {\n    this._head = this._head + index + count + len & this._capacityMask;\n\n    for (k = index; k > 0; k--) {\n      this.unshift(this._list[i = i - 1 + len & this._capacityMask]);\n    }\n\n    i = this._head - 1 + len & this._capacityMask;\n\n    while (del_count > 0) {\n      this._list[i = i - 1 + len & this._capacityMask] = void 0;\n      del_count--;\n    }\n\n    if (index < 0) this._tail = i;\n  } else {\n    this._tail = i;\n    i = i + count + len & this._capacityMask;\n\n    for (k = size - (count + index); k > 0; k--) {\n      this.push(this._list[i++]);\n    }\n\n    i = this._tail;\n\n    while (del_count > 0) {\n      this._list[i = i + 1 + len & this._capacityMask] = void 0;\n      del_count--;\n    }\n  }\n\n  if (this._head < 2 && this._tail > 10000 && this._tail <= len >>> 2) this._shrinkArray();\n  return removed;\n};\n/**\n * Native splice implementation.\n * Remove number of items from the specified index from the list and/or add new elements.\n * Returns array of removed items or empty array if count == 0.\n * Returns undefined if the list is empty.\n *\n * @param index\n * @param count\n * @param {...*} [elements]\n * @returns {array}\n */\n\n\nDenque.prototype.splice = function splice(index, count) {\n  var i = index; // expect a number or return undefined\n\n  if (i !== (i | 0)) {\n    return void 0;\n  }\n\n  var size = this.size();\n  if (i < 0) i += size;\n  if (i > size) return void 0;\n\n  if (arguments.length > 2) {\n    var k;\n    var temp;\n    var removed;\n    var arg_len = arguments.length;\n    var len = this._list.length;\n    var arguments_index = 2;\n\n    if (!size || i < size / 2) {\n      temp = new Array(i);\n\n      for (k = 0; k < i; k++) {\n        temp[k] = this._list[this._head + k & this._capacityMask];\n      }\n\n      if (count === 0) {\n        removed = [];\n\n        if (i > 0) {\n          this._head = this._head + i + len & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._head = this._head + i + len & this._capacityMask;\n      }\n\n      while (arg_len > arguments_index) {\n        this.unshift(arguments[--arg_len]);\n      }\n\n      for (k = i; k > 0; k--) {\n        this.unshift(temp[k - 1]);\n      }\n    } else {\n      temp = new Array(size - (i + count));\n      var leng = temp.length;\n\n      for (k = 0; k < leng; k++) {\n        temp[k] = this._list[this._head + i + count + k & this._capacityMask];\n      }\n\n      if (count === 0) {\n        removed = [];\n\n        if (i != size) {\n          this._tail = this._head + i + len & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._tail = this._tail - leng + len & this._capacityMask;\n      }\n\n      while (arguments_index < arg_len) {\n        this.push(arguments[arguments_index++]);\n      }\n\n      for (k = 0; k < leng; k++) {\n        this.push(temp[k]);\n      }\n    }\n\n    return removed;\n  } else {\n    return this.remove(i, count);\n  }\n};\n/**\n * Soft clear - does not reset capacity.\n */\n\n\nDenque.prototype.clear = function clear() {\n  this._list = new Array(this._list.length);\n  this._head = 0;\n  this._tail = 0;\n};\n/**\n * Returns true or false whether the list is empty.\n * @returns {boolean}\n */\n\n\nDenque.prototype.isEmpty = function isEmpty() {\n  return this._head === this._tail;\n};\n/**\n * Returns an array of all queue items.\n * @returns {Array}\n */\n\n\nDenque.prototype.toArray = function toArray() {\n  return this._copyArray(false);\n};\n/**\n * -------------\n *   INTERNALS\n * -------------\n */\n\n/**\n * Fills the queue with items from an array\n * For use in the constructor\n * @param array\n * @private\n */\n\n\nDenque.prototype._fromArray = function _fromArray(array) {\n  var length = array.length;\n\n  var capacity = this._nextPowerOf2(length);\n\n  this._list = new Array(capacity);\n  this._capacityMask = capacity - 1;\n  this._tail = length;\n\n  for (var i = 0; i < length; i++) this._list[i] = array[i];\n};\n/**\n *\n * @param fullCopy\n * @param size Initialize the array with a specific size. Will default to the current list size\n * @returns {Array}\n * @private\n */\n\n\nDenque.prototype._copyArray = function _copyArray(fullCopy, size) {\n  var src = this._list;\n  var capacity = src.length;\n  var length = this.length;\n  size = size | length; // No prealloc requested and the buffer is contiguous\n\n  if (size == length && this._head < this._tail) {\n    // Simply do a fast slice copy\n    return this._list.slice(this._head, this._tail);\n  }\n\n  var dest = new Array(size);\n  var k = 0;\n  var i;\n\n  if (fullCopy || this._head > this._tail) {\n    for (i = this._head; i < capacity; i++) dest[k++] = src[i];\n\n    for (i = 0; i < this._tail; i++) dest[k++] = src[i];\n  } else {\n    for (i = this._head; i < this._tail; i++) dest[k++] = src[i];\n  }\n\n  return dest;\n};\n/**\n * Grows the internal list array.\n * @private\n */\n\n\nDenque.prototype._growArray = function _growArray() {\n  if (this._head != 0) {\n    // double array size and copy existing data, head to end, then beginning to tail.\n    var newList = this._copyArray(true, this._list.length << 1);\n\n    this._tail = this._list.length;\n    this._head = 0;\n    this._list = newList;\n  } else {\n    this._tail = this._list.length;\n    this._list.length <<= 1;\n  }\n\n  this._capacityMask = this._capacityMask << 1 | 1;\n};\n/**\n * Shrinks the internal list array.\n * @private\n */\n\n\nDenque.prototype._shrinkArray = function _shrinkArray() {\n  this._list.length >>>= 1;\n  this._capacityMask >>>= 1;\n};\n/**\n * Find the next power of 2, at least 4\n * @private\n * @param {number} num \n * @returns {number}\n */\n\n\nDenque.prototype._nextPowerOf2 = function _nextPowerOf2(num) {\n  var log2 = Math.log(num) / Math.log(2);\n  var nextPow2 = 1 << log2 + 1;\n  return Math.max(nextPow2, 4);\n};\n\nmodule.exports = Denque;","map":{"version":3,"names":["Denque","array","options","_capacity","capacity","_head","_tail","Array","isArray","_fromArray","_capacityMask","_list","prototype","peekAt","index","i","len","size","undefined","get","peek","peekFront","peekBack","Object","defineProperty","length","unshift","item","arguments","_growArray","pop","shift","head","_shrinkArray","push","tail","removeOne","k","remove","count","removed","del_count","toArray","clear","splice","temp","arg_len","arguments_index","leng","isEmpty","_copyArray","_nextPowerOf2","fullCopy","src","slice","dest","newList","num","log2","Math","log","nextPow2","max","module","exports"],"sources":["/Users/a4543721/Documents/Concordia-Bootcamps/DRUMMY - FINAL PROJECT/Drummy/server/node_modules/denque/index.js"],"sourcesContent":["'use strict';\n\n/**\n * Custom implementation of a double ended queue.\n */\nfunction Denque(array, options) {\n  var options = options || {};\n  this._capacity = options.capacity;\n\n  this._head = 0;\n  this._tail = 0;\n\n  if (Array.isArray(array)) {\n    this._fromArray(array);\n  } else {\n    this._capacityMask = 0x3;\n    this._list = new Array(4);\n  }\n}\n\n/**\n * --------------\n *  PUBLIC API\n * -------------\n */\n\n/**\n * Returns the item at the specified index from the list.\n * 0 is the first element, 1 is the second, and so on...\n * Elements at negative values are that many from the end: -1 is one before the end\n * (the last element), -2 is two before the end (one before last), etc.\n * @param index\n * @returns {*}\n */\nDenque.prototype.peekAt = function peekAt(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var len = this.size();\n  if (i >= len || i < -len) return undefined;\n  if (i < 0) i += len;\n  i = (this._head + i) & this._capacityMask;\n  return this._list[i];\n};\n\n/**\n * Alias for peekAt()\n * @param i\n * @returns {*}\n */\nDenque.prototype.get = function get(i) {\n  return this.peekAt(i);\n};\n\n/**\n * Returns the first item in the list without removing it.\n * @returns {*}\n */\nDenque.prototype.peek = function peek() {\n  if (this._head === this._tail) return undefined;\n  return this._list[this._head];\n};\n\n/**\n * Alias for peek()\n * @returns {*}\n */\nDenque.prototype.peekFront = function peekFront() {\n  return this.peek();\n};\n\n/**\n * Returns the item that is at the back of the queue without removing it.\n * Uses peekAt(-1)\n */\nDenque.prototype.peekBack = function peekBack() {\n  return this.peekAt(-1);\n};\n\n/**\n * Returns the current length of the queue\n * @return {Number}\n */\nObject.defineProperty(Denque.prototype, 'length', {\n  get: function length() {\n    return this.size();\n  }\n});\n\n/**\n * Return the number of items on the list, or 0 if empty.\n * @returns {number}\n */\nDenque.prototype.size = function size() {\n  if (this._head === this._tail) return 0;\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Add an item at the beginning of the list.\n * @param item\n */\nDenque.prototype.unshift = function unshift(item) {\n  if (arguments.length === 0) return this.size();\n  var len = this._list.length;\n  this._head = (this._head - 1 + len) & this._capacityMask;\n  this._list[this._head] = item;\n  if (this._tail === this._head) this._growArray();\n  if (this._capacity && this.size() > this._capacity) this.pop();\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the first item on the list,\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.shift = function shift() {\n  var head = this._head;\n  if (head === this._tail) return undefined;\n  var item = this._list[head];\n  this._list[head] = undefined;\n  this._head = (head + 1) & this._capacityMask;\n  if (head < 2 && this._tail > 10000 && this._tail <= this._list.length >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Add an item to the bottom of the list.\n * @param item\n */\nDenque.prototype.push = function push(item) {\n  if (arguments.length === 0) return this.size();\n  var tail = this._tail;\n  this._list[tail] = item;\n  this._tail = (tail + 1) & this._capacityMask;\n  if (this._tail === this._head) {\n    this._growArray();\n  }\n  if (this._capacity && this.size() > this._capacity) {\n    this.shift();\n  }\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the last item on the list.\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.pop = function pop() {\n  var tail = this._tail;\n  if (tail === this._head) return undefined;\n  var len = this._list.length;\n  this._tail = (tail - 1 + len) & this._capacityMask;\n  var item = this._list[this._tail];\n  this._list[this._tail] = undefined;\n  if (this._head < 2 && tail > 10000 && tail <= len >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Remove and return the item at the specified index from the list.\n * Returns undefined if the list is empty.\n * @param index\n * @returns {*}\n */\nDenque.prototype.removeOne = function removeOne(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size) return void 0;\n  if (i < 0) i += size;\n  i = (this._head + i) & this._capacityMask;\n  var item = this._list[i];\n  var k;\n  if (index < size / 2) {\n    for (k = index; k > 0; k--) {\n      this._list[i] = this._list[i = (i - 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._head = (this._head + 1 + len) & this._capacityMask;\n  } else {\n    for (k = size - 1 - index; k > 0; k--) {\n      this._list[i] = this._list[i = (i + 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._tail = (this._tail - 1 + len) & this._capacityMask;\n  }\n  return item;\n};\n\n/**\n * Remove number of items from the specified index from the list.\n * Returns array of removed items.\n * Returns undefined if the list is empty.\n * @param index\n * @param count\n * @returns {array}\n */\nDenque.prototype.remove = function remove(index, count) {\n  var i = index;\n  var removed;\n  var del_count = count;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size || count < 1) return void 0;\n  if (i < 0) i += size;\n  if (count === 1 || !count) {\n    removed = new Array(1);\n    removed[0] = this.removeOne(i);\n    return removed;\n  }\n  if (i === 0 && i + count >= size) {\n    removed = this.toArray();\n    this.clear();\n    return removed;\n  }\n  if (i + count > size) count = size - i;\n  var k;\n  removed = new Array(count);\n  for (k = 0; k < count; k++) {\n    removed[k] = this._list[(this._head + i + k) & this._capacityMask];\n  }\n  i = (this._head + i) & this._capacityMask;\n  if (index + count === size) {\n    this._tail = (this._tail - count + len) & this._capacityMask;\n    for (k = count; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (index === 0) {\n    this._head = (this._head + count + len) & this._capacityMask;\n    for (k = count - 1; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (i < size / 2) {\n    this._head = (this._head + index + count + len) & this._capacityMask;\n    for (k = index; k > 0; k--) {\n      this.unshift(this._list[i = (i - 1 + len) & this._capacityMask]);\n    }\n    i = (this._head - 1 + len) & this._capacityMask;\n    while (del_count > 0) {\n      this._list[i = (i - 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n    if (index < 0) this._tail = i;\n  } else {\n    this._tail = i;\n    i = (i + count + len) & this._capacityMask;\n    for (k = size - (count + index); k > 0; k--) {\n      this.push(this._list[i++]);\n    }\n    i = this._tail;\n    while (del_count > 0) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n  }\n  if (this._head < 2 && this._tail > 10000 && this._tail <= len >>> 2) this._shrinkArray();\n  return removed;\n};\n\n/**\n * Native splice implementation.\n * Remove number of items from the specified index from the list and/or add new elements.\n * Returns array of removed items or empty array if count == 0.\n * Returns undefined if the list is empty.\n *\n * @param index\n * @param count\n * @param {...*} [elements]\n * @returns {array}\n */\nDenque.prototype.splice = function splice(index, count) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var size = this.size();\n  if (i < 0) i += size;\n  if (i > size) return void 0;\n  if (arguments.length > 2) {\n    var k;\n    var temp;\n    var removed;\n    var arg_len = arguments.length;\n    var len = this._list.length;\n    var arguments_index = 2;\n    if (!size || i < size / 2) {\n      temp = new Array(i);\n      for (k = 0; k < i; k++) {\n        temp[k] = this._list[(this._head + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i > 0) {\n          this._head = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._head = (this._head + i + len) & this._capacityMask;\n      }\n      while (arg_len > arguments_index) {\n        this.unshift(arguments[--arg_len]);\n      }\n      for (k = i; k > 0; k--) {\n        this.unshift(temp[k - 1]);\n      }\n    } else {\n      temp = new Array(size - (i + count));\n      var leng = temp.length;\n      for (k = 0; k < leng; k++) {\n        temp[k] = this._list[(this._head + i + count + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i != size) {\n          this._tail = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._tail = (this._tail - leng + len) & this._capacityMask;\n      }\n      while (arguments_index < arg_len) {\n        this.push(arguments[arguments_index++]);\n      }\n      for (k = 0; k < leng; k++) {\n        this.push(temp[k]);\n      }\n    }\n    return removed;\n  } else {\n    return this.remove(i, count);\n  }\n};\n\n/**\n * Soft clear - does not reset capacity.\n */\nDenque.prototype.clear = function clear() {\n  this._list = new Array(this._list.length);\n  this._head = 0;\n  this._tail = 0;\n};\n\n/**\n * Returns true or false whether the list is empty.\n * @returns {boolean}\n */\nDenque.prototype.isEmpty = function isEmpty() {\n  return this._head === this._tail;\n};\n\n/**\n * Returns an array of all queue items.\n * @returns {Array}\n */\nDenque.prototype.toArray = function toArray() {\n  return this._copyArray(false);\n};\n\n/**\n * -------------\n *   INTERNALS\n * -------------\n */\n\n/**\n * Fills the queue with items from an array\n * For use in the constructor\n * @param array\n * @private\n */\nDenque.prototype._fromArray = function _fromArray(array) {\n  var length = array.length;\n  var capacity = this._nextPowerOf2(length);\n\n  this._list = new Array(capacity);\n  this._capacityMask = capacity - 1;\n  this._tail = length;\n\n  for (var i = 0; i < length; i++) this._list[i] = array[i];\n};\n\n/**\n *\n * @param fullCopy\n * @param size Initialize the array with a specific size. Will default to the current list size\n * @returns {Array}\n * @private\n */\nDenque.prototype._copyArray = function _copyArray(fullCopy, size) {\n  var src = this._list;\n  var capacity = src.length;\n  var length = this.length;\n  size = size | length;\n\n  // No prealloc requested and the buffer is contiguous\n  if (size == length && this._head < this._tail) {\n    // Simply do a fast slice copy\n    return this._list.slice(this._head, this._tail);\n  }\n\n  var dest = new Array(size);\n\n  var k = 0;\n  var i;\n  if (fullCopy || this._head > this._tail) {\n    for (i = this._head; i < capacity; i++) dest[k++] = src[i];\n    for (i = 0; i < this._tail; i++) dest[k++] = src[i];\n  } else {\n    for (i = this._head; i < this._tail; i++) dest[k++] = src[i];\n  }\n\n  return dest;\n}\n\n/**\n * Grows the internal list array.\n * @private\n */\nDenque.prototype._growArray = function _growArray() {\n  if (this._head != 0) {\n    // double array size and copy existing data, head to end, then beginning to tail.\n    var newList = this._copyArray(true, this._list.length << 1);\n\n    this._tail = this._list.length;\n    this._head = 0;\n\n    this._list = newList;\n  } else {\n    this._tail = this._list.length;\n    this._list.length <<= 1;\n  }\n\n  this._capacityMask = (this._capacityMask << 1) | 1;\n};\n\n/**\n * Shrinks the internal list array.\n * @private\n */\nDenque.prototype._shrinkArray = function _shrinkArray() {\n  this._list.length >>>= 1;\n  this._capacityMask >>>= 1;\n};\n\n/**\n * Find the next power of 2, at least 4\n * @private\n * @param {number} num \n * @returns {number}\n */\nDenque.prototype._nextPowerOf2 = function _nextPowerOf2(num) {\n  var log2 = Math.log(num) / Math.log(2);\n  var nextPow2 = 1 << (log2 + 1);\n\n  return Math.max(nextPow2, 4);\n}\n\nmodule.exports = Denque;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}